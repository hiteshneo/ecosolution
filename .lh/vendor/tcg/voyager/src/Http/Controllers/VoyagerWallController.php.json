{
    "sourceFile": "vendor/tcg/voyager/src/Http/Controllers/VoyagerWallController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 129,
            "patches": [
                {
                    "date": 1629180380106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1629180398089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,5 +200,6 @@\n             'usesSoftDeletes',\n             'showSoftDeleted',\n             'showCheckboxColumn'\n         ));\n-    }\n\\ No newline at end of file\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629180507088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,5 +201,21 @@\n             'showSoftDeleted',\n             'showCheckboxColumn'\n         ));\n     }\n+\n+    protected function getSortableColumns($rows)\n+    {\n+        return $rows->filter(function ($item) {\n+            if ($item->type != 'relationship') {\n+                return true;\n+            }\n+            if ($item->details->type != 'belongsTo') {\n+                return false;\n+            }\n+\n+            return !$this->relationIsUsingAccessorAsLabel($item->details);\n+        })\n+        ->pluck('field')\n+        ->toArray();\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629180672496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,8 +202,330 @@\n             'showCheckboxColumn'\n         ));\n     }\n \n+    //***************************************\n+    //                _____\n+    //               |  __ \\\n+    //               | |__) |\n+    //               |  _  /\n+    //               | | \\ \\\n+    //               |_|  \\_\\\n+    //\n+    //  Read an item of our Data Type B(R)EAD\n+    //\n+    //****************************************\n+\n+    public function show(Request $request, $id)\n+    {\n+        $slug = $this->getSlug($request);\n+\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        $isSoftDeleted = false;\n+\n+        if (strlen($dataType->model_name) != 0) {\n+            $model = app($dataType->model_name);\n+            $query = $model->query();\n+\n+            // Use withTrashed() if model uses SoftDeletes and if toggle is selected\n+            if ($model && in_array(SoftDeletes::class, class_uses_recursive($model))) {\n+                $query = $query->withTrashed();\n+            }\n+            if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope'.ucfirst($dataType->scope))) {\n+                $query = $query->{$dataType->scope}();\n+            }\n+            $dataTypeContent = call_user_func([$query, 'findOrFail'], $id);\n+            if ($dataTypeContent->deleted_at) {\n+                $isSoftDeleted = true;\n+            }\n+        } else {\n+            // If Model doest exist, get data from table name\n+            $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();\n+        }\n+\n+        // Replace relationships' keys for labels and create READ links if a slug is provided.\n+        $dataTypeContent = $this->resolveRelations($dataTypeContent, $dataType, true);\n+\n+        // If a column has a relationship associated with it, we do not want to show that field\n+        $this->removeRelationshipField($dataType, 'read');\n+\n+        // Check permission\n+        $this->authorize('read', $dataTypeContent);\n+\n+        // Check if BREAD is Translatable\n+        $isModelTranslatable = is_bread_translatable($dataTypeContent);\n+\n+        // Eagerload Relations\n+        $this->eagerLoadRelations($dataTypeContent, $dataType, 'read', $isModelTranslatable);\n+\n+        $view = 'voyager::bread.read';\n+\n+        if (view()->exists(\"voyager::$slug.read\")) {\n+            $view = \"voyager::$slug.read\";\n+        }\n+\n+        return Voyager::view($view, compact('dataType', 'dataTypeContent', 'isModelTranslatable', 'isSoftDeleted'));\n+    }\n+\n+    //***************************************\n+    //                ______\n+    //               |  ____|\n+    //               | |__\n+    //               |  __|\n+    //               | |____\n+    //               |______|\n+    //\n+    //  Edit an item of our Data Type BR(E)AD\n+    //\n+    //****************************************\n+\n+    public function edit(Request $request, $id)\n+    {\n+        $slug = $this->getSlug($request);\n+\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        if (strlen($dataType->model_name) != 0) {\n+            $model = app($dataType->model_name);\n+            $query = $model->query();\n+\n+            // Use withTrashed() if model uses SoftDeletes and if toggle is selected\n+            if ($model && in_array(SoftDeletes::class, class_uses_recursive($model))) {\n+                $query = $query->withTrashed();\n+            }\n+            if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope'.ucfirst($dataType->scope))) {\n+                $query = $query->{$dataType->scope}();\n+            }\n+            $dataTypeContent = call_user_func([$query, 'findOrFail'], $id);\n+        } else {\n+            // If Model doest exist, get data from table name\n+            $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();\n+        }\n+\n+        foreach ($dataType->editRows as $key => $row) {\n+            $dataType->editRows[$key]['col_width'] = isset($row->details->width) ? $row->details->width : 100;\n+        }\n+\n+        // If a column has a relationship associated with it, we do not want to show that field\n+        $this->removeRelationshipField($dataType, 'edit');\n+\n+        // Check permission\n+        $this->authorize('edit', $dataTypeContent);\n+\n+        // Check if BREAD is Translatable\n+        $isModelTranslatable = is_bread_translatable($dataTypeContent);\n+\n+        // Eagerload Relations\n+        $this->eagerLoadRelations($dataTypeContent, $dataType, 'edit', $isModelTranslatable);\n+\n+        $view = 'voyager::bread.edit-add';\n+\n+        if (view()->exists(\"voyager::$slug.edit-add\")) {\n+            $view = \"voyager::$slug.edit-add\";\n+        }\n+\n+        return Voyager::view($view, compact('dataType', 'dataTypeContent', 'isModelTranslatable'));\n+    }\n+\n+    // POST BR(E)AD\n+    public function update(Request $request, $id)\n+    {\n+        $slug = $this->getSlug($request);\n+\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        // Compatibility with Model binding.\n+        $id = $id instanceof \\Illuminate\\Database\\Eloquent\\Model ? $id->{$id->getKeyName()} : $id;\n+\n+        $model = app($dataType->model_name);\n+        $query = $model->query();\n+        if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope'.ucfirst($dataType->scope))) {\n+            $query = $query->{$dataType->scope}();\n+        }\n+        if ($model && in_array(SoftDeletes::class, class_uses_recursive($model))) {\n+            $query = $query->withTrashed();\n+        }\n+\n+        $data = $query->findOrFail($id);\n+\n+        // Check permission\n+        $this->authorize('edit', $data);\n+\n+        // Validate fields with ajax\n+        $val = $this->validateBread($request->all(), $dataType->editRows, $dataType->name, $id)->validate();\n+\n+        // Get fields with images to remove before updating and make a copy of $data\n+        $to_remove = $dataType->editRows->where('type', 'image')\n+            ->filter(function ($item, $key) use ($request) {\n+                return $request->hasFile($item->field);\n+            });\n+        $original_data = clone($data);\n+\n+        $this->insertUpdateData($request, $slug, $dataType->editRows, $data);\n+\n+        // Delete Images\n+        $this->deleteBreadImages($original_data, $to_remove);\n+\n+        event(new BreadDataUpdated($dataType, $data));\n+\n+        if (auth()->user()->can('browse', app($dataType->model_name))) {\n+            $redirect = redirect()->route(\"voyager.{$dataType->slug}.index\");\n+        } else {\n+            $redirect = redirect()->back();\n+        }\n+\n+        return $redirect->with([\n+            'message'    => __('voyager::generic.successfully_updated').\" {$dataType->getTranslatedAttribute('display_name_singular')}\",\n+            'alert-type' => 'success',\n+        ]);\n+    }\n+\n+    //***************************************\n+    //\n+    //                   /\\\n+    //                  /  \\\n+    //                 / /\\ \\\n+    //                / ____ \\\n+    //               /_/    \\_\\\n+    //\n+    //\n+    // Add a new item of our Data Type BRE(A)D\n+    //\n+    //****************************************\n+\n+    public function create(Request $request)\n+    {\n+        $slug = $this->getSlug($request);\n+\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        // Check permission\n+        $this->authorize('add', app($dataType->model_name));\n+\n+        $dataTypeContent = (strlen($dataType->model_name) != 0)\n+                            ? new $dataType->model_name()\n+                            : false;\n+\n+        foreach ($dataType->addRows as $key => $row) {\n+            $dataType->addRows[$key]['col_width'] = $row->details->width ?? 100;\n+        }\n+\n+        // If a column has a relationship associated with it, we do not want to show that field\n+        $this->removeRelationshipField($dataType, 'add');\n+\n+        // Check if BREAD is Translatable\n+        $isModelTranslatable = is_bread_translatable($dataTypeContent);\n+\n+        // Eagerload Relations\n+        $this->eagerLoadRelations($dataTypeContent, $dataType, 'add', $isModelTranslatable);\n+\n+        $view = 'voyager::bread.edit-add';\n+\n+        if (view()->exists(\"voyager::$slug.edit-add\")) {\n+            $view = \"voyager::$slug.edit-add\";\n+        }\n+\n+        return Voyager::view($view, compact('dataType', 'dataTypeContent', 'isModelTranslatable'));\n+    }\n+\n+    /**\n+     * POST BRE(A)D - Store data.\n+     *\n+     * @param \\Illuminate\\Http\\Request $request\n+     *\n+     * @return \\Illuminate\\Http\\RedirectResponse\n+     */\n+    public function store(Request $request)\n+    {\n+        $slug = $this->getSlug($request);\n+\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        // Check permission\n+        $this->authorize('add', app($dataType->model_name));\n+\n+        // Validate fields with ajax\n+        $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n+        $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n+\n+        event(new BreadDataAdded($dataType, $data));\n+\n+        if (!$request->has('_tagging')) {\n+            if (auth()->user()->can('browse', $data)) {\n+                $redirect = redirect()->route(\"voyager.{$dataType->slug}.index\");\n+            } else {\n+                $redirect = redirect()->back();\n+            }\n+\n+            return $redirect->with([\n+                'message'    => __('voyager::generic.successfully_added_new').\" {$dataType->getTranslatedAttribute('display_name_singular')}\",\n+                'alert-type' => 'success',\n+            ]);\n+        } else {\n+            return response()->json(['success' => true, 'data' => $data]);\n+        }\n+    }\n+\n+    //***************************************\n+    //                _____\n+    //               |  __ \\\n+    //               | |  | |\n+    //               | |  | |\n+    //               | |__| |\n+    //               |_____/\n+    //\n+    //         Delete an item BREA(D)\n+    //\n+    //****************************************\n+\n+    public function destroy(Request $request, $id)\n+    {\n+        $slug = $this->getSlug($request);\n+\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        // Init array of IDs\n+        $ids = [];\n+        if (empty($id)) {\n+            // Bulk delete, get IDs from POST\n+            $ids = explode(',', $request->ids);\n+        } else {\n+            // Single item delete, get ID from URL\n+            $ids[] = $id;\n+        }\n+        foreach ($ids as $id) {\n+            $data = call_user_func([$dataType->model_name, 'findOrFail'], $id);\n+\n+            // Check permission\n+            $this->authorize('delete', $data);\n+\n+            $model = app($dataType->model_name);\n+            if (!($model && in_array(SoftDeletes::class, class_uses_recursive($model)))) {\n+                $this->cleanup($dataType, $data);\n+            }\n+        }\n+\n+        $displayName = count($ids) > 1 ? $dataType->getTranslatedAttribute('display_name_plural') : $dataType->getTranslatedAttribute('display_name_singular');\n+\n+        $res = $data->destroy($ids);\n+        $data = $res\n+            ? [\n+                'message'    => __('voyager::generic.successfully_deleted').\" {$displayName}\",\n+                'alert-type' => 'success',\n+            ]\n+            : [\n+                'message'    => __('voyager::generic.error_deleting').\" {$displayName}\",\n+                'alert-type' => 'error',\n+            ];\n+\n+        if ($res) {\n+            event(new BreadDataDeleted($dataType, $data));\n+        }\n+\n+        return redirect()->route(\"voyager.{$dataType->slug}.index\")->with($data);\n+    }\n+\n     protected function getSortableColumns($rows)\n     {\n         return $rows->filter(function ($item) {\n             if ($item->type != 'relationship') {\n@@ -217,5 +539,137 @@\n         })\n         ->pluck('field')\n         ->toArray();\n     }\n+\n+        /**\n+     * Get BREAD relations data.\n+     *\n+     * @param Request $request\n+     *\n+     * @return mixed\n+     */\n+    public function relation(Request $request)\n+    {\n+        $slug = $this->getSlug($request);\n+        $page = $request->input('page');\n+        $on_page = 50;\n+        $search = $request->input('search', false);\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        $method = $request->input('method', 'add');\n+\n+        $model = app($dataType->model_name);\n+        if ($method != 'add') {\n+            $model = $model->find($request->input('id'));\n+        }\n+\n+        $this->authorize($method, $model);\n+\n+        $rows = $dataType->{$method.'Rows'};\n+        foreach ($rows as $key => $row) {\n+            if ($row->field === $request->input('type')) {\n+                $options = $row->details;\n+                $model = app($options->model);\n+                $skip = $on_page * ($page - 1);\n+\n+                $additional_attributes = $model->additional_attributes ?? [];\n+\n+                // Apply local scope if it is defined in the relationship-options\n+                if (isset($options->scope) && $options->scope != '' && method_exists($model, 'scope'.ucfirst($options->scope))) {\n+                    $model = $model->{$options->scope}();\n+                }\n+\n+                // If search query, use LIKE to filter results depending on field label\n+                if ($search) {\n+                    // If we are using additional_attribute as label\n+                    if (in_array($options->label, $additional_attributes)) {\n+                        $relationshipOptions = $model->all();\n+                        $relationshipOptions = $relationshipOptions->filter(function ($model) use ($search, $options) {\n+                            return stripos($model->{$options->label}, $search) !== false;\n+                        });\n+                        $total_count = $relationshipOptions->count();\n+                        $relationshipOptions = $relationshipOptions->forPage($page, $on_page);\n+                    } else {\n+                        $total_count = $model->where($options->label, 'LIKE', '%'.$search.'%')->count();\n+                        $relationshipOptions = $model->take($on_page)->skip($skip)\n+                            ->where($options->label, 'LIKE', '%'.$search.'%')\n+                            ->get();\n+                    }\n+                } else {\n+                    $total_count = $model->count();\n+                    $relationshipOptions = $model->take($on_page)->skip($skip)->get();\n+                }\n+\n+                $results = [];\n+\n+                if (!$row->required && !$search && $page == 1) {\n+                    $results[] = [\n+                        'id'   => '',\n+                        'text' => __('voyager::generic.none'),\n+                    ];\n+                }\n+\n+                // Sort results\n+                if (!empty($options->sort->field)) {\n+                    if (!empty($options->sort->direction) && strtolower($options->sort->direction) == 'desc') {\n+                        $relationshipOptions = $relationshipOptions->sortByDesc($options->sort->field);\n+                    } else {\n+                        $relationshipOptions = $relationshipOptions->sortBy($options->sort->field);\n+                    }\n+                }\n+\n+                foreach ($relationshipOptions as $relationshipOption) {\n+                    $results[] = [\n+                        'id'   => $relationshipOption->{$options->key},\n+                        'text' => $relationshipOption->{$options->label},\n+                    ];\n+                }\n+\n+                return response()->json([\n+                    'results'    => $results,\n+                    'pagination' => [\n+                        'more' => ($total_count > ($skip + $on_page)),\n+                    ],\n+                ]);\n+            }\n+        }\n+\n+        // No result found, return empty array\n+        return response()->json([], 404);\n+    }\n+\n+    protected function findSearchableRelationshipRow($relationshipRows, $searchKey)\n+    {\n+        return $relationshipRows->filter(function ($item) use ($searchKey) {\n+            if ($item->details->column != $searchKey) {\n+                return false;\n+            }\n+            if ($item->details->type != 'belongsTo') {\n+                return false;\n+            }\n+\n+            return !$this->relationIsUsingAccessorAsLabel($item->details);\n+        })->first();\n+    }\n+\n+    protected function getSortableColumns($rows)\n+    {\n+        return $rows->filter(function ($item) {\n+            if ($item->type != 'relationship') {\n+                return true;\n+            }\n+            if ($item->details->type != 'belongsTo') {\n+                return false;\n+            }\n+\n+            return !$this->relationIsUsingAccessorAsLabel($item->details);\n+        })\n+        ->pluck('field')\n+        ->toArray();\n+    }\n+\n+    protected function relationIsUsingAccessorAsLabel($details)\n+    {\n+        return in_array($details->label, app($details->model)->additional_attributes ?? []);\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629180678590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -651,24 +651,8 @@\n             return !$this->relationIsUsingAccessorAsLabel($item->details);\n         })->first();\n     }\n \n-    protected function getSortableColumns($rows)\n-    {\n-        return $rows->filter(function ($item) {\n-            if ($item->type != 'relationship') {\n-                return true;\n-            }\n-            if ($item->details->type != 'belongsTo') {\n-                return false;\n-            }\n-\n-            return !$this->relationIsUsingAccessorAsLabel($item->details);\n-        })\n-        ->pluck('field')\n-        ->toArray();\n-    }\n-\n     protected function relationIsUsingAccessorAsLabel($details)\n     {\n         return in_array($details->label, app($details->model)->additional_attributes ?? []);\n     }\n"
                },
                {
                    "date": 1629184437091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -437,9 +437,9 @@\n      */\n     public function store(Request $request)\n     {\n         $slug = $this->getSlug($request);\n-\n+        echo $slug;die;\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n \n         // Check permission\n         $this->authorize('add', app($dataType->model_name));\n"
                },
                {
                    "date": 1629184452265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -436,9 +436,9 @@\n      * @return \\Illuminate\\Http\\RedirectResponse\n      */\n     public function store(Request $request)\n     {\n-        $slug = $this->getSlug($request);\n+        $slug = 'posts';\n         echo $slug;die;\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n \n         // Check permission\n"
                },
                {
                    "date": 1629184458480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -437,9 +437,9 @@\n      */\n     public function store(Request $request)\n     {\n         $slug = 'posts';\n-        echo $slug;die;\n+        \n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n \n         // Check permission\n         $this->authorize('add', app($dataType->model_name));\n"
                },
                {
                    "date": 1629185095880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -442,14 +442,19 @@\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n \n         // Check permission\n         $this->authorize('add', app($dataType->model_name));\n+        $postData = $request->all();\n+        if($postData['post_tye'] == 'reel'){\n \n+        }else{\n+\n+        }\n         // Validate fields with ajax\n         $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n-        $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n+        //$data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n \n-        event(new BreadDataAdded($dataType, $data));\n+        //event(new BreadDataAdded($dataType, $data));\n \n         if (!$request->has('_tagging')) {\n             if (auth()->user()->can('browse', $data)) {\n                 $redirect = redirect()->route(\"voyager.{$dataType->slug}.index\");\n"
                },
                {
                    "date": 1629185110690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -450,11 +450,11 @@\n \n         }\n         // Validate fields with ajax\n         $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n-        //$data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n+        $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n \n-        //event(new BreadDataAdded($dataType, $data));\n+        event(new BreadDataAdded($dataType, $data));\n \n         if (!$request->has('_tagging')) {\n             if (auth()->user()->can('browse', $data)) {\n                 $redirect = redirect()->route(\"voyager.{$dataType->slug}.index\");\n"
                },
                {
                    "date": 1629222395451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -443,9 +443,9 @@\n \n         // Check permission\n         $this->authorize('add', app($dataType->model_name));\n         $postData = $request->all();\n-        if($postData['post_tye'] == 'reel'){\n+        if($postData['post_type'] == 'reel'){\n \n         }else{\n \n         }\n"
                },
                {
                    "date": 1629223432887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -444,11 +444,35 @@\n         // Check permission\n         $this->authorize('add', app($dataType->model_name));\n         $postData = $request->all();\n         if($postData['post_type'] == 'reel'){\n-\n+            if ($request->hasFile('restaurant_image')) {\n+                $image = $request->file('restaurant_image');\n+                foreach ($image as $files) {\n+                    $destinationPath = 'storage/app/public/restaurants/';\n+                    $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n+                    $files->move($destinationPath, $file_name);\n+                    $resturantImage = $file_name;\n+                    $imageData = new RestaurantImage();\n+                    $imageData->restaurant_id = $restaurantData->id;\n+                    $imageData->image = $resturantImage;\n+                    $imageData->save();\n+                }\n+            }\n         }else{\n-\n+            if ($request->hasFile('restaurant_image')) {\n+                $image = $request->file('restaurant_image');\n+                foreach ($image as $files) {\n+                    $destinationPath = 'storage/app/public/restaurants/';\n+                    $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n+                    $files->move($destinationPath, $file_name);\n+                    $resturantImage = $file_name;\n+                    $imageData = new RestaurantImage();\n+                    $imageData->restaurant_id = $restaurantData->id;\n+                    $imageData->image = $resturantImage;\n+                    $imageData->save();\n+                }   \n+            }\n         }\n         // Validate fields with ajax\n         $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n         $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n"
                },
                {
                    "date": 1629223449406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -444,8 +444,9 @@\n         // Check permission\n         $this->authorize('add', app($dataType->model_name));\n         $postData = $request->all();\n         if($postData['post_type'] == 'reel'){\n+\n             if ($request->hasFile('restaurant_image')) {\n                 $image = $request->file('restaurant_image');\n                 foreach ($image as $files) {\n                     $destinationPath = 'storage/app/public/restaurants/';\n@@ -459,8 +460,9 @@\n                 }\n             }\n         }else{\n             if ($request->hasFile('restaurant_image')) {\n+                \n                 $image = $request->file('restaurant_image');\n                 foreach ($image as $files) {\n                     $destinationPath = 'storage/app/public/restaurants/';\n                     $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n"
                },
                {
                    "date": 1629223488312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -445,12 +445,12 @@\n         $this->authorize('add', app($dataType->model_name));\n         $postData = $request->all();\n         if($postData['post_type'] == 'reel'){\n \n-            if ($request->hasFile('restaurant_image')) {\n-                $image = $request->file('restaurant_image');\n+            if ($request->hasFile('image')) {\n+                $image = $request->file('image');\n                 foreach ($image as $files) {\n-                    $destinationPath = 'storage/app/public/restaurants/';\n+                    $destinationPath = 'storage/app/public/posts/';\n                     $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n                     $resturantImage = $file_name;\n                     $imageData = new RestaurantImage();\n@@ -459,13 +459,13 @@\n                     $imageData->save();\n                 }\n             }\n         }else{\n-            if ($request->hasFile('restaurant_image')) {\n-                \n-                $image = $request->file('restaurant_image');\n+            if ($request->hasFile('image')) {\n+\n+                $image = $request->file('image');\n                 foreach ($image as $files) {\n-                    $destinationPath = 'storage/app/public/restaurants/';\n+                    $destinationPath = 'storage/app/public/posts/';\n                     $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n                     $resturantImage = $file_name;\n                     $imageData = new RestaurantImage();\n"
                },
                {
                    "date": 1629223950287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n use TCG\\Voyager\\Events\\BreadImagesDeleted;\n use TCG\\Voyager\\Facades\\Voyager;\n use TCG\\Voyager\\Http\\Controllers\\Traits\\BreadRelationshipParser;\n use App\\Models\\Wall;\n+use App\\Models\\PostsMedia;\n \n class VoyagerWallController extends Controller\n {\n     use BreadRelationshipParser;\n"
                },
                {
                    "date": 1629223958049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -453,9 +453,9 @@\n                     $destinationPath = 'storage/app/public/posts/';\n                     $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n                     $resturantImage = $file_name;\n-                    $imageData = new RestaurantImage();\n+                    $imageData = new PostsMedia();\n                     $imageData->restaurant_id = $restaurantData->id;\n                     $imageData->image = $resturantImage;\n                     $imageData->save();\n                 }\n@@ -468,9 +468,9 @@\n                     $destinationPath = 'storage/app/public/posts/';\n                     $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n                     $resturantImage = $file_name;\n-                    $imageData = new RestaurantImage();\n+                    $imageData = new PostsMedia();\n                     $imageData->restaurant_id = $restaurantData->id;\n                     $imageData->image = $resturantImage;\n                     $imageData->save();\n                 }   \n"
                },
                {
                    "date": 1629223989562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -444,8 +444,12 @@\n \n         // Check permission\n         $this->authorize('add', app($dataType->model_name));\n         $postData = $request->all();\n+\n+        $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n+        $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n+        \n         if($postData['post_type'] == 'reel'){\n \n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n@@ -476,10 +480,9 @@\n                 }   \n             }\n         }\n         // Validate fields with ajax\n-        $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n-        $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n+        \n \n         event(new BreadDataAdded($dataType, $data));\n \n         if (!$request->has('_tagging')) {\n"
                },
                {
                    "date": 1629223997665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,9 +447,9 @@\n         $postData = $request->all();\n \n         $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n         $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n-        \n+        dd($data);\n         if($postData['post_type'] == 'reel'){\n \n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n"
                },
                {
                    "date": 1629224038002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -458,10 +458,11 @@\n                     $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n                     $resturantImage = $file_name;\n                     $imageData = new PostsMedia();\n-                    $imageData->restaurant_id = $restaurantData->id;\n-                    $imageData->image = $resturantImage;\n+                    $imageData->voxo_media_id = $restaurantData->id;\n+                    $imageData->media_files = $resturantImage;\n+                    $imageData->media_type = 'reel';\n                     $imageData->save();\n                 }\n             }\n         }else{\n"
                },
                {
                    "date": 1629224044235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -474,10 +474,11 @@\n                     $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n                     $resturantImage = $file_name;\n                     $imageData = new PostsMedia();\n-                    $imageData->restaurant_id = $restaurantData->id;\n-                    $imageData->image = $resturantImage;\n+                    $imageData->voxo_media_id = $restaurantData->id;\n+                    $imageData->media_files = $resturantImage;\n+                    $imageData->media_type = 'reel';\n                     $imageData->save();\n                 }   \n             }\n         }\n"
                },
                {
                    "date": 1629224054673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -454,9 +454,9 @@\n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n                 foreach ($image as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n-                    $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n+                    $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n                     $resturantImage = $file_name;\n                     $imageData = new PostsMedia();\n                     $imageData->voxo_media_id = $restaurantData->id;\n"
                },
                {
                    "date": 1629224128076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,9 +447,9 @@\n         $postData = $request->all();\n \n         $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n         $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n-        dd($data);\n+        dd($data->id);\n         if($postData['post_type'] == 'reel'){\n \n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n"
                },
                {
                    "date": 1629224171390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -456,12 +456,12 @@\n                 foreach ($image as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n                     $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n-                    $resturantImage = $file_name;\n+                    $postImage = $file_name;\n                     $imageData = new PostsMedia();\n-                    $imageData->voxo_media_id = $restaurantData->id;\n-                    $imageData->media_files = $resturantImage;\n+                    $imageData->voxo_media_id = $data->id;\n+                    $imageData->media_files = $postImage;\n                     $imageData->media_type = 'reel';\n                     $imageData->save();\n                 }\n             }\n@@ -472,12 +472,12 @@\n                 foreach ($image as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n                     $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n-                    $resturantImage = $file_name;\n+                    $postImage = $file_name;\n                     $imageData = new PostsMedia();\n-                    $imageData->voxo_media_id = $restaurantData->id;\n-                    $imageData->media_files = $resturantImage;\n+                    $imageData->voxo_media_id = $data->id;\n+                    $imageData->media_files = $postImage;\n                     $imageData->media_type = 'reel';\n                     $imageData->save();\n                 }   \n             }\n"
                },
                {
                    "date": 1629224182364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -456,12 +456,12 @@\n                 foreach ($image as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n                     $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n-                    $postImage = $file_name;\n+                    $postReel = $file_name;\n                     $imageData = new PostsMedia();\n                     $imageData->voxo_media_id = $data->id;\n-                    $imageData->media_files = $postImage;\n+                    $imageData->media_files = $postReel;\n                     $imageData->media_type = 'reel';\n                     $imageData->save();\n                 }\n             }\n"
                },
                {
                    "date": 1629224201777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,9 +447,9 @@\n         $postData = $request->all();\n \n         $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n         $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n-        dd($data->id);\n+        \n         if($postData['post_type'] == 'reel'){\n \n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n"
                },
                {
                    "date": 1629224281651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -448,9 +448,9 @@\n \n         $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n         $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n         \n-        if($postData['post_type'] == 'reel'){\n+        if($postData['post_type'] == 'REEL'){\n \n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n                 foreach ($image as $files) {\n"
                },
                {
                    "date": 1629224290077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -460,9 +460,9 @@\n                     $postReel = $file_name;\n                     $imageData = new PostsMedia();\n                     $imageData->voxo_media_id = $data->id;\n                     $imageData->media_files = $postReel;\n-                    $imageData->media_type = 'reel';\n+                    $imageData->media_type = $postData['post_type'];\n                     $imageData->save();\n                 }\n             }\n         }else{\n"
                },
                {
                    "date": 1629224303343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -476,9 +476,9 @@\n                     $postImage = $file_name;\n                     $imageData = new PostsMedia();\n                     $imageData->voxo_media_id = $data->id;\n                     $imageData->media_files = $postImage;\n-                    $imageData->media_type = 'reel';\n+                    $imageData->media_type = $postData['post_type'];\n                     $imageData->save();\n                 }   \n             }\n         }\n"
                },
                {
                    "date": 1629224366391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -449,9 +449,9 @@\n         $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n         $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n         \n         if($postData['post_type'] == 'REEL'){\n-\n+            echo $postData['post_type'];die;\n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n                 foreach ($image as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n@@ -465,8 +465,9 @@\n                     $imageData->save();\n                 }\n             }\n         }else{\n+            echo $postData['post_type'];die;\n             if ($request->hasFile('image')) {\n \n                 $image = $request->file('image');\n                 foreach ($image as $files) {\n"
                },
                {
                    "date": 1629224376487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -465,9 +465,9 @@\n                     $imageData->save();\n                 }\n             }\n         }else{\n-            echo $postData['post_type'];die;\n+            echo 'dadasdasdas===='.$postData['post_type'];die;\n             if ($request->hasFile('image')) {\n \n                 $image = $request->file('image');\n                 foreach ($image as $files) {\n"
                },
                {
                    "date": 1629224424012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -445,15 +445,15 @@\n         // Check permission\n         $this->authorize('add', app($dataType->model_name));\n         $postData = $request->all();\n \n-        $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n-        $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n         \n+        \n         if($postData['post_type'] == 'REEL'){\n-            echo $postData['post_type'];die;\n+            \n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n+                dd($image);\n                 foreach ($image as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n                     $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n@@ -483,9 +483,10 @@\n                 }   \n             }\n         }\n         // Validate fields with ajax\n-        \n+        $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n+        $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n \n         event(new BreadDataAdded($dataType, $data));\n \n         if (!$request->has('_tagging')) {\n"
                },
                {
                    "date": 1629224476634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -445,15 +445,16 @@\n         // Check permission\n         $this->authorize('add', app($dataType->model_name));\n         $postData = $request->all();\n \n+         // Validate fields with ajax\n+         $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n+         $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n         \n-        \n         if($postData['post_type'] == 'REEL'){\n             \n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n-                dd($image);\n                 foreach ($image as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n                     $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n@@ -482,11 +483,9 @@\n                     $imageData->save();\n                 }   \n             }\n         }\n-        // Validate fields with ajax\n-        $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n-        $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n+       \n \n         event(new BreadDataAdded($dataType, $data));\n \n         if (!$request->has('_tagging')) {\n"
                },
                {
                    "date": 1629224955028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -455,11 +455,13 @@\n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n                 foreach ($image as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n-                    $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n-                    $files->move($destinationPath, $file_name);\n-                    $postReel = $file_name;\n+                    $filename = $files->getClientOriginalName();\n+                    $extension = $files->getClientOriginalExtension();\n+                    $fileName = str_random(5).\"-\".date('his').\"-\".str_random(3).\".\".$extension;\n+                    $files->move($destinationPath, $fileName);\n+                    $postReel = $fileName;\n                     $imageData = new PostsMedia();\n                     $imageData->voxo_media_id = $data->id;\n                     $imageData->media_files = $postReel;\n                     $imageData->media_type = $postData['post_type'];\n"
                },
                {
                    "date": 1629225181557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -453,9 +453,9 @@\n         if($postData['post_type'] == 'REEL'){\n             \n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n-                foreach ($image as $files) {\n+                foreach ($postData['image'] as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n                     $filename = $files->getClientOriginalName();\n                     $extension = $files->getClientOriginalExtension();\n                     $fileName = str_random(5).\"-\".date('his').\"-\".str_random(3).\".\".$extension;\n@@ -472,9 +472,9 @@\n             echo 'dadasdasdas===='.$postData['post_type'];die;\n             if ($request->hasFile('image')) {\n \n                 $image = $request->file('image');\n-                foreach ($image as $files) {\n+                foreach ($postData['image'] as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n                     $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n                     $postImage = $file_name;\n"
                },
                {
                    "date": 1629225443652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -468,11 +468,9 @@\n                     $imageData->save();\n                 }\n             }\n         }else{\n-            echo 'dadasdasdas===='.$postData['post_type'];die;\n             if ($request->hasFile('image')) {\n-\n                 $image = $request->file('image');\n                 foreach ($postData['image'] as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n                     $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n"
                },
                {
                    "date": 1629225478189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -456,10 +456,10 @@\n                 $image = $request->file('image');\n                 foreach ($postData['image'] as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n                     $filename = $files->getClientOriginalName();\n-                    $extension = $files->getClientOriginalExtension();\n-                    $fileName = str_random(5).\"-\".date('his').\"-\".str_random(3).\".\".$extension;\n+                    //$extension = $files->getClientOriginalExtension();\n+                    $fileName = str_random(5).\"-\".date('his').\"-\".str_random(3).$filename;\n                     $files->move($destinationPath, $fileName);\n                     $postReel = $fileName;\n                     $imageData = new PostsMedia();\n                     $imageData->voxo_media_id = $data->id;\n"
                },
                {
                    "date": 1629225612114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,10 +447,17 @@\n         $postData = $request->all();\n \n          // Validate fields with ajax\n          $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n-         $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n+         //$data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n+\n         \n+        $postsData = new TCG\\Voyager\\Models\\Post();\n+        $postsData->voxo_media_id = $data->id;\n+        $postsData->media_files = $postReel;\n+        $postsData->media_type = $postData['post_type'];\n+        $postsData->save();\n+        \n         if($postData['post_type'] == 'REEL'){\n             \n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n"
                },
                {
                    "date": 1629225685760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -451,11 +451,11 @@\n          //$data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n \n         \n         $postsData = new TCG\\Voyager\\Models\\Post();\n-        $postsData->voxo_media_id = $data->id;\n-        $postsData->media_files = $postReel;\n-        $postsData->media_type = $postData['post_type'];\n+        $postsData->title = $postData['title'];\n+        $postsData->body = $postData['title'];\n+        $postsData->post_type = $postData['post_type'];\n         $postsData->save();\n         \n         if($postData['post_type'] == 'REEL'){\n             \n"
                },
                {
                    "date": 1629225707662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -444,9 +444,9 @@\n \n         // Check permission\n         $this->authorize('add', app($dataType->model_name));\n         $postData = $request->all();\n-\n+dd($postData);\n          // Validate fields with ajax\n          $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n          //$data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n \n"
                },
                {
                    "date": 1629225770922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -452,10 +452,12 @@\n \n         \n         $postsData = new TCG\\Voyager\\Models\\Post();\n         $postsData->title = $postData['title'];\n-        $postsData->body = $postData['title'];\n+        $postsData->body = $postData['body'];\n+        $postsData->slug = $postData['slug'];\n         $postsData->post_type = $postData['post_type'];\n+        $postsData->status = $postData['status'];\n         $postsData->save();\n         \n         if($postData['post_type'] == 'REEL'){\n             \n@@ -468,9 +470,9 @@\n                     $fileName = str_random(5).\"-\".date('his').\"-\".str_random(3).$filename;\n                     $files->move($destinationPath, $fileName);\n                     $postReel = $fileName;\n                     $imageData = new PostsMedia();\n-                    $imageData->voxo_media_id = $data->id;\n+                    $imageData->voxo_media_id = $postsData->id;\n                     $imageData->media_files = $postReel;\n                     $imageData->media_type = $postData['post_type'];\n                     $imageData->save();\n                 }\n@@ -483,9 +485,9 @@\n                     $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n                     $postImage = $file_name;\n                     $imageData = new PostsMedia();\n-                    $imageData->voxo_media_id = $data->id;\n+                    $imageData->voxo_media_id = $postsData->id;\n                     $imageData->media_files = $postImage;\n                     $imageData->media_type = $postData['post_type'];\n                     $imageData->save();\n                 }   \n"
                },
                {
                    "date": 1629225787548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -444,9 +444,9 @@\n \n         // Check permission\n         $this->authorize('add', app($dataType->model_name));\n         $postData = $request->all();\n-dd($postData);\n+\n          // Validate fields with ajax\n          $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n          //$data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n \n"
                },
                {
                    "date": 1629225799165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -450,9 +450,9 @@\n          $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n          //$data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n \n         \n-        $postsData = new TCG\\Voyager\\Models\\Post();\n+        $postsData = new \\TCG\\Voyager\\Models\\Post();\n         $postsData->title = $postData['title'];\n         $postsData->body = $postData['body'];\n         $postsData->slug = $postData['slug'];\n         $postsData->post_type = $postData['post_type'];\n"
                },
                {
                    "date": 1629225828481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -464,13 +464,11 @@\n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n                 foreach ($postData['image'] as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n-                    $filename = $files->getClientOriginalName();\n-                    //$extension = $files->getClientOriginalExtension();\n-                    $fileName = str_random(5).\"-\".date('his').\"-\".str_random(3).$filename;\n-                    $files->move($destinationPath, $fileName);\n-                    $postReel = $fileName;\n+                    $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n+                    $files->move($destinationPath, $file_name);\n+                    $postReel = $file_name;\n                     $imageData = new PostsMedia();\n                     $imageData->voxo_media_id = $postsData->id;\n                     $imageData->media_files = $postReel;\n                     $imageData->media_type = $postData['post_type'];\n"
                },
                {
                    "date": 1629225835819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -464,9 +464,9 @@\n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n                 foreach ($postData['image'] as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n-                    $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n+                    $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n                     $files->move($destinationPath, $file_name);\n                     $postReel = $file_name;\n                     $imageData = new PostsMedia();\n                     $imageData->voxo_media_id = $postsData->id;\n"
                },
                {
                    "date": 1629225859468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -492,9 +492,9 @@\n             }\n         }\n        \n \n-        event(new BreadDataAdded($dataType, $data));\n+        event(new BreadDataAdded($dataType, $postsData));\n \n         if (!$request->has('_tagging')) {\n             if (auth()->user()->can('browse', $data)) {\n                 $redirect = redirect()->route(\"voyager.{$dataType->slug}.index\");\n"
                },
                {
                    "date": 1629225891219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -495,9 +495,9 @@\n \n         event(new BreadDataAdded($dataType, $postsData));\n \n         if (!$request->has('_tagging')) {\n-            if (auth()->user()->can('browse', $data)) {\n+            if (auth()->user()->can('browse', $postsData)) {\n                 $redirect = redirect()->route(\"voyager.{$dataType->slug}.index\");\n             } else {\n                 $redirect = redirect()->back();\n             }\n@@ -506,9 +506,9 @@\n                 'message'    => __('voyager::generic.successfully_added_new').\" {$dataType->getTranslatedAttribute('display_name_singular')}\",\n                 'alert-type' => 'success',\n             ]);\n         } else {\n-            return response()->json(['success' => true, 'data' => $data]);\n+            return response()->json(['success' => true, 'data' => $postsData]);\n         }\n     }\n \n     //***************************************\n"
                },
                {
                    "date": 1629226065198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n use TCG\\Voyager\\Facades\\Voyager;\n use TCG\\Voyager\\Http\\Controllers\\Traits\\BreadRelationshipParser;\n use App\\Models\\Wall;\n use App\\Models\\PostsMedia;\n+use TCG\\Voyager\\Models\\Post;\n \n class VoyagerWallController extends Controller\n {\n     use BreadRelationshipParser;\n@@ -473,8 +474,9 @@\n                     $imageData->media_files = $postReel;\n                     $imageData->media_type = $postData['post_type'];\n                     $imageData->save();\n                 }\n+                \\TCG\\Voyager\\Models\\Post\n             }\n         }else{\n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n"
                },
                {
                    "date": 1629226130455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -474,9 +474,9 @@\n                     $imageData->media_files = $postReel;\n                     $imageData->media_type = $postData['post_type'];\n                     $imageData->save();\n                 }\n-                \\TCG\\Voyager\\Models\\Post\n+                Post::where('id', $postsData->id)->update(['image' => $postReel]);\n             }\n         }else{\n             if ($request->hasFile('image')) {\n                 $image = $request->file('image');\n@@ -490,8 +490,9 @@\n                     $imageData->media_files = $postImage;\n                     $imageData->media_type = $postData['post_type'];\n                     $imageData->save();\n                 }   \n+                Post::where('id', $postsData->id)->update(['image' => $postImage]);\n             }\n         }\n        \n \n"
                },
                {
                    "date": 1629226168255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -571,9 +571,52 @@\n         }\n \n         return redirect()->route(\"voyager.{$dataType->slug}.index\")->with($data);\n     }\n+/**\n+     * Remove translations, images and files related to a BREAD item.\n+     *\n+     * @param \\Illuminate\\Database\\Eloquent\\Model $dataType\n+     * @param \\Illuminate\\Database\\Eloquent\\Model $data\n+     *\n+     * @return void\n+     */\n+    protected function cleanup($dataType, $data)\n+    {\n+        // Delete Translations, if present\n+        if (is_bread_translatable($data)) {\n+            $data->deleteAttributeTranslations($data->getTranslatableAttributes());\n+        }\n \n+        // Delete Images\n+        $this->deleteBreadImages($data, $dataType->deleteRows->whereIn('type', ['image', 'multiple_images']));\n+\n+        // Delete Files\n+        foreach ($dataType->deleteRows->where('type', 'file') as $row) {\n+            if (isset($data->{$row->field})) {\n+                foreach (json_decode($data->{$row->field}) as $file) {\n+                    $this->deleteFileIfExists($file->download_link);\n+                }\n+            }\n+        }\n+\n+        // Delete media-picker files\n+        $dataType->rows->where('type', 'media_picker')->where('details.delete_files', true)->each(function ($row) use ($data) {\n+            $content = $data->{$row->field};\n+            if (isset($content)) {\n+                if (!is_array($content)) {\n+                    $content = json_decode($content);\n+                }\n+                if (is_array($content)) {\n+                    foreach ($content as $file) {\n+                        $this->deleteFileIfExists($file);\n+                    }\n+                } else {\n+                    $this->deleteFileIfExists($content);\n+                }\n+            }\n+        });\n+    }\n     protected function getSortableColumns($rows)\n     {\n         return $rows->filter(function ($item) {\n             if ($item->type != 'relationship') {\n"
                },
                {
                    "date": 1629226182842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -615,8 +615,54 @@\n                 }\n             }\n         });\n     }\n+    /**\n+     * Delete all images related to a BREAD item.\n+     *\n+     * @param \\Illuminate\\Database\\Eloquent\\Model $data\n+     * @param \\Illuminate\\Database\\Eloquent\\Model $rows\n+     *\n+     * @return void\n+     */\n+    public function deleteBreadImages($data, $rows, $single_image = null)\n+    {\n+        $imagesDeleted = false;\n+\n+        foreach ($rows as $row) {\n+            if ($row->type == 'multiple_images') {\n+                $images_to_remove = json_decode($data->getOriginal($row->field), true) ?? [];\n+            } else {\n+                $images_to_remove = [$data->getOriginal($row->field)];\n+            }\n+\n+            foreach ($images_to_remove as $image) {\n+                // Remove only $single_image if we are removing from bread edit\n+                if ($image != config('voyager.user.default_avatar') && (is_null($single_image) || $single_image == $image)) {\n+                    $this->deleteFileIfExists($image);\n+                    $imagesDeleted = true;\n+\n+                    if (isset($row->details->thumbnails)) {\n+                        foreach ($row->details->thumbnails as $thumbnail) {\n+                            $ext = explode('.', $image);\n+                            $extension = '.'.$ext[count($ext) - 1];\n+\n+                            $path = str_replace($extension, '', $image);\n+\n+                            $thumb_name = $thumbnail->name;\n+\n+                            $this->deleteFileIfExists($path.'-'.$thumb_name.$extension);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        if ($imagesDeleted) {\n+            event(new BreadImagesDeleted($data, $rows));\n+        }\n+    }\n+    \n     protected function getSortableColumns($rows)\n     {\n         return $rows->filter(function ($item) {\n             if ($item->type != 'relationship') {\n"
                },
                {
                    "date": 1629226885623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -462,19 +462,29 @@\n         \n         if($postData['post_type'] == 'REEL'){\n             \n             if ($request->hasFile('image')) {\n+                $allowedfileExtension=['mp4'];\n                 $image = $request->file('image');\n                 foreach ($postData['image'] as $files) {\n-                    $destinationPath = 'storage/app/public/posts/';\n-                    $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n-                    $files->move($destinationPath, $file_name);\n-                    $postReel = $file_name;\n-                    $imageData = new PostsMedia();\n-                    $imageData->voxo_media_id = $postsData->id;\n-                    $imageData->media_files = $postReel;\n-                    $imageData->media_type = $postData['post_type'];\n-                    $imageData->save();\n+                    $check=in_array($files->getClientOriginalExtension(),$allowedfileExtension);\n+                    if($check){\n+\n+                        $destinationPath = 'storage/app/public/posts/';\n+                        $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n+                        $files->move($destinationPath, $file_name);\n+                        $postReel = $file_name;\n+                        $imageData = new PostsMedia();\n+                        $imageData->voxo_media_id = $postsData->id;\n+                        $imageData->media_files = $postReel;\n+                        $imageData->media_type = $postData['post_type'];\n+                        $imageData->save();\n+                    }else{\n+                        return $redirect->with([\n+                            'message'    => 'Warning! Sorry Only Upload mp4',\n+                            'alert-type' => 'error',\n+                        ]);\n+                    }\n                 }\n                 Post::where('id', $postsData->id)->update(['image' => $postReel]);\n             }\n         }else{\n@@ -660,9 +670,9 @@\n         if ($imagesDeleted) {\n             event(new BreadImagesDeleted($data, $rows));\n         }\n     }\n-    \n+\n     protected function getSortableColumns($rows)\n     {\n         return $rows->filter(function ($item) {\n             if ($item->type != 'relationship') {\n"
                },
                {
                    "date": 1629226923601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -488,8 +488,9 @@\n                 Post::where('id', $postsData->id)->update(['image' => $postReel]);\n             }\n         }else{\n             if ($request->hasFile('image')) {\n+                $allowedfileExtension=['jpg','png','jpeg'];\n                 $image = $request->file('image');\n                 foreach ($postData['image'] as $files) {\n                     $destinationPath = 'storage/app/public/posts/';\n                     $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n"
                },
                {
                    "date": 1629226947939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -491,17 +491,25 @@\n             if ($request->hasFile('image')) {\n                 $allowedfileExtension=['jpg','png','jpeg'];\n                 $image = $request->file('image');\n                 foreach ($postData['image'] as $files) {\n-                    $destinationPath = 'storage/app/public/posts/';\n-                    $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n-                    $files->move($destinationPath, $file_name);\n-                    $postImage = $file_name;\n-                    $imageData = new PostsMedia();\n-                    $imageData->voxo_media_id = $postsData->id;\n-                    $imageData->media_files = $postImage;\n-                    $imageData->media_type = $postData['post_type'];\n-                    $imageData->save();\n+                    $check=in_array($files->getClientOriginalExtension(),$allowedfileExtension);\n+                    if($check){\n+                        $destinationPath = 'storage/app/public/posts/';\n+                        $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n+                        $files->move($destinationPath, $file_name);\n+                        $postImage = $file_name;\n+                        $imageData = new PostsMedia();\n+                        $imageData->voxo_media_id = $postsData->id;\n+                        $imageData->media_files = $postImage;\n+                        $imageData->media_type = $postData['post_type'];\n+                        $imageData->save();\n+                    }else{\n+                        return $redirect->with([\n+                            'message'    => 'Warning! Sorry Only Upload mp4',\n+                            'alert-type' => 'error',\n+                        ]);\n+                    }\n                 }   \n                 Post::where('id', $postsData->id)->update(['image' => $postImage]);\n             }\n         }\n"
                },
                {
                    "date": 1629278577213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -476,8 +476,9 @@\n                         $imageData = new PostsMedia();\n                         $imageData->voxo_media_id = $postsData->id;\n                         $imageData->media_files = $postReel;\n                         $imageData->media_type = $postData['post_type'];\n+                        $imageData->mime_type = $files->getClientOriginalExtension();\n                         $imageData->save();\n                     }else{\n                         return $redirect->with([\n                             'message'    => 'Warning! Sorry Only Upload mp4',\n@@ -501,8 +502,9 @@\n                         $imageData = new PostsMedia();\n                         $imageData->voxo_media_id = $postsData->id;\n                         $imageData->media_files = $postImage;\n                         $imageData->media_type = $postData['post_type'];\n+                        $imageData->mime_type = $files->getClientOriginalExtension();\n                         $imageData->save();\n                     }else{\n                         return $redirect->with([\n                             'message'    => 'Warning! Sorry Only Upload mp4',\n"
                },
                {
                    "date": 1629279789314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -472,8 +472,11 @@\n                         $destinationPath = 'storage/app/public/posts/';\n                         $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n                         $files->move($destinationPath, $file_name);\n                         $postReel = $file_name;\n+                        $command = \"/usr/bin/ffmpeg -i \" . $video . \" -vf fps=1/60 thumbnail-%03d.png\";\n+system($command);\n+\n                         $imageData = new PostsMedia();\n                         $imageData->voxo_media_id = $postsData->id;\n                         $imageData->media_files = $postReel;\n                         $imageData->media_type = $postData['post_type'];\n"
                },
                {
                    "date": 1629279848708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -472,10 +472,10 @@\n                         $destinationPath = 'storage/app/public/posts/';\n                         $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n                         $files->move($destinationPath, $file_name);\n                         $postReel = $file_name;\n-                        $command = \"/usr/bin/ffmpeg -i \" . $video . \" -vf fps=1/60 thumbnail-%03d.png\";\n-system($command);\n+                        $command = \"/usr/bin/ffmpeg -i \" . $postReel . \" -vf fps=1/60 thumbnail-d.png\";\n+                        system($command);\n \n                         $imageData = new PostsMedia();\n                         $imageData->voxo_media_id = $postsData->id;\n                         $imageData->media_files = $postReel;\n"
                },
                {
                    "date": 1629280013603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -508,8 +508,9 @@\n                         $imageData->media_type = $postData['post_type'];\n                         $imageData->mime_type = $files->getClientOriginalExtension();\n                         $imageData->save();\n                     }else{\n+                        $redirect = redirect()->back();\n                         return $redirect->with([\n                             'message'    => 'Warning! Sorry Only Upload mp4',\n                             'alert-type' => 'error',\n                         ]);\n"
                },
                {
                    "date": 1629280062263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -482,8 +482,9 @@\n                         $imageData->media_type = $postData['post_type'];\n                         $imageData->mime_type = $files->getClientOriginalExtension();\n                         $imageData->save();\n                     }else{\n+                        $redirect = redirect()->back();\n                         return $redirect->with([\n                             'message'    => 'Warning! Sorry Only Upload mp4',\n                             'alert-type' => 'error',\n                         ]);\n"
                },
                {
                    "date": 1629280079846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -511,9 +511,9 @@\n                         $imageData->save();\n                     }else{\n                         $redirect = redirect()->back();\n                         return $redirect->with([\n-                            'message'    => 'Warning! Sorry Only Upload mp4',\n+                            'message'    => 'Warning! Sorry Only Upload jpg, png, jpeg',\n                             'alert-type' => 'error',\n                         ]);\n                     }\n                 }   \n"
                },
                {
                    "date": 1629280146049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -472,9 +472,9 @@\n                         $destinationPath = 'storage/app/public/posts/';\n                         $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n                         $files->move($destinationPath, $file_name);\n                         $postReel = $file_name;\n-                        $command = \"/usr/bin/ffmpeg -i \" . $postReel . \" -vf fps=1/60 thumbnail-d.png\";\n+                        $command = \"/usr/bin/ffmpeg -i \" . $postReel . \" -vf fps=1/60\" $destinationPath.\"thumbnail-d.png\";\n                         system($command);\n \n                         $imageData = new PostsMedia();\n                         $imageData->voxo_media_id = $postsData->id;\n"
                },
                {
                    "date": 1629280173477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -472,9 +472,9 @@\n                         $destinationPath = 'storage/app/public/posts/';\n                         $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n                         $files->move($destinationPath, $file_name);\n                         $postReel = $file_name;\n-                        $command = \"/usr/bin/ffmpeg -i \" . $postReel . \" -vf fps=1/60\" $destinationPath.\"thumbnail-d.png\";\n+                        $command = \"/usr/bin/ffmpeg -i \" . $postReel . \" -vf fps=1/60\". $destinationPath.\"thumbnail-d.png\";\n                         system($command);\n \n                         $imageData = new PostsMedia();\n                         $imageData->voxo_media_id = $postsData->id;\n"
                },
                {
                    "date": 1629280468378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -472,11 +472,19 @@\n                         $destinationPath = 'storage/app/public/posts/';\n                         $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n                         $files->move($destinationPath, $file_name);\n                         $postReel = $file_name;\n-                        $command = \"/usr/bin/ffmpeg -i \" . $postReel . \" -vf fps=1/60\". $destinationPath.\"thumbnail-d.png\";\n-                        system($command);\n \n+                        $videoFile = '/var/www/html/tic-talk/'.$destinationPath.$postReel;  \n+                        // Full path to output image file (make sure the containing folder has write permissions!)  \n+                        $imgOut = '/var/www/html/tic-talk/'.$destinationPath.'image1.jpeg';  \n+                        // Number of seconds into the video to extract the frame  \n+                        $second = 0;  \n+                        // Setup the command to get the frame image  \n+                        $cmd = $ffmpeg.\" -i \\\"\".$videoFile.\"\\\" -an -ss \".$second.\".001 -y -f mjpeg \\\"\".$imgOut.\"\\\" 2>&1\";  \n+                        // Get any feedback from the command  \n+                        $feedback = `$cmd`;  \n+\n                         $imageData = new PostsMedia();\n                         $imageData->voxo_media_id = $postsData->id;\n                         $imageData->media_files = $postReel;\n                         $imageData->media_type = $postData['post_type'];\n"
                },
                {
                    "date": 1629280476608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,9 +481,9 @@\n                         $second = 0;  \n                         // Setup the command to get the frame image  \n                         $cmd = $ffmpeg.\" -i \\\"\".$videoFile.\"\\\" -an -ss \".$second.\".001 -y -f mjpeg \\\"\".$imgOut.\"\\\" 2>&1\";  \n                         // Get any feedback from the command  \n-                        $feedback = `$cmd`;  \n+                        $feedback = $cmd;  \n \n                         $imageData = new PostsMedia();\n                         $imageData->voxo_media_id = $postsData->id;\n                         $imageData->media_files = $postReel;\n"
                },
                {
                    "date": 1629280492358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -486,9 +486,9 @@\n \n                         $imageData = new PostsMedia();\n                         $imageData->voxo_media_id = $postsData->id;\n                         $imageData->media_files = $postReel;\n-                        $imageData->media_type = $postData['post_type'];\n+                        $imageData->media_type = $feedback;\n                         $imageData->mime_type = $files->getClientOriginalExtension();\n                         $imageData->save();\n                     }else{\n                         $redirect = redirect()->back();\n"
                },
                {
                    "date": 1629280563213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -473,8 +473,9 @@\n                         $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n                         $files->move($destinationPath, $file_name);\n                         $postReel = $file_name;\n \n+                        $ffmpeg = '/usr/bin/ffmpeg';\n                         $videoFile = '/var/www/html/tic-talk/'.$destinationPath.$postReel;  \n                         // Full path to output image file (make sure the containing folder has write permissions!)  \n                         $imgOut = '/var/www/html/tic-talk/'.$destinationPath.'image1.jpeg';  \n                         // Number of seconds into the video to extract the frame  \n"
                },
                {
                    "date": 1629280880863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -476,9 +476,9 @@\n \n                         $ffmpeg = '/usr/bin/ffmpeg';\n                         $videoFile = '/var/www/html/tic-talk/'.$destinationPath.$postReel;  \n                         // Full path to output image file (make sure the containing folder has write permissions!)  \n-                        $imgOut = '/var/www/html/tic-talk/'.$destinationPath.'image1.jpeg';  \n+                        $imgOut = '/var/www/html/tic-talk/'.$destinationPath.'image1ss.jpeg';  \n                         // Number of seconds into the video to extract the frame  \n                         $second = 0;  \n                         // Setup the command to get the frame image  \n                         $cmd = $ffmpeg.\" -i \\\"\".$videoFile.\"\\\" -an -ss \".$second.\".001 -y -f mjpeg \\\"\".$imgOut.\"\\\" 2>&1\";  \n"
                },
                {
                    "date": 1629282725870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -473,19 +473,8 @@\n                         $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n                         $files->move($destinationPath, $file_name);\n                         $postReel = $file_name;\n \n-                        $ffmpeg = '/usr/bin/ffmpeg';\n-                        $videoFile = '/var/www/html/tic-talk/'.$destinationPath.$postReel;  \n-                        // Full path to output image file (make sure the containing folder has write permissions!)  \n-                        $imgOut = '/var/www/html/tic-talk/'.$destinationPath.'image1ss.jpeg';  \n-                        // Number of seconds into the video to extract the frame  \n-                        $second = 0;  \n-                        // Setup the command to get the frame image  \n-                        $cmd = $ffmpeg.\" -i \\\"\".$videoFile.\"\\\" -an -ss \".$second.\".001 -y -f mjpeg \\\"\".$imgOut.\"\\\" 2>&1\";  \n-                        // Get any feedback from the command  \n-                        $feedback = $cmd;  \n-\n                         $imageData = new PostsMedia();\n                         $imageData->voxo_media_id = $postsData->id;\n                         $imageData->media_files = $postReel;\n                         $imageData->media_type = $feedback;\n"
                },
                {
                    "date": 1629282807209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -476,9 +476,9 @@\n \n                         $imageData = new PostsMedia();\n                         $imageData->voxo_media_id = $postsData->id;\n                         $imageData->media_files = $postReel;\n-                        $imageData->media_type = $feedback;\n+                        $imageData->media_type =$postData['post_type'];\n                         $imageData->mime_type = $files->getClientOriginalExtension();\n                         $imageData->save();\n                     }else{\n                         $redirect = redirect()->back();\n"
                },
                {
                    "date": 1629283444938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -487,9 +487,9 @@\n                             'alert-type' => 'error',\n                         ]);\n                     }\n                 }\n-                Post::where('id', $postsData->id)->update(['image' => $postReel]);\n+                Post::where('id', $postsData->id)->update(['image' => 'video_play.png']);\n             }\n         }else{\n             if ($request->hasFile('image')) {\n                 $allowedfileExtension=['jpg','png','jpeg'];\n"
                },
                {
                    "date": 1629392727210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,9 +264,9 @@\n \n         if (view()->exists(\"voyager::$slug.read\")) {\n             $view = \"voyager::$slug.read\";\n         }\n-\n+        dd($dataTypeContent);\n         return Voyager::view($view, compact('dataType', 'dataTypeContent', 'isModelTranslatable', 'isSoftDeleted'));\n     }\n \n     //***************************************\n"
                },
                {
                    "date": 1629392782903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,8 +240,9 @@\n             if ($dataTypeContent->deleted_at) {\n                 $isSoftDeleted = true;\n             }\n         } else {\n+            echo 'dadsad';die;\n             // If Model doest exist, get data from table name\n             $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();\n         }\n \n"
                },
                {
                    "date": 1629392838494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,24 +225,12 @@\n \n         $isSoftDeleted = false;\n \n         if (strlen($dataType->model_name) != 0) {\n-            $model = app($dataType->model_name);\n-            $query = $model->query();\n-\n-            // Use withTrashed() if model uses SoftDeletes and if toggle is selected\n-            if ($model && in_array(SoftDeletes::class, class_uses_recursive($model))) {\n-                $query = $query->withTrashed();\n-            }\n-            if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope'.ucfirst($dataType->scope))) {\n-                $query = $query->{$dataType->scope}();\n-            }\n-            $dataTypeContent = call_user_func([$query, 'findOrFail'], $id);\n-            if ($dataTypeContent->deleted_at) {\n-                $isSoftDeleted = true;\n-            }\n+            echo 'dadsad';die;\n+            $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();\n         } else {\n-            echo 'dadsad';die;\n+            \n             // If Model doest exist, get data from table name\n             $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();\n         }\n \n"
                },
                {
                    "date": 1629392855160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,10 +225,10 @@\n \n         $isSoftDeleted = false;\n \n         if (strlen($dataType->model_name) != 0) {\n-            echo 'dadsad';die;\n-            $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();\n+            \n+            $dataTypeContent = DB::table($dataType->name)->with('authorId')->where('id', $id)->first();\n         } else {\n             \n             // If Model doest exist, get data from table name\n             $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();\n"
                },
                {
                    "date": 1629392873389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n         $isSoftDeleted = false;\n \n         if (strlen($dataType->model_name) != 0) {\n             \n-            $dataTypeContent = DB::table($dataType->name)->with('authorId')->where('id', $id)->first();\n+            $dataTypeContent = Post::with('authorId')->where('id', $id)->first();\n         } else {\n             \n             // If Model doest exist, get data from table name\n             $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();\n"
                },
                {
                    "date": 1629392927293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,9 +253,9 @@\n \n         if (view()->exists(\"voyager::$slug.read\")) {\n             $view = \"voyager::$slug.read\";\n         }\n-        dd($dataTypeContent);\n+        //dd($dataTypeContent);\n         return Voyager::view($view, compact('dataType', 'dataTypeContent', 'isModelTranslatable', 'isSoftDeleted'));\n     }\n \n     //***************************************\n"
                },
                {
                    "date": 1629393992727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n         $isSoftDeleted = false;\n \n         if (strlen($dataType->model_name) != 0) {\n             \n-            $dataTypeContent = Post::with('authorId')->where('id', $id)->first();\n+            $dataTypeContent = Post::with('authorId', 'postMedia')->where('id', $id)->first();\n         } else {\n             \n             // If Model doest exist, get data from table name\n             $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();\n"
                },
                {
                    "date": 1629395208687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n use TCG\\Voyager\\Http\\Controllers\\Traits\\BreadRelationshipParser;\n use App\\Models\\Wall;\n use App\\Models\\PostsMedia;\n use TCG\\Voyager\\Models\\Post;\n+use Yajra\\DataTables\\Facades\\DataTables;\n \n class VoyagerWallController extends Controller\n {\n     use BreadRelationshipParser;\n@@ -204,8 +205,12 @@\n             'showCheckboxColumn'\n         ));\n     }\n \n+\n+    public function getPostsList(Request $request){\n+\n+    }\n     //***************************************\n     //                _____\n     //               |  __ \\\n     //               | |__) |\n"
                },
                {
                    "date": 1629395260387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,9 +207,45 @@\n     }\n \n \n     public function getPostsList(Request $request){\n+        $userData = Post::with('authorId', 'postMedia')->orderBy('id', 'DESC');\n \n+        return Datatables::of($userData)\n+            ->addColumn('user_name', function ($data) {\n+                return $data->user_name;\n+            })->addColumn('name', function ($data) {\n+                return $data->name;\n+            })->addColumn('email', function ($data) {\n+                return $data->email;\n+            })->addColumn('mobile_number', function ($data) {\n+                return $data->mobile_number;\n+            })->addColumn('gender', function ($data) {\n+                return $data->gender;\n+            })->addColumn('avatar', function ($data) {\n+                return $data->avatar;\n+            })->addColumn('created_at', function ($data) {\n+                return $data->created_at;\n+            })->addColumn('action', function ($data) {\n+                $datanew = base64_encode(json_encode($data));\n+                $action = '';   \n+                $action .= '<a href=\"'.route('voyager.user.media', ['type' => 'wall', 'id' => $data->id]).'\" title=\"Wall List\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-images\"></i></a>'; \n+\n+                $action .= '<a href=\"'.route('voyager.user.media', ['type' => 'reel', 'id' => $data->id]).'\" title=\"Reel List\" class=\"btn btn-sm btn-success pull-right edit\"><i class=\"voyager-video\"></i></a>';  \n+\n+                $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n+\n+                $action .= '<a href=\"\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n+\n+                $action .= '<a href=\"\" title=\"Edit\" class=\"btn btn-sm btn-warning pull-right edit\"><i class=\"voyager-edit\"></i></a>'; \n+\n+                $action .= '<a href=\"javascript:;\" title=\"Active\" class=\"btn btn-sm btn-success pull-right active\" data-type=\"A\"><i class=\"voyager-check\"></i></a>';   \n+\n+                return $action ;\n+               \n+            })\n+            ->blacklist(['action'])\n+            ->make(true);\n     }\n     //***************************************\n     //                _____\n     //               |  __ \\\n"
                },
                {
                    "date": 1629395268233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,11 +207,11 @@\n     }\n \n \n     public function getPostsList(Request $request){\n-        $userData = Post::with('authorId', 'postMedia')->orderBy('id', 'DESC');\n+        $postData = Post::with('authorId', 'postMedia')->orderBy('id', 'DESC');\n \n-        return Datatables::of($userData)\n+        return Datatables::of($postData)\n             ->addColumn('user_name', function ($data) {\n                 return $data->user_name;\n             })->addColumn('name', function ($data) {\n                 return $data->name;\n"
                },
                {
                    "date": 1629395375317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,15 +211,15 @@\n         $postData = Post::with('authorId', 'postMedia')->orderBy('id', 'DESC');\n \n         return Datatables::of($postData)\n             ->addColumn('user_name', function ($data) {\n-                return $data->user_name;\n-            })->addColumn('name', function ($data) {\n-                return $data->name;\n-            })->addColumn('email', function ($data) {\n-                return $data->email;\n+                return $data->authorId->name;\n+            })->addColumn('title', function ($data) {\n+                return $data->title;\n+            })->addColumn('post_type', function ($data) {\n+                return $data->post_type;\n             })->addColumn('mobile_number', function ($data) {\n-                return $data->mobile_number;\n+                return $data->postMedia[0]->media_files;\n             })->addColumn('gender', function ($data) {\n                 return $data->gender;\n             })->addColumn('avatar', function ($data) {\n                 return $data->avatar;\n"
                },
                {
                    "date": 1629395382061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,9 +216,9 @@\n             })->addColumn('title', function ($data) {\n                 return $data->title;\n             })->addColumn('post_type', function ($data) {\n                 return $data->post_type;\n-            })->addColumn('mobile_number', function ($data) {\n+            })->addColumn('media_file', function ($data) {\n                 return $data->postMedia[0]->media_files;\n             })->addColumn('gender', function ($data) {\n                 return $data->gender;\n             })->addColumn('avatar', function ($data) {\n"
                },
                {
                    "date": 1629395394844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,12 +218,10 @@\n             })->addColumn('post_type', function ($data) {\n                 return $data->post_type;\n             })->addColumn('media_file', function ($data) {\n                 return $data->postMedia[0]->media_files;\n-            })->addColumn('gender', function ($data) {\n-                return $data->gender;\n-            })->addColumn('avatar', function ($data) {\n-                return $data->avatar;\n+            })->addColumn('status', function ($data) {\n+                return $data->status;\n             })->addColumn('created_at', function ($data) {\n                 return $data->created_at;\n             })->addColumn('action', function ($data) {\n                 $datanew = base64_encode(json_encode($data));\n"
                },
                {
                    "date": 1629395497188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,9 +217,9 @@\n                 return $data->title;\n             })->addColumn('post_type', function ($data) {\n                 return $data->post_type;\n             })->addColumn('media_file', function ($data) {\n-                return $data->postMedia[0]->media_files;\n+                return $data->postMedia->media_type;\n             })->addColumn('status', function ($data) {\n                 return $data->status;\n             })->addColumn('created_at', function ($data) {\n                 return $data->created_at;\n"
                },
                {
                    "date": 1629395520523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,10 +207,10 @@\n     }\n \n \n     public function getPostsList(Request $request){\n-        $postData = Post::with('authorId', 'postMedia')->orderBy('id', 'DESC');\n-\n+        $postData = Post::with('authorId', 'postMedia')->orderBy('id', 'DESC')->get();\n+        dd($postData);\n         return Datatables::of($postData)\n             ->addColumn('user_name', function ($data) {\n                 return $data->authorId->name;\n             })->addColumn('title', function ($data) {\n"
                },
                {
                    "date": 1629395547430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,18 +208,18 @@\n \n \n     public function getPostsList(Request $request){\n         $postData = Post::with('authorId', 'postMedia')->orderBy('id', 'DESC')->get();\n-        dd($postData);\n+        \n         return Datatables::of($postData)\n             ->addColumn('user_name', function ($data) {\n                 return $data->authorId->name;\n             })->addColumn('title', function ($data) {\n                 return $data->title;\n             })->addColumn('post_type', function ($data) {\n                 return $data->post_type;\n             })->addColumn('media_file', function ($data) {\n-                return $data->postMedia->media_type;\n+                return $data->postMedia[0];\n             })->addColumn('status', function ($data) {\n                 return $data->status;\n             })->addColumn('created_at', function ($data) {\n                 return $data->created_at;\n"
                },
                {
                    "date": 1629395579747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,9 +217,9 @@\n                 return $data->title;\n             })->addColumn('post_type', function ($data) {\n                 return $data->post_type;\n             })->addColumn('media_file', function ($data) {\n-                return $data->postMedia[0];\n+                return $data->image;\n             })->addColumn('status', function ($data) {\n                 return $data->status;\n             })->addColumn('created_at', function ($data) {\n                 return $data->created_at;\n"
                },
                {
                    "date": 1629395657234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,848 @@\n+<?php\n+\n+namespace TCG\\Voyager\\Http\\Controllers;\n+\n+use Exception;\n+use Illuminate\\Database\\Eloquent\\SoftDeletes;\n+use Illuminate\\Http\\Request;\n+use Illuminate\\Support\\Facades\\Auth;\n+use Illuminate\\Support\\Facades\\DB;\n+use TCG\\Voyager\\Database\\Schema\\SchemaManager;\n+use TCG\\Voyager\\Events\\BreadDataAdded;\n+use TCG\\Voyager\\Events\\BreadDataDeleted;\n+use TCG\\Voyager\\Events\\BreadDataRestored;\n+use TCG\\Voyager\\Events\\BreadDataUpdated;\n+use TCG\\Voyager\\Events\\BreadImagesDeleted;\n+use TCG\\Voyager\\Facades\\Voyager;\n+use TCG\\Voyager\\Http\\Controllers\\Traits\\BreadRelationshipParser;\n+use App\\Models\\Wall;\n+use App\\Models\\PostsMedia;\n+use TCG\\Voyager\\Models\\Post;\n+use Yajra\\DataTables\\Facades\\DataTables;\n+\n+class VoyagerWallController extends Controller\n+{\n+    use BreadRelationshipParser;\n+\n+    //***************************************\n+    //               ____\n+    //              |  _ \\\n+    //              | |_) |\n+    //              |  _ <\n+    //              | |_) |\n+    //              |____/\n+    //\n+    //      Browse our Data Type (B)READ\n+    //\n+    //****************************************\n+\n+    public function index(Request $request)\n+    {\n+        // GET THE SLUG, ex. 'posts', 'pages', etc.\n+        $slug = $this->getSlug($request);\n+\n+        // GET THE DataType based on the slug\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        // Check permission\n+        $this->authorize('browse', app($dataType->model_name));\n+\n+        $getter = $dataType->server_side ? 'paginate' : 'get';\n+\n+        $search = (object) ['value' => $request->get('s'), 'key' => $request->get('key'), 'filter' => $request->get('filter')];\n+\n+        $searchNames = [];\n+        if ($dataType->server_side) {\n+            $searchNames = $dataType->browseRows->mapWithKeys(function ($row) {\n+                return [$row['field'] => $row->getTranslatedAttribute('display_name')];\n+            });\n+        }\n+\n+        $orderBy = $request->get('order_by', $dataType->order_column);\n+        $sortOrder = $request->get('sort_order', $dataType->order_direction);\n+        $usesSoftDeletes = false;\n+        $showSoftDeleted = false;\n+\n+        // Next Get or Paginate the actual content from the MODEL that corresponds to the slug DataType\n+        if (strlen($dataType->model_name) != 0) {\n+            $model = app($dataType->model_name);\n+\n+            $query = $model::select($dataType->name.'.*');\n+\n+            if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope'.ucfirst($dataType->scope))) {\n+                $query->{$dataType->scope}();\n+            }\n+\n+            // Use withTrashed() if model uses SoftDeletes and if toggle is selected\n+            if ($model && in_array(SoftDeletes::class, class_uses_recursive($model)) && Auth::user()->can('delete', app($dataType->model_name))) {\n+                $usesSoftDeletes = true;\n+\n+                if ($request->get('showSoftDeleted')) {\n+                    $showSoftDeleted = true;\n+                    $query = $query->withTrashed();\n+                }\n+            }\n+\n+            // If a column has a relationship associated with it, we do not want to show that field\n+            $this->removeRelationshipField($dataType, 'browse');\n+\n+            if ($search->value != '' && $search->key && $search->filter) {\n+                $search_filter = ($search->filter == 'equals') ? '=' : 'LIKE';\n+                $search_value = ($search->filter == 'equals') ? $search->value : '%'.$search->value.'%';\n+\n+                $searchField = $dataType->name.'.'.$search->key;\n+                if ($row = $this->findSearchableRelationshipRow($dataType->rows->where('type', 'relationship'), $search->key)) {\n+                    $query->whereIn(\n+                        $searchField,\n+                        $row->details->model::where($row->details->label, $search_filter, $search_value)->pluck('id')->toArray()\n+                    );\n+                } else {\n+                    if ($dataType->browseRows->pluck('field')->contains($search->key)) {\n+                        $query->where($searchField, $search_filter, $search_value);\n+                    }\n+                }\n+            }\n+\n+            $row = $dataType->rows->where('field', $orderBy)->firstWhere('type', 'relationship');\n+            if ($orderBy && (in_array($orderBy, $dataType->fields()) || !empty($row))) {\n+                $querySortOrder = (!empty($sortOrder)) ? $sortOrder : 'desc';\n+                if (!empty($row)) {\n+                    $query->select([\n+                        $dataType->name.'.*',\n+                        'joined.'.$row->details->label.' as '.$orderBy,\n+                    ])->leftJoin(\n+                        $row->details->table.' as joined',\n+                        $dataType->name.'.'.$row->details->column,\n+                        'joined.'.$row->details->key\n+                    );\n+                }\n+\n+                $dataTypeContent = call_user_func([\n+                    $query->orderBy($orderBy, $querySortOrder),\n+                    $getter,\n+                ]);\n+            } elseif ($model->timestamps) {\n+                $dataTypeContent = call_user_func([$query->latest($model::CREATED_AT), $getter]);\n+            } else {\n+                $dataTypeContent = call_user_func([$query->orderBy($model->getKeyName(), 'DESC'), $getter]);\n+            }\n+\n+            // Replace relationships' keys for labels and create READ links if a slug is provided.\n+            $dataTypeContent = $this->resolveRelations($dataTypeContent, $dataType);\n+        } else {\n+            // If Model doesn't exist, get data from table name\n+            $dataTypeContent = call_user_func([DB::table($dataType->name), $getter]);\n+            $model = false;\n+        }\n+\n+        // Check if BREAD is Translatable\n+        $isModelTranslatable = is_bread_translatable($model);\n+\n+        // Eagerload Relations\n+        $this->eagerLoadRelations($dataTypeContent, $dataType, 'browse', $isModelTranslatable);\n+\n+        // Check if server side pagination is enabled\n+        $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n+\n+        // Check if a default search key is set\n+        $defaultSearchKey = $dataType->default_search_key ?? null;\n+\n+        // Actions\n+        $actions = [];\n+        if (!empty($dataTypeContent->first())) {\n+            foreach (Voyager::actions() as $action) {\n+                $action = new $action($dataType, $dataTypeContent->first());\n+\n+                if ($action->shouldActionDisplayOnDataType()) {\n+                    $actions[] = $action;\n+                }\n+            }\n+        }\n+\n+        // Define showCheckboxColumn\n+        $showCheckboxColumn = false;\n+        if (Auth::user()->can('delete', app($dataType->model_name))) {\n+            $showCheckboxColumn = true;\n+        } else {\n+            foreach ($actions as $action) {\n+                if (method_exists($action, 'massAction')) {\n+                    $showCheckboxColumn = true;\n+                }\n+            }\n+        }\n+\n+        // Define orderColumn\n+        $orderColumn = [];\n+        if ($orderBy) {\n+            $index = $dataType->browseRows->where('field', $orderBy)->keys()->first() + ($showCheckboxColumn ? 1 : 0);\n+            $orderColumn = [[$index, $sortOrder ?? 'desc']];\n+        }\n+\n+        // Define list of columns that can be sorted server side\n+        $sortableColumns = $this->getSortableColumns($dataType->browseRows);\n+\n+        $view = 'voyager::bread.browse';\n+\n+        if (view()->exists(\"voyager::$slug.browse\")) {\n+            $view = \"voyager::$slug.browse\";\n+        }\n+\n+        return Voyager::view($view, compact(\n+            'actions',\n+            'dataType',\n+            'dataTypeContent',\n+            'isModelTranslatable',\n+            'search',\n+            'orderBy',\n+            'orderColumn',\n+            'sortableColumns',\n+            'sortOrder',\n+            'searchNames',\n+            'isServerSide',\n+            'defaultSearchKey',\n+            'usesSoftDeletes',\n+            'showSoftDeleted',\n+            'showCheckboxColumn'\n+        ));\n+    }\n+\n+\n+    public function getPostsList(Request $request){\n+        $postData = Post::with('authorId', 'postMedia')->orderBy('id', 'DESC');\n+        \n+        return Datatables::of($postData)\n+            ->addColumn('user_name', function ($data) {\n+                return $data->authorId->name;\n+            })->addColumn('title', function ($data) {\n+                return $data->title;\n+            })->addColumn('post_type', function ($data) {\n+                return $data->post_type;\n+            })->addColumn('media_file', function ($data) {\n+                return $data->image;\n+            })->addColumn('status', function ($data) {\n+                return $data->status;\n+            })->addColumn('created_at', function ($data) {\n+                return $data->created_at;\n+            })->addColumn('action', function ($data) {\n+                $datanew = base64_encode(json_encode($data));\n+                $action = '';   \n+                $action .= '<a href=\"'.route('voyager.user.media', ['type' => 'wall', 'id' => $data->id]).'\" title=\"Wall List\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-images\"></i></a>'; \n+\n+                $action .= '<a href=\"'.route('voyager.user.media', ['type' => 'reel', 'id' => $data->id]).'\" title=\"Reel List\" class=\"btn btn-sm btn-success pull-right edit\"><i class=\"voyager-video\"></i></a>';  \n+\n+                $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n+\n+                $action .= '<a href=\"\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n+\n+                $action .= '<a href=\"\" title=\"Edit\" class=\"btn btn-sm btn-warning pull-right edit\"><i class=\"voyager-edit\"></i></a>'; \n+\n+                $action .= '<a href=\"javascript:;\" title=\"Active\" class=\"btn btn-sm btn-success pull-right active\" data-type=\"A\"><i class=\"voyager-check\"></i></a>';   \n+\n+                return $action ;\n+               \n+            })\n+            ->blacklist(['action'])\n+            ->make(true);\n+    }\n+    //***************************************\n+    //                _____\n+    //               |  __ \\\n+    //               | |__) |\n+    //               |  _  /\n+    //               | | \\ \\\n+    //               |_|  \\_\\\n+    //\n+    //  Read an item of our Data Type B(R)EAD\n+    //\n+    //****************************************\n+\n+    public function show(Request $request, $id)\n+    {\n+        $slug = $this->getSlug($request);\n+\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        $isSoftDeleted = false;\n+\n+        if (strlen($dataType->model_name) != 0) {\n+            \n+            $dataTypeContent = Post::with('authorId', 'postMedia')->where('id', $id)->first();\n+        } else {\n+            \n+            // If Model doest exist, get data from table name\n+            $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();\n+        }\n+\n+        // Replace relationships' keys for labels and create READ links if a slug is provided.\n+        $dataTypeContent = $this->resolveRelations($dataTypeContent, $dataType, true);\n+\n+        // If a column has a relationship associated with it, we do not want to show that field\n+        $this->removeRelationshipField($dataType, 'read');\n+\n+        // Check permission\n+        $this->authorize('read', $dataTypeContent);\n+\n+        // Check if BREAD is Translatable\n+        $isModelTranslatable = is_bread_translatable($dataTypeContent);\n+\n+        // Eagerload Relations\n+        $this->eagerLoadRelations($dataTypeContent, $dataType, 'read', $isModelTranslatable);\n+\n+        $view = 'voyager::bread.read';\n+\n+        if (view()->exists(\"voyager::$slug.read\")) {\n+            $view = \"voyager::$slug.read\";\n+        }\n+        //dd($dataTypeContent);\n+        return Voyager::view($view, compact('dataType', 'dataTypeContent', 'isModelTranslatable', 'isSoftDeleted'));\n+    }\n+\n+    //***************************************\n+    //                ______\n+    //               |  ____|\n+    //               | |__\n+    //               |  __|\n+    //               | |____\n+    //               |______|\n+    //\n+    //  Edit an item of our Data Type BR(E)AD\n+    //\n+    //****************************************\n+\n+    public function edit(Request $request, $id)\n+    {\n+        $slug = $this->getSlug($request);\n+\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        if (strlen($dataType->model_name) != 0) {\n+            $model = app($dataType->model_name);\n+            $query = $model->query();\n+\n+            // Use withTrashed() if model uses SoftDeletes and if toggle is selected\n+            if ($model && in_array(SoftDeletes::class, class_uses_recursive($model))) {\n+                $query = $query->withTrashed();\n+            }\n+            if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope'.ucfirst($dataType->scope))) {\n+                $query = $query->{$dataType->scope}();\n+            }\n+            $dataTypeContent = call_user_func([$query, 'findOrFail'], $id);\n+        } else {\n+            // If Model doest exist, get data from table name\n+            $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();\n+        }\n+\n+        foreach ($dataType->editRows as $key => $row) {\n+            $dataType->editRows[$key]['col_width'] = isset($row->details->width) ? $row->details->width : 100;\n+        }\n+\n+        // If a column has a relationship associated with it, we do not want to show that field\n+        $this->removeRelationshipField($dataType, 'edit');\n+\n+        // Check permission\n+        $this->authorize('edit', $dataTypeContent);\n+\n+        // Check if BREAD is Translatable\n+        $isModelTranslatable = is_bread_translatable($dataTypeContent);\n+\n+        // Eagerload Relations\n+        $this->eagerLoadRelations($dataTypeContent, $dataType, 'edit', $isModelTranslatable);\n+\n+        $view = 'voyager::bread.edit-add';\n+\n+        if (view()->exists(\"voyager::$slug.edit-add\")) {\n+            $view = \"voyager::$slug.edit-add\";\n+        }\n+\n+        return Voyager::view($view, compact('dataType', 'dataTypeContent', 'isModelTranslatable'));\n+    }\n+\n+    // POST BR(E)AD\n+    public function update(Request $request, $id)\n+    {\n+        $slug = $this->getSlug($request);\n+\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        // Compatibility with Model binding.\n+        $id = $id instanceof \\Illuminate\\Database\\Eloquent\\Model ? $id->{$id->getKeyName()} : $id;\n+\n+        $model = app($dataType->model_name);\n+        $query = $model->query();\n+        if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope'.ucfirst($dataType->scope))) {\n+            $query = $query->{$dataType->scope}();\n+        }\n+        if ($model && in_array(SoftDeletes::class, class_uses_recursive($model))) {\n+            $query = $query->withTrashed();\n+        }\n+\n+        $data = $query->findOrFail($id);\n+\n+        // Check permission\n+        $this->authorize('edit', $data);\n+\n+        // Validate fields with ajax\n+        $val = $this->validateBread($request->all(), $dataType->editRows, $dataType->name, $id)->validate();\n+\n+        // Get fields with images to remove before updating and make a copy of $data\n+        $to_remove = $dataType->editRows->where('type', 'image')\n+            ->filter(function ($item, $key) use ($request) {\n+                return $request->hasFile($item->field);\n+            });\n+        $original_data = clone($data);\n+\n+        $this->insertUpdateData($request, $slug, $dataType->editRows, $data);\n+\n+        // Delete Images\n+        $this->deleteBreadImages($original_data, $to_remove);\n+\n+        event(new BreadDataUpdated($dataType, $data));\n+\n+        if (auth()->user()->can('browse', app($dataType->model_name))) {\n+            $redirect = redirect()->route(\"voyager.{$dataType->slug}.index\");\n+        } else {\n+            $redirect = redirect()->back();\n+        }\n+\n+        return $redirect->with([\n+            'message'    => __('voyager::generic.successfully_updated').\" {$dataType->getTranslatedAttribute('display_name_singular')}\",\n+            'alert-type' => 'success',\n+        ]);\n+    }\n+\n+    //***************************************\n+    //\n+    //                   /\\\n+    //                  /  \\\n+    //                 / /\\ \\\n+    //                / ____ \\\n+    //               /_/    \\_\\\n+    //\n+    //\n+    // Add a new item of our Data Type BRE(A)D\n+    //\n+    //****************************************\n+\n+    public function create(Request $request)\n+    {\n+        $slug = $this->getSlug($request);\n+\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        // Check permission\n+        $this->authorize('add', app($dataType->model_name));\n+\n+        $dataTypeContent = (strlen($dataType->model_name) != 0)\n+                            ? new $dataType->model_name()\n+                            : false;\n+\n+        foreach ($dataType->addRows as $key => $row) {\n+            $dataType->addRows[$key]['col_width'] = $row->details->width ?? 100;\n+        }\n+\n+        // If a column has a relationship associated with it, we do not want to show that field\n+        $this->removeRelationshipField($dataType, 'add');\n+\n+        // Check if BREAD is Translatable\n+        $isModelTranslatable = is_bread_translatable($dataTypeContent);\n+\n+        // Eagerload Relations\n+        $this->eagerLoadRelations($dataTypeContent, $dataType, 'add', $isModelTranslatable);\n+\n+        $view = 'voyager::bread.edit-add';\n+\n+        if (view()->exists(\"voyager::$slug.edit-add\")) {\n+            $view = \"voyager::$slug.edit-add\";\n+        }\n+\n+        return Voyager::view($view, compact('dataType', 'dataTypeContent', 'isModelTranslatable'));\n+    }\n+\n+    /**\n+     * POST BRE(A)D - Store data.\n+     *\n+     * @param \\Illuminate\\Http\\Request $request\n+     *\n+     * @return \\Illuminate\\Http\\RedirectResponse\n+     */\n+    public function store(Request $request)\n+    {\n+        $slug = 'posts';\n+        \n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        // Check permission\n+        $this->authorize('add', app($dataType->model_name));\n+        $postData = $request->all();\n+\n+         // Validate fields with ajax\n+         $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n+         //$data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n+\n+        \n+        $postsData = new \\TCG\\Voyager\\Models\\Post();\n+        $postsData->title = $postData['title'];\n+        $postsData->body = $postData['body'];\n+        $postsData->slug = $postData['slug'];\n+        $postsData->post_type = $postData['post_type'];\n+        $postsData->status = $postData['status'];\n+        $postsData->save();\n+        \n+        if($postData['post_type'] == 'REEL'){\n+            \n+            if ($request->hasFile('image')) {\n+                $allowedfileExtension=['mp4'];\n+                $image = $request->file('image');\n+                foreach ($postData['image'] as $files) {\n+                    $check=in_array($files->getClientOriginalExtension(),$allowedfileExtension);\n+                    if($check){\n+\n+                        $destinationPath = 'storage/app/public/posts/';\n+                        $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n+                        $files->move($destinationPath, $file_name);\n+                        $postReel = $file_name;\n+\n+                        $imageData = new PostsMedia();\n+                        $imageData->voxo_media_id = $postsData->id;\n+                        $imageData->media_files = $postReel;\n+                        $imageData->media_type =$postData['post_type'];\n+                        $imageData->mime_type = $files->getClientOriginalExtension();\n+                        $imageData->save();\n+                    }else{\n+                        $redirect = redirect()->back();\n+                        return $redirect->with([\n+                            'message'    => 'Warning! Sorry Only Upload mp4',\n+                            'alert-type' => 'error',\n+                        ]);\n+                    }\n+                }\n+                Post::where('id', $postsData->id)->update(['image' => 'video_play.png']);\n+            }\n+        }else{\n+            if ($request->hasFile('image')) {\n+                $allowedfileExtension=['jpg','png','jpeg'];\n+                $image = $request->file('image');\n+                foreach ($postData['image'] as $files) {\n+                    $check=in_array($files->getClientOriginalExtension(),$allowedfileExtension);\n+                    if($check){\n+                        $destinationPath = 'storage/app/public/posts/';\n+                        $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n+                        $files->move($destinationPath, $file_name);\n+                        $postImage = $file_name;\n+                        $imageData = new PostsMedia();\n+                        $imageData->voxo_media_id = $postsData->id;\n+                        $imageData->media_files = $postImage;\n+                        $imageData->media_type = $postData['post_type'];\n+                        $imageData->mime_type = $files->getClientOriginalExtension();\n+                        $imageData->save();\n+                    }else{\n+                        $redirect = redirect()->back();\n+                        return $redirect->with([\n+                            'message'    => 'Warning! Sorry Only Upload jpg, png, jpeg',\n+                            'alert-type' => 'error',\n+                        ]);\n+                    }\n+                }   \n+                Post::where('id', $postsData->id)->update(['image' => $postImage]);\n+            }\n+        }\n+       \n+\n+        event(new BreadDataAdded($dataType, $postsData));\n+\n+        if (!$request->has('_tagging')) {\n+            if (auth()->user()->can('browse', $postsData)) {\n+                $redirect = redirect()->route(\"voyager.{$dataType->slug}.index\");\n+            } else {\n+                $redirect = redirect()->back();\n+            }\n+\n+            return $redirect->with([\n+                'message'    => __('voyager::generic.successfully_added_new').\" {$dataType->getTranslatedAttribute('display_name_singular')}\",\n+                'alert-type' => 'success',\n+            ]);\n+        } else {\n+            return response()->json(['success' => true, 'data' => $postsData]);\n+        }\n+    }\n+\n+    //***************************************\n+    //                _____\n+    //               |  __ \\\n+    //               | |  | |\n+    //               | |  | |\n+    //               | |__| |\n+    //               |_____/\n+    //\n+    //         Delete an item BREA(D)\n+    //\n+    //****************************************\n+\n+    public function destroy(Request $request, $id)\n+    {\n+        $slug = $this->getSlug($request);\n+\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        // Init array of IDs\n+        $ids = [];\n+        if (empty($id)) {\n+            // Bulk delete, get IDs from POST\n+            $ids = explode(',', $request->ids);\n+        } else {\n+            // Single item delete, get ID from URL\n+            $ids[] = $id;\n+        }\n+        foreach ($ids as $id) {\n+            $data = call_user_func([$dataType->model_name, 'findOrFail'], $id);\n+\n+            // Check permission\n+            $this->authorize('delete', $data);\n+\n+            $model = app($dataType->model_name);\n+            if (!($model && in_array(SoftDeletes::class, class_uses_recursive($model)))) {\n+                $this->cleanup($dataType, $data);\n+            }\n+        }\n+\n+        $displayName = count($ids) > 1 ? $dataType->getTranslatedAttribute('display_name_plural') : $dataType->getTranslatedAttribute('display_name_singular');\n+\n+        $res = $data->destroy($ids);\n+        $data = $res\n+            ? [\n+                'message'    => __('voyager::generic.successfully_deleted').\" {$displayName}\",\n+                'alert-type' => 'success',\n+            ]\n+            : [\n+                'message'    => __('voyager::generic.error_deleting').\" {$displayName}\",\n+                'alert-type' => 'error',\n+            ];\n+\n+        if ($res) {\n+            event(new BreadDataDeleted($dataType, $data));\n+        }\n+\n+        return redirect()->route(\"voyager.{$dataType->slug}.index\")->with($data);\n+    }\n+/**\n+     * Remove translations, images and files related to a BREAD item.\n+     *\n+     * @param \\Illuminate\\Database\\Eloquent\\Model $dataType\n+     * @param \\Illuminate\\Database\\Eloquent\\Model $data\n+     *\n+     * @return void\n+     */\n+    protected function cleanup($dataType, $data)\n+    {\n+        // Delete Translations, if present\n+        if (is_bread_translatable($data)) {\n+            $data->deleteAttributeTranslations($data->getTranslatableAttributes());\n+        }\n+\n+        // Delete Images\n+        $this->deleteBreadImages($data, $dataType->deleteRows->whereIn('type', ['image', 'multiple_images']));\n+\n+        // Delete Files\n+        foreach ($dataType->deleteRows->where('type', 'file') as $row) {\n+            if (isset($data->{$row->field})) {\n+                foreach (json_decode($data->{$row->field}) as $file) {\n+                    $this->deleteFileIfExists($file->download_link);\n+                }\n+            }\n+        }\n+\n+        // Delete media-picker files\n+        $dataType->rows->where('type', 'media_picker')->where('details.delete_files', true)->each(function ($row) use ($data) {\n+            $content = $data->{$row->field};\n+            if (isset($content)) {\n+                if (!is_array($content)) {\n+                    $content = json_decode($content);\n+                }\n+                if (is_array($content)) {\n+                    foreach ($content as $file) {\n+                        $this->deleteFileIfExists($file);\n+                    }\n+                } else {\n+                    $this->deleteFileIfExists($content);\n+                }\n+            }\n+        });\n+    }\n+    /**\n+     * Delete all images related to a BREAD item.\n+     *\n+     * @param \\Illuminate\\Database\\Eloquent\\Model $data\n+     * @param \\Illuminate\\Database\\Eloquent\\Model $rows\n+     *\n+     * @return void\n+     */\n+    public function deleteBreadImages($data, $rows, $single_image = null)\n+    {\n+        $imagesDeleted = false;\n+\n+        foreach ($rows as $row) {\n+            if ($row->type == 'multiple_images') {\n+                $images_to_remove = json_decode($data->getOriginal($row->field), true) ?? [];\n+            } else {\n+                $images_to_remove = [$data->getOriginal($row->field)];\n+            }\n+\n+            foreach ($images_to_remove as $image) {\n+                // Remove only $single_image if we are removing from bread edit\n+                if ($image != config('voyager.user.default_avatar') && (is_null($single_image) || $single_image == $image)) {\n+                    $this->deleteFileIfExists($image);\n+                    $imagesDeleted = true;\n+\n+                    if (isset($row->details->thumbnails)) {\n+                        foreach ($row->details->thumbnails as $thumbnail) {\n+                            $ext = explode('.', $image);\n+                            $extension = '.'.$ext[count($ext) - 1];\n+\n+                            $path = str_replace($extension, '', $image);\n+\n+                            $thumb_name = $thumbnail->name;\n+\n+                            $this->deleteFileIfExists($path.'-'.$thumb_name.$extension);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        if ($imagesDeleted) {\n+            event(new BreadImagesDeleted($data, $rows));\n+        }\n+    }\n+\n+    protected function getSortableColumns($rows)\n+    {\n+        return $rows->filter(function ($item) {\n+            if ($item->type != 'relationship') {\n+                return true;\n+            }\n+            if ($item->details->type != 'belongsTo') {\n+                return false;\n+            }\n+\n+            return !$this->relationIsUsingAccessorAsLabel($item->details);\n+        })\n+        ->pluck('field')\n+        ->toArray();\n+    }\n+\n+        /**\n+     * Get BREAD relations data.\n+     *\n+     * @param Request $request\n+     *\n+     * @return mixed\n+     */\n+    public function relation(Request $request)\n+    {\n+        $slug = $this->getSlug($request);\n+        $page = $request->input('page');\n+        $on_page = 50;\n+        $search = $request->input('search', false);\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+\n+        $method = $request->input('method', 'add');\n+\n+        $model = app($dataType->model_name);\n+        if ($method != 'add') {\n+            $model = $model->find($request->input('id'));\n+        }\n+\n+        $this->authorize($method, $model);\n+\n+        $rows = $dataType->{$method.'Rows'};\n+        foreach ($rows as $key => $row) {\n+            if ($row->field === $request->input('type')) {\n+                $options = $row->details;\n+                $model = app($options->model);\n+                $skip = $on_page * ($page - 1);\n+\n+                $additional_attributes = $model->additional_attributes ?? [];\n+\n+                // Apply local scope if it is defined in the relationship-options\n+                if (isset($options->scope) && $options->scope != '' && method_exists($model, 'scope'.ucfirst($options->scope))) {\n+                    $model = $model->{$options->scope}();\n+                }\n+\n+                // If search query, use LIKE to filter results depending on field label\n+                if ($search) {\n+                    // If we are using additional_attribute as label\n+                    if (in_array($options->label, $additional_attributes)) {\n+                        $relationshipOptions = $model->all();\n+                        $relationshipOptions = $relationshipOptions->filter(function ($model) use ($search, $options) {\n+                            return stripos($model->{$options->label}, $search) !== false;\n+                        });\n+                        $total_count = $relationshipOptions->count();\n+                        $relationshipOptions = $relationshipOptions->forPage($page, $on_page);\n+                    } else {\n+                        $total_count = $model->where($options->label, 'LIKE', '%'.$search.'%')->count();\n+                        $relationshipOptions = $model->take($on_page)->skip($skip)\n+                            ->where($options->label, 'LIKE', '%'.$search.'%')\n+                            ->get();\n+                    }\n+                } else {\n+                    $total_count = $model->count();\n+                    $relationshipOptions = $model->take($on_page)->skip($skip)->get();\n+                }\n+\n+                $results = [];\n+\n+                if (!$row->required && !$search && $page == 1) {\n+                    $results[] = [\n+                        'id'   => '',\n+                        'text' => __('voyager::generic.none'),\n+                    ];\n+                }\n+\n+                // Sort results\n+                if (!empty($options->sort->field)) {\n+                    if (!empty($options->sort->direction) && strtolower($options->sort->direction) == 'desc') {\n+                        $relationshipOptions = $relationshipOptions->sortByDesc($options->sort->field);\n+                    } else {\n+                        $relationshipOptions = $relationshipOptions->sortBy($options->sort->field);\n+                    }\n+                }\n+\n+                foreach ($relationshipOptions as $relationshipOption) {\n+                    $results[] = [\n+                        'id'   => $relationshipOption->{$options->key},\n+                        'text' => $relationshipOption->{$options->label},\n+                    ];\n+                }\n+\n+                return response()->json([\n+                    'results'    => $results,\n+                    'pagination' => [\n+                        'more' => ($total_count > ($skip + $on_page)),\n+                    ],\n+                ]);\n+            }\n+        }\n+\n+        // No result found, return empty array\n+        return response()->json([], 404);\n+    }\n+\n+    protected function findSearchableRelationshipRow($relationshipRows, $searchKey)\n+    {\n+        return $relationshipRows->filter(function ($item) use ($searchKey) {\n+            if ($item->details->column != $searchKey) {\n+                return false;\n+            }\n+            if ($item->details->type != 'belongsTo') {\n+                return false;\n+            }\n+\n+            return !$this->relationIsUsingAccessorAsLabel($item->details);\n+        })->first();\n+    }\n+\n+    protected function relationIsUsingAccessorAsLabel($details)\n+    {\n+        return in_array($details->label, app($details->model)->additional_attributes ?? []);\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629395668860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n         $postData = Post::with('authorId', 'postMedia')->orderBy('id', 'DESC');\n         \n         return Datatables::of($postData)\n             ->addColumn('user_name', function ($data) {\n-                return $data->authorId->name;\n+                return 'sadasd';\n             })->addColumn('title', function ($data) {\n                 return $data->title;\n             })->addColumn('post_type', function ($data) {\n                 return $data->post_type;\n@@ -844,853 +844,5 @@\n     protected function relationIsUsingAccessorAsLabel($details)\n     {\n         return in_array($details->label, app($details->model)->additional_attributes ?? []);\n     }\n-}\n-<?php\n-\n-namespace TCG\\Voyager\\Http\\Controllers;\n-\n-use Exception;\n-use Illuminate\\Database\\Eloquent\\SoftDeletes;\n-use Illuminate\\Http\\Request;\n-use Illuminate\\Support\\Facades\\Auth;\n-use Illuminate\\Support\\Facades\\DB;\n-use TCG\\Voyager\\Database\\Schema\\SchemaManager;\n-use TCG\\Voyager\\Events\\BreadDataAdded;\n-use TCG\\Voyager\\Events\\BreadDataDeleted;\n-use TCG\\Voyager\\Events\\BreadDataRestored;\n-use TCG\\Voyager\\Events\\BreadDataUpdated;\n-use TCG\\Voyager\\Events\\BreadImagesDeleted;\n-use TCG\\Voyager\\Facades\\Voyager;\n-use TCG\\Voyager\\Http\\Controllers\\Traits\\BreadRelationshipParser;\n-use App\\Models\\Wall;\n-use App\\Models\\PostsMedia;\n-use TCG\\Voyager\\Models\\Post;\n-use Yajra\\DataTables\\Facades\\DataTables;\n-\n-class VoyagerWallController extends Controller\n-{\n-    use BreadRelationshipParser;\n-\n-    //***************************************\n-    //               ____\n-    //              |  _ \\\n-    //              | |_) |\n-    //              |  _ <\n-    //              | |_) |\n-    //              |____/\n-    //\n-    //      Browse our Data Type (B)READ\n-    //\n-    //****************************************\n-\n-    public function index(Request $request)\n-    {\n-        // GET THE SLUG, ex. 'posts', 'pages', etc.\n-        $slug = $this->getSlug($request);\n-\n-        // GET THE DataType based on the slug\n-        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n-\n-        // Check permission\n-        $this->authorize('browse', app($dataType->model_name));\n-\n-        $getter = $dataType->server_side ? 'paginate' : 'get';\n-\n-        $search = (object) ['value' => $request->get('s'), 'key' => $request->get('key'), 'filter' => $request->get('filter')];\n-\n-        $searchNames = [];\n-        if ($dataType->server_side) {\n-            $searchNames = $dataType->browseRows->mapWithKeys(function ($row) {\n-                return [$row['field'] => $row->getTranslatedAttribute('display_name')];\n-            });\n-        }\n-\n-        $orderBy = $request->get('order_by', $dataType->order_column);\n-        $sortOrder = $request->get('sort_order', $dataType->order_direction);\n-        $usesSoftDeletes = false;\n-        $showSoftDeleted = false;\n-\n-        // Next Get or Paginate the actual content from the MODEL that corresponds to the slug DataType\n-        if (strlen($dataType->model_name) != 0) {\n-            $model = app($dataType->model_name);\n-\n-            $query = $model::select($dataType->name.'.*');\n-\n-            if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope'.ucfirst($dataType->scope))) {\n-                $query->{$dataType->scope}();\n-            }\n-\n-            // Use withTrashed() if model uses SoftDeletes and if toggle is selected\n-            if ($model && in_array(SoftDeletes::class, class_uses_recursive($model)) && Auth::user()->can('delete', app($dataType->model_name))) {\n-                $usesSoftDeletes = true;\n-\n-                if ($request->get('showSoftDeleted')) {\n-                    $showSoftDeleted = true;\n-                    $query = $query->withTrashed();\n-                }\n-            }\n-\n-            // If a column has a relationship associated with it, we do not want to show that field\n-            $this->removeRelationshipField($dataType, 'browse');\n-\n-            if ($search->value != '' && $search->key && $search->filter) {\n-                $search_filter = ($search->filter == 'equals') ? '=' : 'LIKE';\n-                $search_value = ($search->filter == 'equals') ? $search->value : '%'.$search->value.'%';\n-\n-                $searchField = $dataType->name.'.'.$search->key;\n-                if ($row = $this->findSearchableRelationshipRow($dataType->rows->where('type', 'relationship'), $search->key)) {\n-                    $query->whereIn(\n-                        $searchField,\n-                        $row->details->model::where($row->details->label, $search_filter, $search_value)->pluck('id')->toArray()\n-                    );\n-                } else {\n-                    if ($dataType->browseRows->pluck('field')->contains($search->key)) {\n-                        $query->where($searchField, $search_filter, $search_value);\n-                    }\n-                }\n-            }\n-\n-            $row = $dataType->rows->where('field', $orderBy)->firstWhere('type', 'relationship');\n-            if ($orderBy && (in_array($orderBy, $dataType->fields()) || !empty($row))) {\n-                $querySortOrder = (!empty($sortOrder)) ? $sortOrder : 'desc';\n-                if (!empty($row)) {\n-                    $query->select([\n-                        $dataType->name.'.*',\n-                        'joined.'.$row->details->label.' as '.$orderBy,\n-                    ])->leftJoin(\n-                        $row->details->table.' as joined',\n-                        $dataType->name.'.'.$row->details->column,\n-                        'joined.'.$row->details->key\n-                    );\n-                }\n-\n-                $dataTypeContent = call_user_func([\n-                    $query->orderBy($orderBy, $querySortOrder),\n-                    $getter,\n-                ]);\n-            } elseif ($model->timestamps) {\n-                $dataTypeContent = call_user_func([$query->latest($model::CREATED_AT), $getter]);\n-            } else {\n-                $dataTypeContent = call_user_func([$query->orderBy($model->getKeyName(), 'DESC'), $getter]);\n-            }\n-\n-            // Replace relationships' keys for labels and create READ links if a slug is provided.\n-            $dataTypeContent = $this->resolveRelations($dataTypeContent, $dataType);\n-        } else {\n-            // If Model doesn't exist, get data from table name\n-            $dataTypeContent = call_user_func([DB::table($dataType->name), $getter]);\n-            $model = false;\n-        }\n-\n-        // Check if BREAD is Translatable\n-        $isModelTranslatable = is_bread_translatable($model);\n-\n-        // Eagerload Relations\n-        $this->eagerLoadRelations($dataTypeContent, $dataType, 'browse', $isModelTranslatable);\n-\n-        // Check if server side pagination is enabled\n-        $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n-\n-        // Check if a default search key is set\n-        $defaultSearchKey = $dataType->default_search_key ?? null;\n-\n-        // Actions\n-        $actions = [];\n-        if (!empty($dataTypeContent->first())) {\n-            foreach (Voyager::actions() as $action) {\n-                $action = new $action($dataType, $dataTypeContent->first());\n-\n-                if ($action->shouldActionDisplayOnDataType()) {\n-                    $actions[] = $action;\n-                }\n-            }\n-        }\n-\n-        // Define showCheckboxColumn\n-        $showCheckboxColumn = false;\n-        if (Auth::user()->can('delete', app($dataType->model_name))) {\n-            $showCheckboxColumn = true;\n-        } else {\n-            foreach ($actions as $action) {\n-                if (method_exists($action, 'massAction')) {\n-                    $showCheckboxColumn = true;\n-                }\n-            }\n-        }\n-\n-        // Define orderColumn\n-        $orderColumn = [];\n-        if ($orderBy) {\n-            $index = $dataType->browseRows->where('field', $orderBy)->keys()->first() + ($showCheckboxColumn ? 1 : 0);\n-            $orderColumn = [[$index, $sortOrder ?? 'desc']];\n-        }\n-\n-        // Define list of columns that can be sorted server side\n-        $sortableColumns = $this->getSortableColumns($dataType->browseRows);\n-\n-        $view = 'voyager::bread.browse';\n-\n-        if (view()->exists(\"voyager::$slug.browse\")) {\n-            $view = \"voyager::$slug.browse\";\n-        }\n-\n-        return Voyager::view($view, compact(\n-            'actions',\n-            'dataType',\n-            'dataTypeContent',\n-            'isModelTranslatable',\n-            'search',\n-            'orderBy',\n-            'orderColumn',\n-            'sortableColumns',\n-            'sortOrder',\n-            'searchNames',\n-            'isServerSide',\n-            'defaultSearchKey',\n-            'usesSoftDeletes',\n-            'showSoftDeleted',\n-            'showCheckboxColumn'\n-        ));\n-    }\n-\n-\n-    public function getPostsList(Request $request){\n-        $postData = Post::with('authorId', 'postMedia')->orderBy('id', 'DESC')->get();\n-        \n-        return Datatables::of($postData)\n-            ->addColumn('user_name', function ($data) {\n-                return $data->authorId->name;\n-            })->addColumn('title', function ($data) {\n-                return $data->title;\n-            })->addColumn('post_type', function ($data) {\n-                return $data->post_type;\n-            })->addColumn('media_file', function ($data) {\n-                return $data->image;\n-            })->addColumn('status', function ($data) {\n-                return $data->status;\n-            })->addColumn('created_at', function ($data) {\n-                return $data->created_at;\n-            })->addColumn('action', function ($data) {\n-                $datanew = base64_encode(json_encode($data));\n-                $action = '';   \n-                $action .= '<a href=\"'.route('voyager.user.media', ['type' => 'wall', 'id' => $data->id]).'\" title=\"Wall List\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-images\"></i></a>'; \n-\n-                $action .= '<a href=\"'.route('voyager.user.media', ['type' => 'reel', 'id' => $data->id]).'\" title=\"Reel List\" class=\"btn btn-sm btn-success pull-right edit\"><i class=\"voyager-video\"></i></a>';  \n-\n-                $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n-\n-                $action .= '<a href=\"\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n-\n-                $action .= '<a href=\"\" title=\"Edit\" class=\"btn btn-sm btn-warning pull-right edit\"><i class=\"voyager-edit\"></i></a>'; \n-\n-                $action .= '<a href=\"javascript:;\" title=\"Active\" class=\"btn btn-sm btn-success pull-right active\" data-type=\"A\"><i class=\"voyager-check\"></i></a>';   \n-\n-                return $action ;\n-               \n-            })\n-            ->blacklist(['action'])\n-            ->make(true);\n-    }\n-    //***************************************\n-    //                _____\n-    //               |  __ \\\n-    //               | |__) |\n-    //               |  _  /\n-    //               | | \\ \\\n-    //               |_|  \\_\\\n-    //\n-    //  Read an item of our Data Type B(R)EAD\n-    //\n-    //****************************************\n-\n-    public function show(Request $request, $id)\n-    {\n-        $slug = $this->getSlug($request);\n-\n-        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n-\n-        $isSoftDeleted = false;\n-\n-        if (strlen($dataType->model_name) != 0) {\n-            \n-            $dataTypeContent = Post::with('authorId', 'postMedia')->where('id', $id)->first();\n-        } else {\n-            \n-            // If Model doest exist, get data from table name\n-            $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();\n-        }\n-\n-        // Replace relationships' keys for labels and create READ links if a slug is provided.\n-        $dataTypeContent = $this->resolveRelations($dataTypeContent, $dataType, true);\n-\n-        // If a column has a relationship associated with it, we do not want to show that field\n-        $this->removeRelationshipField($dataType, 'read');\n-\n-        // Check permission\n-        $this->authorize('read', $dataTypeContent);\n-\n-        // Check if BREAD is Translatable\n-        $isModelTranslatable = is_bread_translatable($dataTypeContent);\n-\n-        // Eagerload Relations\n-        $this->eagerLoadRelations($dataTypeContent, $dataType, 'read', $isModelTranslatable);\n-\n-        $view = 'voyager::bread.read';\n-\n-        if (view()->exists(\"voyager::$slug.read\")) {\n-            $view = \"voyager::$slug.read\";\n-        }\n-        //dd($dataTypeContent);\n-        return Voyager::view($view, compact('dataType', 'dataTypeContent', 'isModelTranslatable', 'isSoftDeleted'));\n-    }\n-\n-    //***************************************\n-    //                ______\n-    //               |  ____|\n-    //               | |__\n-    //               |  __|\n-    //               | |____\n-    //               |______|\n-    //\n-    //  Edit an item of our Data Type BR(E)AD\n-    //\n-    //****************************************\n-\n-    public function edit(Request $request, $id)\n-    {\n-        $slug = $this->getSlug($request);\n-\n-        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n-\n-        if (strlen($dataType->model_name) != 0) {\n-            $model = app($dataType->model_name);\n-            $query = $model->query();\n-\n-            // Use withTrashed() if model uses SoftDeletes and if toggle is selected\n-            if ($model && in_array(SoftDeletes::class, class_uses_recursive($model))) {\n-                $query = $query->withTrashed();\n-            }\n-            if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope'.ucfirst($dataType->scope))) {\n-                $query = $query->{$dataType->scope}();\n-            }\n-            $dataTypeContent = call_user_func([$query, 'findOrFail'], $id);\n-        } else {\n-            // If Model doest exist, get data from table name\n-            $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();\n-        }\n-\n-        foreach ($dataType->editRows as $key => $row) {\n-            $dataType->editRows[$key]['col_width'] = isset($row->details->width) ? $row->details->width : 100;\n-        }\n-\n-        // If a column has a relationship associated with it, we do not want to show that field\n-        $this->removeRelationshipField($dataType, 'edit');\n-\n-        // Check permission\n-        $this->authorize('edit', $dataTypeContent);\n-\n-        // Check if BREAD is Translatable\n-        $isModelTranslatable = is_bread_translatable($dataTypeContent);\n-\n-        // Eagerload Relations\n-        $this->eagerLoadRelations($dataTypeContent, $dataType, 'edit', $isModelTranslatable);\n-\n-        $view = 'voyager::bread.edit-add';\n-\n-        if (view()->exists(\"voyager::$slug.edit-add\")) {\n-            $view = \"voyager::$slug.edit-add\";\n-        }\n-\n-        return Voyager::view($view, compact('dataType', 'dataTypeContent', 'isModelTranslatable'));\n-    }\n-\n-    // POST BR(E)AD\n-    public function update(Request $request, $id)\n-    {\n-        $slug = $this->getSlug($request);\n-\n-        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n-\n-        // Compatibility with Model binding.\n-        $id = $id instanceof \\Illuminate\\Database\\Eloquent\\Model ? $id->{$id->getKeyName()} : $id;\n-\n-        $model = app($dataType->model_name);\n-        $query = $model->query();\n-        if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope'.ucfirst($dataType->scope))) {\n-            $query = $query->{$dataType->scope}();\n-        }\n-        if ($model && in_array(SoftDeletes::class, class_uses_recursive($model))) {\n-            $query = $query->withTrashed();\n-        }\n-\n-        $data = $query->findOrFail($id);\n-\n-        // Check permission\n-        $this->authorize('edit', $data);\n-\n-        // Validate fields with ajax\n-        $val = $this->validateBread($request->all(), $dataType->editRows, $dataType->name, $id)->validate();\n-\n-        // Get fields with images to remove before updating and make a copy of $data\n-        $to_remove = $dataType->editRows->where('type', 'image')\n-            ->filter(function ($item, $key) use ($request) {\n-                return $request->hasFile($item->field);\n-            });\n-        $original_data = clone($data);\n-\n-        $this->insertUpdateData($request, $slug, $dataType->editRows, $data);\n-\n-        // Delete Images\n-        $this->deleteBreadImages($original_data, $to_remove);\n-\n-        event(new BreadDataUpdated($dataType, $data));\n-\n-        if (auth()->user()->can('browse', app($dataType->model_name))) {\n-            $redirect = redirect()->route(\"voyager.{$dataType->slug}.index\");\n-        } else {\n-            $redirect = redirect()->back();\n-        }\n-\n-        return $redirect->with([\n-            'message'    => __('voyager::generic.successfully_updated').\" {$dataType->getTranslatedAttribute('display_name_singular')}\",\n-            'alert-type' => 'success',\n-        ]);\n-    }\n-\n-    //***************************************\n-    //\n-    //                   /\\\n-    //                  /  \\\n-    //                 / /\\ \\\n-    //                / ____ \\\n-    //               /_/    \\_\\\n-    //\n-    //\n-    // Add a new item of our Data Type BRE(A)D\n-    //\n-    //****************************************\n-\n-    public function create(Request $request)\n-    {\n-        $slug = $this->getSlug($request);\n-\n-        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n-\n-        // Check permission\n-        $this->authorize('add', app($dataType->model_name));\n-\n-        $dataTypeContent = (strlen($dataType->model_name) != 0)\n-                            ? new $dataType->model_name()\n-                            : false;\n-\n-        foreach ($dataType->addRows as $key => $row) {\n-            $dataType->addRows[$key]['col_width'] = $row->details->width ?? 100;\n-        }\n-\n-        // If a column has a relationship associated with it, we do not want to show that field\n-        $this->removeRelationshipField($dataType, 'add');\n-\n-        // Check if BREAD is Translatable\n-        $isModelTranslatable = is_bread_translatable($dataTypeContent);\n-\n-        // Eagerload Relations\n-        $this->eagerLoadRelations($dataTypeContent, $dataType, 'add', $isModelTranslatable);\n-\n-        $view = 'voyager::bread.edit-add';\n-\n-        if (view()->exists(\"voyager::$slug.edit-add\")) {\n-            $view = \"voyager::$slug.edit-add\";\n-        }\n-\n-        return Voyager::view($view, compact('dataType', 'dataTypeContent', 'isModelTranslatable'));\n-    }\n-\n-    /**\n-     * POST BRE(A)D - Store data.\n-     *\n-     * @param \\Illuminate\\Http\\Request $request\n-     *\n-     * @return \\Illuminate\\Http\\RedirectResponse\n-     */\n-    public function store(Request $request)\n-    {\n-        $slug = 'posts';\n-        \n-        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n-\n-        // Check permission\n-        $this->authorize('add', app($dataType->model_name));\n-        $postData = $request->all();\n-\n-         // Validate fields with ajax\n-         $val = $this->validateBread($request->all(), $dataType->addRows)->validate();\n-         //$data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());\n-\n-        \n-        $postsData = new \\TCG\\Voyager\\Models\\Post();\n-        $postsData->title = $postData['title'];\n-        $postsData->body = $postData['body'];\n-        $postsData->slug = $postData['slug'];\n-        $postsData->post_type = $postData['post_type'];\n-        $postsData->status = $postData['status'];\n-        $postsData->save();\n-        \n-        if($postData['post_type'] == 'REEL'){\n-            \n-            if ($request->hasFile('image')) {\n-                $allowedfileExtension=['mp4'];\n-                $image = $request->file('image');\n-                foreach ($postData['image'] as $files) {\n-                    $check=in_array($files->getClientOriginalExtension(),$allowedfileExtension);\n-                    if($check){\n-\n-                        $destinationPath = 'storage/app/public/posts/';\n-                        $file_name = 'video_'.time() . \".\" . $files->getClientOriginalExtension();\n-                        $files->move($destinationPath, $file_name);\n-                        $postReel = $file_name;\n-\n-                        $imageData = new PostsMedia();\n-                        $imageData->voxo_media_id = $postsData->id;\n-                        $imageData->media_files = $postReel;\n-                        $imageData->media_type =$postData['post_type'];\n-                        $imageData->mime_type = $files->getClientOriginalExtension();\n-                        $imageData->save();\n-                    }else{\n-                        $redirect = redirect()->back();\n-                        return $redirect->with([\n-                            'message'    => 'Warning! Sorry Only Upload mp4',\n-                            'alert-type' => 'error',\n-                        ]);\n-                    }\n-                }\n-                Post::where('id', $postsData->id)->update(['image' => 'video_play.png']);\n-            }\n-        }else{\n-            if ($request->hasFile('image')) {\n-                $allowedfileExtension=['jpg','png','jpeg'];\n-                $image = $request->file('image');\n-                foreach ($postData['image'] as $files) {\n-                    $check=in_array($files->getClientOriginalExtension(),$allowedfileExtension);\n-                    if($check){\n-                        $destinationPath = 'storage/app/public/posts/';\n-                        $file_name = 'img_'.time() . \".\" . $files->getClientOriginalExtension();\n-                        $files->move($destinationPath, $file_name);\n-                        $postImage = $file_name;\n-                        $imageData = new PostsMedia();\n-                        $imageData->voxo_media_id = $postsData->id;\n-                        $imageData->media_files = $postImage;\n-                        $imageData->media_type = $postData['post_type'];\n-                        $imageData->mime_type = $files->getClientOriginalExtension();\n-                        $imageData->save();\n-                    }else{\n-                        $redirect = redirect()->back();\n-                        return $redirect->with([\n-                            'message'    => 'Warning! Sorry Only Upload jpg, png, jpeg',\n-                            'alert-type' => 'error',\n-                        ]);\n-                    }\n-                }   \n-                Post::where('id', $postsData->id)->update(['image' => $postImage]);\n-            }\n-        }\n-       \n-\n-        event(new BreadDataAdded($dataType, $postsData));\n-\n-        if (!$request->has('_tagging')) {\n-            if (auth()->user()->can('browse', $postsData)) {\n-                $redirect = redirect()->route(\"voyager.{$dataType->slug}.index\");\n-            } else {\n-                $redirect = redirect()->back();\n-            }\n-\n-            return $redirect->with([\n-                'message'    => __('voyager::generic.successfully_added_new').\" {$dataType->getTranslatedAttribute('display_name_singular')}\",\n-                'alert-type' => 'success',\n-            ]);\n-        } else {\n-            return response()->json(['success' => true, 'data' => $postsData]);\n-        }\n-    }\n-\n-    //***************************************\n-    //                _____\n-    //               |  __ \\\n-    //               | |  | |\n-    //               | |  | |\n-    //               | |__| |\n-    //               |_____/\n-    //\n-    //         Delete an item BREA(D)\n-    //\n-    //****************************************\n-\n-    public function destroy(Request $request, $id)\n-    {\n-        $slug = $this->getSlug($request);\n-\n-        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n-\n-        // Init array of IDs\n-        $ids = [];\n-        if (empty($id)) {\n-            // Bulk delete, get IDs from POST\n-            $ids = explode(',', $request->ids);\n-        } else {\n-            // Single item delete, get ID from URL\n-            $ids[] = $id;\n-        }\n-        foreach ($ids as $id) {\n-            $data = call_user_func([$dataType->model_name, 'findOrFail'], $id);\n-\n-            // Check permission\n-            $this->authorize('delete', $data);\n-\n-            $model = app($dataType->model_name);\n-            if (!($model && in_array(SoftDeletes::class, class_uses_recursive($model)))) {\n-                $this->cleanup($dataType, $data);\n-            }\n-        }\n-\n-        $displayName = count($ids) > 1 ? $dataType->getTranslatedAttribute('display_name_plural') : $dataType->getTranslatedAttribute('display_name_singular');\n-\n-        $res = $data->destroy($ids);\n-        $data = $res\n-            ? [\n-                'message'    => __('voyager::generic.successfully_deleted').\" {$displayName}\",\n-                'alert-type' => 'success',\n-            ]\n-            : [\n-                'message'    => __('voyager::generic.error_deleting').\" {$displayName}\",\n-                'alert-type' => 'error',\n-            ];\n-\n-        if ($res) {\n-            event(new BreadDataDeleted($dataType, $data));\n-        }\n-\n-        return redirect()->route(\"voyager.{$dataType->slug}.index\")->with($data);\n-    }\n-/**\n-     * Remove translations, images and files related to a BREAD item.\n-     *\n-     * @param \\Illuminate\\Database\\Eloquent\\Model $dataType\n-     * @param \\Illuminate\\Database\\Eloquent\\Model $data\n-     *\n-     * @return void\n-     */\n-    protected function cleanup($dataType, $data)\n-    {\n-        // Delete Translations, if present\n-        if (is_bread_translatable($data)) {\n-            $data->deleteAttributeTranslations($data->getTranslatableAttributes());\n-        }\n-\n-        // Delete Images\n-        $this->deleteBreadImages($data, $dataType->deleteRows->whereIn('type', ['image', 'multiple_images']));\n-\n-        // Delete Files\n-        foreach ($dataType->deleteRows->where('type', 'file') as $row) {\n-            if (isset($data->{$row->field})) {\n-                foreach (json_decode($data->{$row->field}) as $file) {\n-                    $this->deleteFileIfExists($file->download_link);\n-                }\n-            }\n-        }\n-\n-        // Delete media-picker files\n-        $dataType->rows->where('type', 'media_picker')->where('details.delete_files', true)->each(function ($row) use ($data) {\n-            $content = $data->{$row->field};\n-            if (isset($content)) {\n-                if (!is_array($content)) {\n-                    $content = json_decode($content);\n-                }\n-                if (is_array($content)) {\n-                    foreach ($content as $file) {\n-                        $this->deleteFileIfExists($file);\n-                    }\n-                } else {\n-                    $this->deleteFileIfExists($content);\n-                }\n-            }\n-        });\n-    }\n-    /**\n-     * Delete all images related to a BREAD item.\n-     *\n-     * @param \\Illuminate\\Database\\Eloquent\\Model $data\n-     * @param \\Illuminate\\Database\\Eloquent\\Model $rows\n-     *\n-     * @return void\n-     */\n-    public function deleteBreadImages($data, $rows, $single_image = null)\n-    {\n-        $imagesDeleted = false;\n-\n-        foreach ($rows as $row) {\n-            if ($row->type == 'multiple_images') {\n-                $images_to_remove = json_decode($data->getOriginal($row->field), true) ?? [];\n-            } else {\n-                $images_to_remove = [$data->getOriginal($row->field)];\n-            }\n-\n-            foreach ($images_to_remove as $image) {\n-                // Remove only $single_image if we are removing from bread edit\n-                if ($image != config('voyager.user.default_avatar') && (is_null($single_image) || $single_image == $image)) {\n-                    $this->deleteFileIfExists($image);\n-                    $imagesDeleted = true;\n-\n-                    if (isset($row->details->thumbnails)) {\n-                        foreach ($row->details->thumbnails as $thumbnail) {\n-                            $ext = explode('.', $image);\n-                            $extension = '.'.$ext[count($ext) - 1];\n-\n-                            $path = str_replace($extension, '', $image);\n-\n-                            $thumb_name = $thumbnail->name;\n-\n-                            $this->deleteFileIfExists($path.'-'.$thumb_name.$extension);\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        if ($imagesDeleted) {\n-            event(new BreadImagesDeleted($data, $rows));\n-        }\n-    }\n-\n-    protected function getSortableColumns($rows)\n-    {\n-        return $rows->filter(function ($item) {\n-            if ($item->type != 'relationship') {\n-                return true;\n-            }\n-            if ($item->details->type != 'belongsTo') {\n-                return false;\n-            }\n-\n-            return !$this->relationIsUsingAccessorAsLabel($item->details);\n-        })\n-        ->pluck('field')\n-        ->toArray();\n-    }\n-\n-        /**\n-     * Get BREAD relations data.\n-     *\n-     * @param Request $request\n-     *\n-     * @return mixed\n-     */\n-    public function relation(Request $request)\n-    {\n-        $slug = $this->getSlug($request);\n-        $page = $request->input('page');\n-        $on_page = 50;\n-        $search = $request->input('search', false);\n-        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n-\n-        $method = $request->input('method', 'add');\n-\n-        $model = app($dataType->model_name);\n-        if ($method != 'add') {\n-            $model = $model->find($request->input('id'));\n-        }\n-\n-        $this->authorize($method, $model);\n-\n-        $rows = $dataType->{$method.'Rows'};\n-        foreach ($rows as $key => $row) {\n-            if ($row->field === $request->input('type')) {\n-                $options = $row->details;\n-                $model = app($options->model);\n-                $skip = $on_page * ($page - 1);\n-\n-                $additional_attributes = $model->additional_attributes ?? [];\n-\n-                // Apply local scope if it is defined in the relationship-options\n-                if (isset($options->scope) && $options->scope != '' && method_exists($model, 'scope'.ucfirst($options->scope))) {\n-                    $model = $model->{$options->scope}();\n-                }\n-\n-                // If search query, use LIKE to filter results depending on field label\n-                if ($search) {\n-                    // If we are using additional_attribute as label\n-                    if (in_array($options->label, $additional_attributes)) {\n-                        $relationshipOptions = $model->all();\n-                        $relationshipOptions = $relationshipOptions->filter(function ($model) use ($search, $options) {\n-                            return stripos($model->{$options->label}, $search) !== false;\n-                        });\n-                        $total_count = $relationshipOptions->count();\n-                        $relationshipOptions = $relationshipOptions->forPage($page, $on_page);\n-                    } else {\n-                        $total_count = $model->where($options->label, 'LIKE', '%'.$search.'%')->count();\n-                        $relationshipOptions = $model->take($on_page)->skip($skip)\n-                            ->where($options->label, 'LIKE', '%'.$search.'%')\n-                            ->get();\n-                    }\n-                } else {\n-                    $total_count = $model->count();\n-                    $relationshipOptions = $model->take($on_page)->skip($skip)->get();\n-                }\n-\n-                $results = [];\n-\n-                if (!$row->required && !$search && $page == 1) {\n-                    $results[] = [\n-                        'id'   => '',\n-                        'text' => __('voyager::generic.none'),\n-                    ];\n-                }\n-\n-                // Sort results\n-                if (!empty($options->sort->field)) {\n-                    if (!empty($options->sort->direction) && strtolower($options->sort->direction) == 'desc') {\n-                        $relationshipOptions = $relationshipOptions->sortByDesc($options->sort->field);\n-                    } else {\n-                        $relationshipOptions = $relationshipOptions->sortBy($options->sort->field);\n-                    }\n-                }\n-\n-                foreach ($relationshipOptions as $relationshipOption) {\n-                    $results[] = [\n-                        'id'   => $relationshipOption->{$options->key},\n-                        'text' => $relationshipOption->{$options->label},\n-                    ];\n-                }\n-\n-                return response()->json([\n-                    'results'    => $results,\n-                    'pagination' => [\n-                        'more' => ($total_count > ($skip + $on_page)),\n-                    ],\n-                ]);\n-            }\n-        }\n-\n-        // No result found, return empty array\n-        return response()->json([], 404);\n-    }\n-\n-    protected function findSearchableRelationshipRow($relationshipRows, $searchKey)\n-    {\n-        return $relationshipRows->filter(function ($item) use ($searchKey) {\n-            if ($item->details->column != $searchKey) {\n-                return false;\n-            }\n-            if ($item->details->type != 'belongsTo') {\n-                return false;\n-            }\n-\n-            return !$this->relationIsUsingAccessorAsLabel($item->details);\n-        })->first();\n-    }\n-\n-    protected function relationIsUsingAccessorAsLabel($details)\n-    {\n-        return in_array($details->label, app($details->model)->additional_attributes ?? []);\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629395681752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,9 +207,9 @@\n     }\n \n \n     public function getPostsList(Request $request){\n-        $postData = Post::with('authorId', 'postMedia')->orderBy('id', 'DESC');\n+        $postData = Post::with('authorId')->orderBy('id', 'DESC');\n         \n         return Datatables::of($postData)\n             ->addColumn('user_name', function ($data) {\n                 return 'sadasd';\n"
                },
                {
                    "date": 1629395719175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,13 +207,13 @@\n     }\n \n \n     public function getPostsList(Request $request){\n-        $postData = Post::with('authorId')->orderBy('id', 'DESC');\n+        $postData = Post::with('authorId', 'postMedia')->orderBy('id', 'DESC');\n         \n         return Datatables::of($postData)\n             ->addColumn('user_name', function ($data) {\n-                return 'sadasd';\n+                return $data->authorId->name;\n             })->addColumn('title', function ($data) {\n                 return $data->title;\n             })->addColumn('post_type', function ($data) {\n                 return $data->post_type;\n"
                },
                {
                    "date": 1629395852015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n         $postData = Post::with('authorId', 'postMedia')->orderBy('id', 'DESC');\n         \n         return Datatables::of($postData)\n             ->addColumn('user_name', function ($data) {\n-                return $data->authorId->name;\n+                return $data->authorId->name.'|'.$data->authorId->user_name;\n             })->addColumn('title', function ($data) {\n                 return $data->title;\n             })->addColumn('post_type', function ($data) {\n                 return $data->post_type;\n"
                },
                {
                    "date": 1629396057913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,12 +225,8 @@\n                 return $data->created_at;\n             })->addColumn('action', function ($data) {\n                 $datanew = base64_encode(json_encode($data));\n                 $action = '';   \n-                $action .= '<a href=\"'.route('voyager.user.media', ['type' => 'wall', 'id' => $data->id]).'\" title=\"Wall List\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-images\"></i></a>'; \n-\n-                $action .= '<a href=\"'.route('voyager.user.media', ['type' => 'reel', 'id' => $data->id]).'\" title=\"Reel List\" class=\"btn btn-sm btn-success pull-right edit\"><i class=\"voyager-video\"></i></a>';  \n-\n                 $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n \n                 $action .= '<a href=\"\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n \n"
                },
                {
                    "date": 1629396156355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,9 @@\n                 $datanew = base64_encode(json_encode($data));\n                 $action = '';   \n                 $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n \n-                $action .= '<a href=\"\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n+                $action .= '<a href=\"{{ route(\"voyager.posts\", [\"id\" => '.$data->id.' ]) }}\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n \n                 $action .= '<a href=\"\" title=\"Edit\" class=\"btn btn-sm btn-warning pull-right edit\"><i class=\"voyager-edit\"></i></a>'; \n \n                 $action .= '<a href=\"javascript:;\" title=\"Active\" class=\"btn btn-sm btn-success pull-right active\" data-type=\"A\"><i class=\"voyager-check\"></i></a>';   \n"
                },
                {
                    "date": 1629396188989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,9 @@\n                 $datanew = base64_encode(json_encode($data));\n                 $action = '';   \n                 $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n \n-                $action .= '<a href=\"{{ route(\"voyager.posts\", [\"id\" => '.$data->id.' ]) }}\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n+                $action .= '<a href=\"{{ '.route('voyager.posts', ['id' => $data->id ]).' }}\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n \n                 $action .= '<a href=\"\" title=\"Edit\" class=\"btn btn-sm btn-warning pull-right edit\"><i class=\"voyager-edit\"></i></a>'; \n \n                 $action .= '<a href=\"javascript:;\" title=\"Active\" class=\"btn btn-sm btn-success pull-right active\" data-type=\"A\"><i class=\"voyager-check\"></i></a>';   \n"
                },
                {
                    "date": 1629396264362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,9 @@\n                 $datanew = base64_encode(json_encode($data));\n                 $action = '';   \n                 $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n \n-                $action .= '<a href=\"{{ '.route('voyager.posts', ['id' => $data->id ]).' }}\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n+                $action .= '<a href=\"'.route('voyager.posts', ['id' => $data->id ]).'\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n \n                 $action .= '<a href=\"\" title=\"Edit\" class=\"btn btn-sm btn-warning pull-right edit\"><i class=\"voyager-edit\"></i></a>'; \n \n                 $action .= '<a href=\"javascript:;\" title=\"Active\" class=\"btn btn-sm btn-success pull-right active\" data-type=\"A\"><i class=\"voyager-check\"></i></a>';   \n"
                },
                {
                    "date": 1629396320812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n                 $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n \n                 $action .= '<a href=\"'.route('voyager.posts', ['id' => $data->id ]).'\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n \n-                $action .= '<a href=\"\" title=\"Edit\" class=\"btn btn-sm btn-warning pull-right edit\"><i class=\"voyager-edit\"></i></a>'; \n+                $action .= '<a href=\"\"'.route('voyager.posts.edit', ['id' => $data->id ]).'\"\" title=\"Edit\" class=\"btn btn-sm btn-warning pull-right edit\"><i class=\"voyager-edit\"></i></a>'; \n \n                 $action .= '<a href=\"javascript:;\" title=\"Active\" class=\"btn btn-sm btn-success pull-right active\" data-type=\"A\"><i class=\"voyager-check\"></i></a>';   \n \n                 return $action ;\n"
                },
                {
                    "date": 1629396392318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n                 $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n \n                 $action .= '<a href=\"'.route('voyager.posts', ['id' => $data->id ]).'\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n \n-                $action .= '<a href=\"\"'.route('voyager.posts.edit', ['id' => $data->id ]).'\"\" title=\"Edit\" class=\"btn btn-sm btn-warning pull-right edit\"><i class=\"voyager-edit\"></i></a>'; \n+                $action .= '<a href=\"'.route('voyager.posts.edit', ['id' => $data->id ]).'\" title=\"Edit\" class=\"btn btn-sm btn-warning pull-right edit\"><i class=\"voyager-edit\"></i></a>'; \n \n                 $action .= '<a href=\"javascript:;\" title=\"Active\" class=\"btn btn-sm btn-success pull-right active\" data-type=\"A\"><i class=\"voyager-check\"></i></a>';   \n \n                 return $action ;\n"
                },
                {
                    "date": 1629396413846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,10 +231,8 @@\n                 $action .= '<a href=\"'.route('voyager.posts', ['id' => $data->id ]).'\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n \n                 $action .= '<a href=\"'.route('voyager.posts.edit', ['id' => $data->id ]).'\" title=\"Edit\" class=\"btn btn-sm btn-warning pull-right edit\"><i class=\"voyager-edit\"></i></a>'; \n \n-                $action .= '<a href=\"javascript:;\" title=\"Active\" class=\"btn btn-sm btn-success pull-right active\" data-type=\"A\"><i class=\"voyager-check\"></i></a>';   \n-\n                 return $action ;\n                \n             })\n             ->blacklist(['action'])\n"
                },
                {
                    "date": 1629396465493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,14 +225,19 @@\n                 return $data->created_at;\n             })->addColumn('action', function ($data) {\n                 $datanew = base64_encode(json_encode($data));\n                 $action = '';   \n+\n+                $action .= '<a href=\"'.route('voyager.user.media', ['id' => $data->id]).'\" title=\"Report\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-images\"></i></a>'; \n+\n                 $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n \n                 $action .= '<a href=\"'.route('voyager.posts', ['id' => $data->id ]).'\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n \n                 $action .= '<a href=\"'.route('voyager.posts.edit', ['id' => $data->id ]).'\" title=\"Edit\" class=\"btn btn-sm btn-warning pull-right edit\"><i class=\"voyager-edit\"></i></a>'; \n \n+                $action .= '<a href=\"javascript:;\" title=\"Active\" class=\"btn btn-sm btn-success pull-right active\" data-type=\"A\"><i class=\"voyager-check\"></i></a>';   \n+\n                 return $action ;\n                \n             })\n             ->blacklist(['action'])\n"
                },
                {
                    "date": 1629396482095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,18 +226,18 @@\n             })->addColumn('action', function ($data) {\n                 $datanew = base64_encode(json_encode($data));\n                 $action = '';   \n \n-                $action .= '<a href=\"'.route('voyager.user.media', ['id' => $data->id]).'\" title=\"Report\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-images\"></i></a>'; \n-\n                 $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n \n                 $action .= '<a href=\"'.route('voyager.posts', ['id' => $data->id ]).'\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n \n                 $action .= '<a href=\"'.route('voyager.posts.edit', ['id' => $data->id ]).'\" title=\"Edit\" class=\"btn btn-sm btn-warning pull-right edit\"><i class=\"voyager-edit\"></i></a>'; \n \n                 $action .= '<a href=\"javascript:;\" title=\"Active\" class=\"btn btn-sm btn-success pull-right active\" data-type=\"A\"><i class=\"voyager-check\"></i></a>';   \n \n+                $action .= '<a href=\"'.route('voyager.user.media', ['id' => $data->id]).'\" title=\"Report\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-images\"></i></a>'; \n+                \n                 return $action ;\n                \n             })\n             ->blacklist(['action'])\n"
                },
                {
                    "date": 1629396509013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,18 +226,18 @@\n             })->addColumn('action', function ($data) {\n                 $datanew = base64_encode(json_encode($data));\n                 $action = '';   \n \n+                $action .= '<a href=\"'.route('voyager.user.media', ['id' => $data->id]).'\" title=\"Report\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-images\"></i></a>'; \n+\n                 $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n \n                 $action .= '<a href=\"'.route('voyager.posts', ['id' => $data->id ]).'\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n \n                 $action .= '<a href=\"'.route('voyager.posts.edit', ['id' => $data->id ]).'\" title=\"Edit\" class=\"btn btn-sm btn-warning pull-right edit\"><i class=\"voyager-edit\"></i></a>'; \n \n                 $action .= '<a href=\"javascript:;\" title=\"Active\" class=\"btn btn-sm btn-success pull-right active\" data-type=\"A\"><i class=\"voyager-check\"></i></a>';   \n \n-                $action .= '<a href=\"'.route('voyager.user.media', ['id' => $data->id]).'\" title=\"Report\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-images\"></i></a>'; \n-                \n                 return $action ;\n                \n             })\n             ->blacklist(['action'])\n"
                },
                {
                    "date": 1629396523973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n             })->addColumn('action', function ($data) {\n                 $datanew = base64_encode(json_encode($data));\n                 $action = '';   \n \n-                $action .= '<a href=\"'.route('voyager.user.media', ['id' => $data->id]).'\" title=\"Report\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-images\"></i></a>'; \n+                $action .= '<a href=\"'.route('voyager.user.media', ['id' => $data->id]).'\" title=\"Report\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-cress\"></i></a>'; \n \n                 $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n \n                 $action .= '<a href=\"'.route('voyager.posts', ['id' => $data->id ]).'\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n"
                },
                {
                    "date": 1629396642674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n             })->addColumn('action', function ($data) {\n                 $datanew = base64_encode(json_encode($data));\n                 $action = '';   \n \n-                $action .= '<a href=\"'.route('voyager.user.media', ['id' => $data->id]).'\" title=\"Report\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-cress\"></i></a>'; \n+                $action .= '<a href=\"'.route('voyager.user.media', ['id' => $data->id]).'\" title=\"Report\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-question\"></i></a>'; \n \n                 $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n \n                 $action .= '<a href=\"'.route('voyager.posts', ['id' => $data->id ]).'\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n"
                },
                {
                    "date": 1629396661429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n             })->addColumn('action', function ($data) {\n                 $datanew = base64_encode(json_encode($data));\n                 $action = '';   \n \n-                $action .= '<a href=\"'.route('voyager.user.media', ['id' => $data->id]).'\" title=\"Report\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-question\"></i></a>'; \n+                $action .= '<a href=\"'.route('voyager.wall.report', ['id' => $data->id]).'\" title=\"Report\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-question\"></i></a>'; \n \n                 $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n \n                 $action .= '<a href=\"'.route('voyager.posts', ['id' => $data->id ]).'\" title=\"View\" class=\"btn btn-sm btn-info pull-right edit\"><i class=\"voyager-eye\"></i></a>'; \n"
                },
                {
                    "date": 1629396859431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n use App\\Models\\Wall;\n use App\\Models\\PostsMedia;\n use TCG\\Voyager\\Models\\Post;\n use Yajra\\DataTables\\Facades\\DataTables;\n+use App\\Models\\PostReport;\n \n class VoyagerWallController extends Controller\n {\n     use BreadRelationshipParser;\n"
                },
                {
                    "date": 1629396925082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -844,5 +844,9 @@\n     protected function relationIsUsingAccessorAsLabel($details)\n     {\n         return in_array($details->label, app($details->model)->additional_attributes ?? []);\n     }\n+\n+    public function getPostReport(Request $request, $id){\n+        $getData = PostReport::wjere(['voxo_media_id' => $id])->get();\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629466933679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -846,7 +846,7 @@\n         return in_array($details->label, app($details->model)->additional_attributes ?? []);\n     }\n \n     public function getPostReport(Request $request, $id){\n-        $getData = PostReport::wjere(['voxo_media_id' => $id])->get();\n+        $getData = PostReport::where(['voxo_media_id' => $id])->get();\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629466944901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -847,6 +847,7 @@\n     }\n \n     public function getPostReport(Request $request, $id){\n         $getData = PostReport::where(['voxo_media_id' => $id])->get();\n+        dd($getData);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629467180683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -846,8 +846,45 @@\n         return in_array($details->label, app($details->model)->additional_attributes ?? []);\n     }\n \n     public function getPostReport(Request $request, $id){\n-        $getData = PostReport::where(['voxo_media_id' => $id])->get();\n-        dd($getData);\n+\n+        $slug = 'posts';\n+\n+        // GET THE DataType based on the slug\n+        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n+        $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n+        \n+        $id = $request->get('id');\n+        \n+        if (request()->ajax()) {\n+\n+            $getData = PostReport::where(['voxo_media_id' => $id])->get();\n+            dd($getData);\n+\n+            $postData = Post::where(['author_id' => $id, 'post_type' => $type]);\n+\n+            return Datatables::of($postData)\n+            ->addColumn('title', function ($data) {\n+                return $data->title;\n+            })->addColumn('body', function ($data) {\n+                return strip_tags($data->body);\n+            })->addColumn('audio_name', function ($data) {\n+                return $data->audio_name;\n+            })->addColumn('image', function ($data) {\n+                return $data->image;\n+            })->addColumn('action', function ($data) {\n+                $datanew = base64_encode(json_encode($data));\n+                $action = '';   \n+                $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n+                return $action ;\n+               \n+            })\n+            ->blacklist(['action'])\n+            ->make(true);\n+\n+        }\n+\n+        $view = \"voyager::posts.wall-report\";\n+        return Voyager::view($view, compact('id', 'dataType', 'isServerSide', 'type'));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629467197488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -856,10 +856,10 @@\n         \n         $id = $request->get('id');\n         \n         if (request()->ajax()) {\n-\n-            $getData = PostReport::where(['voxo_media_id' => $id])->get();\n+            $id = $request->get('id');\n+            $getData = PostReport::where(['voxo_media_id' => $id]);\n             dd($getData);\n \n             $postData = Post::where(['author_id' => $id, 'post_type' => $type]);\n \n@@ -884,7 +884,7 @@\n \n         }\n \n         $view = \"voyager::posts.wall-report\";\n-        return Voyager::view($view, compact('id', 'dataType', 'isServerSide', 'type'));\n+        return Voyager::view($view, compact('id', 'dataType', 'isServerSide'));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629467285115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -857,14 +857,11 @@\n         $id = $request->get('id');\n         \n         if (request()->ajax()) {\n             $id = $request->get('id');\n-            $getData = PostReport::where(['voxo_media_id' => $id]);\n+            $getData = PostReport::with('posts')->where(['voxo_media_id' => $id]);\n             dd($getData);\n-\n-            $postData = Post::where(['author_id' => $id, 'post_type' => $type]);\n-\n-            return Datatables::of($postData)\n+            return Datatables::of($getData)\n             ->addColumn('title', function ($data) {\n                 return $data->title;\n             })->addColumn('body', function ($data) {\n                 return strip_tags($data->body);\n"
                },
                {
                    "date": 1629467349078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -854,12 +854,13 @@\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n         $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n         \n         $id = $request->get('id');\n-        \n+        $getData = PostReport::with('posts')->where(['voxo_media_id' => $id])->get();\n+        dd($getData);\n         if (request()->ajax()) {\n             $id = $request->get('id');\n-            $getData = PostReport::with('posts')->where(['voxo_media_id' => $id]);\n+            \n             dd($getData);\n             return Datatables::of($getData)\n             ->addColumn('title', function ($data) {\n                 return $data->title;\n"
                },
                {
                    "date": 1629467372612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -854,8 +854,9 @@\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n         $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n         \n         $id = $request->get('id');\n+        echo $id;die;\n         $getData = PostReport::with('posts')->where(['voxo_media_id' => $id])->get();\n         dd($getData);\n         if (request()->ajax()) {\n             $id = $request->get('id');\n"
                },
                {
                    "date": 1629467402093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -853,9 +853,9 @@\n         // GET THE DataType based on the slug\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n         $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n         \n-        $id = $request->get('id');\n+        $id = $id;\n         echo $id;die;\n         $getData = PostReport::with('posts')->where(['voxo_media_id' => $id])->get();\n         dd($getData);\n         if (request()->ajax()) {\n"
                },
                {
                    "date": 1629467408379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -853,10 +853,8 @@\n         // GET THE DataType based on the slug\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n         $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n         \n-        $id = $id;\n-        echo $id;die;\n         $getData = PostReport::with('posts')->where(['voxo_media_id' => $id])->get();\n         dd($getData);\n         if (request()->ajax()) {\n             $id = $request->get('id');\n"
                },
                {
                    "date": 1629467529996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -853,9 +853,9 @@\n         // GET THE DataType based on the slug\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n         $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n         \n-        $getData = PostReport::with('posts')->where(['voxo_media_id' => $id])->get();\n+        $getData = PostReport::with('posts', 'posts.users')->where(['voxo_media_id' => $id])->get();\n         dd($getData);\n         if (request()->ajax()) {\n             $id = $request->get('id');\n             \n"
                },
                {
                    "date": 1629467535869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -853,9 +853,9 @@\n         // GET THE DataType based on the slug\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n         $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n         \n-        $getData = PostReport::with('posts', 'posts.users')->where(['voxo_media_id' => $id])->get();\n+        $getData = PostReport::with('posts', 'posts.authorId')->where(['voxo_media_id' => $id])->get();\n         dd($getData);\n         if (request()->ajax()) {\n             $id = $request->get('id');\n             \n"
                },
                {
                    "date": 1629467679553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -853,13 +853,11 @@\n         // GET THE DataType based on the slug\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n         $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n         \n-        $getData = PostReport::with('posts', 'posts.authorId')->where(['voxo_media_id' => $id])->get();\n-        dd($getData);\n         if (request()->ajax()) {\n             $id = $request->get('id');\n-            \n+            $getData = PostReport::with('posts', 'posts.authorId')->where(['voxo_media_id' => $id])->get();\n             dd($getData);\n             return Datatables::of($getData)\n             ->addColumn('title', function ($data) {\n                 return $data->title;\n"
                },
                {
                    "date": 1629468767855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -855,9 +855,9 @@\n         $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n         \n         if (request()->ajax()) {\n             $id = $request->get('id');\n-            $getData = PostReport::with('posts', 'posts.authorId')->where(['voxo_media_id' => $id])->get();\n+            $getData = PostReport::with('posts.authorId')->where(['voxo_media_id' => $id])->get();\n             dd($getData);\n             return Datatables::of($getData)\n             ->addColumn('title', function ($data) {\n                 return $data->title;\n"
                },
                {
                    "date": 1629468775906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -852,9 +852,10 @@\n \n         // GET THE DataType based on the slug\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n         $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n-        \n+        $getData = PostReport::with('posts.authorId')->where(['voxo_media_id' => $id])->get();\n+            dd($getData);\n         if (request()->ajax()) {\n             $id = $request->get('id');\n             $getData = PostReport::with('posts.authorId')->where(['voxo_media_id' => $id])->get();\n             dd($getData);\n"
                },
                {
                    "date": 1629468863845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -852,17 +852,16 @@\n \n         // GET THE DataType based on the slug\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n         $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n-        $getData = PostReport::with('posts.authorId')->where(['voxo_media_id' => $id])->get();\n-            dd($getData);\n+        \n         if (request()->ajax()) {\n             $id = $request->get('id');\n-            $getData = PostReport::with('posts.authorId')->where(['voxo_media_id' => $id])->get();\n+            $getData = PostReport::with('posts.authorId')->where(['voxo_media_id' => $id]);\n             dd($getData);\n             return Datatables::of($getData)\n-            ->addColumn('title', function ($data) {\n-                return $data->title;\n+            ->addColumn('user_name', function ($data) {\n+                return $data->posts->authorId->name.'|'.$data->posts->authorId->user_name;\n             })->addColumn('body', function ($data) {\n                 return strip_tags($data->body);\n             })->addColumn('audio_name', function ($data) {\n                 return $data->audio_name;\n"
                },
                {
                    "date": 1629468898804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -860,14 +860,12 @@\n             dd($getData);\n             return Datatables::of($getData)\n             ->addColumn('user_name', function ($data) {\n                 return $data->posts->authorId->name.'|'.$data->posts->authorId->user_name;\n-            })->addColumn('body', function ($data) {\n-                return strip_tags($data->body);\n-            })->addColumn('audio_name', function ($data) {\n-                return $data->audio_name;\n-            })->addColumn('image', function ($data) {\n-                return $data->image;\n+            })->addColumn('reporst_text', function ($data) {\n+                return $data->reporst_text;\n+            })->addColumn('created_at', function ($data) {\n+                return $data->created_at;\n             })->addColumn('action', function ($data) {\n                 $datanew = base64_encode(json_encode($data));\n                 $action = '';   \n                 $action .= '<a href=\"javascript:;\" title=\"Delete\" class=\"btn btn-sm btn-danger pull-right delete\"><i class=\"voyager-trash\"></i></a>';  \n"
                },
                {
                    "date": 1629469011746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -854,9 +854,9 @@\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n         $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n         \n         if (request()->ajax()) {\n-            $id = $request->get('id');\n+            $id = $request->get('postId');\n             $getData = PostReport::with('posts.authorId')->where(['voxo_media_id' => $id]);\n             dd($getData);\n             return Datatables::of($getData)\n             ->addColumn('user_name', function ($data) {\n"
                },
                {
                    "date": 1629469123605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -845,16 +845,16 @@\n     {\n         return in_array($details->label, app($details->model)->additional_attributes ?? []);\n     }\n \n-    public function getPostReport(Request $request, $id){\n+    public function getPostReport(Request $request){\n \n         $slug = 'posts';\n \n         // GET THE DataType based on the slug\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n         $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n-        \n+        $id = $request->get('id');\n         if (request()->ajax()) {\n             $id = $request->get('postId');\n             $getData = PostReport::with('posts.authorId')->where(['voxo_media_id' => $id]);\n             dd($getData);\n"
                },
                {
                    "date": 1629469136040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -856,9 +856,9 @@\n         $id = $request->get('id');\n         if (request()->ajax()) {\n             $id = $request->get('postId');\n             $getData = PostReport::with('posts.authorId')->where(['voxo_media_id' => $id]);\n-            dd($getData);\n+           \n             return Datatables::of($getData)\n             ->addColumn('user_name', function ($data) {\n                 return $data->posts->authorId->name.'|'.$data->posts->authorId->user_name;\n             })->addColumn('reporst_text', function ($data) {\n"
                },
                {
                    "date": 1629469151718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -853,8 +853,9 @@\n         // GET THE DataType based on the slug\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n         $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n         $id = $request->get('id');\n+        \n         if (request()->ajax()) {\n             $id = $request->get('postId');\n             $getData = PostReport::with('posts.authorId')->where(['voxo_media_id' => $id]);\n            \n"
                },
                {
                    "date": 1629469201774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -853,9 +853,9 @@\n         // GET THE DataType based on the slug\n         $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n         $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n         $id = $request->get('id');\n-        \n+        $postData = Post::where(['id' => $id])->first();\n         if (request()->ajax()) {\n             $id = $request->get('postId');\n             $getData = PostReport::with('posts.authorId')->where(['voxo_media_id' => $id]);\n            \n@@ -878,7 +878,7 @@\n \n         }\n \n         $view = \"voyager::posts.wall-report\";\n-        return Voyager::view($view, compact('id', 'dataType', 'isServerSide'));\n+        return Voyager::view($view, compact('id', 'dataType', 'isServerSide', 'postData'));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629469371113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,9 +208,9 @@\n     }\n \n \n     public function getPostsList(Request $request){\n-        $postData = Post::with('authorId', 'postMedia')->orderBy('id', 'DESC');\n+        $postData = Post::with('authorId', 'postMedia')->withCount('articles')->orderBy('id', 'DESC');\n         \n         return Datatables::of($postData)\n             ->addColumn('user_name', function ($data) {\n                 return $data->authorId->name.'|'.$data->authorId->user_name;\n"
                },
                {
                    "date": 1629469405989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,9 +208,9 @@\n     }\n \n \n     public function getPostsList(Request $request){\n-        $postData = Post::with('authorId', 'postMedia')->withCount('articles')->orderBy('id', 'DESC');\n+        $postData = Post::with('authorId', 'postMedia')->withCount('postReport')->orderBy('id', 'DESC');\n         \n         return Datatables::of($postData)\n             ->addColumn('user_name', function ($data) {\n                 return $data->authorId->name.'|'.$data->authorId->user_name;\n"
                },
                {
                    "date": 1629469453603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,8 +221,10 @@\n             })->addColumn('media_file', function ($data) {\n                 return $data->image;\n             })->addColumn('status', function ($data) {\n                 return $data->status;\n+            })->addColumn('report_count', function ($data) {\n+                return $data->post_report_count;\n             })->addColumn('created_at', function ($data) {\n                 return $data->created_at;\n             })->addColumn('action', function ($data) {\n                 $datanew = base64_encode(json_encode($data));\n"
                }
            ],
            "date": 1629180380106,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace TCG\\Voyager\\Http\\Controllers;\n\nuse Exception;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse TCG\\Voyager\\Database\\Schema\\SchemaManager;\nuse TCG\\Voyager\\Events\\BreadDataAdded;\nuse TCG\\Voyager\\Events\\BreadDataDeleted;\nuse TCG\\Voyager\\Events\\BreadDataRestored;\nuse TCG\\Voyager\\Events\\BreadDataUpdated;\nuse TCG\\Voyager\\Events\\BreadImagesDeleted;\nuse TCG\\Voyager\\Facades\\Voyager;\nuse TCG\\Voyager\\Http\\Controllers\\Traits\\BreadRelationshipParser;\nuse App\\Models\\Wall;\n\nclass VoyagerWallController extends Controller\n{\n    use BreadRelationshipParser;\n\n    //***************************************\n    //               ____\n    //              |  _ \\\n    //              | |_) |\n    //              |  _ <\n    //              | |_) |\n    //              |____/\n    //\n    //      Browse our Data Type (B)READ\n    //\n    //****************************************\n\n    public function index(Request $request)\n    {\n        // GET THE SLUG, ex. 'posts', 'pages', etc.\n        $slug = $this->getSlug($request);\n\n        // GET THE DataType based on the slug\n        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\n\n        // Check permission\n        $this->authorize('browse', app($dataType->model_name));\n\n        $getter = $dataType->server_side ? 'paginate' : 'get';\n\n        $search = (object) ['value' => $request->get('s'), 'key' => $request->get('key'), 'filter' => $request->get('filter')];\n\n        $searchNames = [];\n        if ($dataType->server_side) {\n            $searchNames = $dataType->browseRows->mapWithKeys(function ($row) {\n                return [$row['field'] => $row->getTranslatedAttribute('display_name')];\n            });\n        }\n\n        $orderBy = $request->get('order_by', $dataType->order_column);\n        $sortOrder = $request->get('sort_order', $dataType->order_direction);\n        $usesSoftDeletes = false;\n        $showSoftDeleted = false;\n\n        // Next Get or Paginate the actual content from the MODEL that corresponds to the slug DataType\n        if (strlen($dataType->model_name) != 0) {\n            $model = app($dataType->model_name);\n\n            $query = $model::select($dataType->name.'.*');\n\n            if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope'.ucfirst($dataType->scope))) {\n                $query->{$dataType->scope}();\n            }\n\n            // Use withTrashed() if model uses SoftDeletes and if toggle is selected\n            if ($model && in_array(SoftDeletes::class, class_uses_recursive($model)) && Auth::user()->can('delete', app($dataType->model_name))) {\n                $usesSoftDeletes = true;\n\n                if ($request->get('showSoftDeleted')) {\n                    $showSoftDeleted = true;\n                    $query = $query->withTrashed();\n                }\n            }\n\n            // If a column has a relationship associated with it, we do not want to show that field\n            $this->removeRelationshipField($dataType, 'browse');\n\n            if ($search->value != '' && $search->key && $search->filter) {\n                $search_filter = ($search->filter == 'equals') ? '=' : 'LIKE';\n                $search_value = ($search->filter == 'equals') ? $search->value : '%'.$search->value.'%';\n\n                $searchField = $dataType->name.'.'.$search->key;\n                if ($row = $this->findSearchableRelationshipRow($dataType->rows->where('type', 'relationship'), $search->key)) {\n                    $query->whereIn(\n                        $searchField,\n                        $row->details->model::where($row->details->label, $search_filter, $search_value)->pluck('id')->toArray()\n                    );\n                } else {\n                    if ($dataType->browseRows->pluck('field')->contains($search->key)) {\n                        $query->where($searchField, $search_filter, $search_value);\n                    }\n                }\n            }\n\n            $row = $dataType->rows->where('field', $orderBy)->firstWhere('type', 'relationship');\n            if ($orderBy && (in_array($orderBy, $dataType->fields()) || !empty($row))) {\n                $querySortOrder = (!empty($sortOrder)) ? $sortOrder : 'desc';\n                if (!empty($row)) {\n                    $query->select([\n                        $dataType->name.'.*',\n                        'joined.'.$row->details->label.' as '.$orderBy,\n                    ])->leftJoin(\n                        $row->details->table.' as joined',\n                        $dataType->name.'.'.$row->details->column,\n                        'joined.'.$row->details->key\n                    );\n                }\n\n                $dataTypeContent = call_user_func([\n                    $query->orderBy($orderBy, $querySortOrder),\n                    $getter,\n                ]);\n            } elseif ($model->timestamps) {\n                $dataTypeContent = call_user_func([$query->latest($model::CREATED_AT), $getter]);\n            } else {\n                $dataTypeContent = call_user_func([$query->orderBy($model->getKeyName(), 'DESC'), $getter]);\n            }\n\n            // Replace relationships' keys for labels and create READ links if a slug is provided.\n            $dataTypeContent = $this->resolveRelations($dataTypeContent, $dataType);\n        } else {\n            // If Model doesn't exist, get data from table name\n            $dataTypeContent = call_user_func([DB::table($dataType->name), $getter]);\n            $model = false;\n        }\n\n        // Check if BREAD is Translatable\n        $isModelTranslatable = is_bread_translatable($model);\n\n        // Eagerload Relations\n        $this->eagerLoadRelations($dataTypeContent, $dataType, 'browse', $isModelTranslatable);\n\n        // Check if server side pagination is enabled\n        $isServerSide = isset($dataType->server_side) && $dataType->server_side;\n\n        // Check if a default search key is set\n        $defaultSearchKey = $dataType->default_search_key ?? null;\n\n        // Actions\n        $actions = [];\n        if (!empty($dataTypeContent->first())) {\n            foreach (Voyager::actions() as $action) {\n                $action = new $action($dataType, $dataTypeContent->first());\n\n                if ($action->shouldActionDisplayOnDataType()) {\n                    $actions[] = $action;\n                }\n            }\n        }\n\n        // Define showCheckboxColumn\n        $showCheckboxColumn = false;\n        if (Auth::user()->can('delete', app($dataType->model_name))) {\n            $showCheckboxColumn = true;\n        } else {\n            foreach ($actions as $action) {\n                if (method_exists($action, 'massAction')) {\n                    $showCheckboxColumn = true;\n                }\n            }\n        }\n\n        // Define orderColumn\n        $orderColumn = [];\n        if ($orderBy) {\n            $index = $dataType->browseRows->where('field', $orderBy)->keys()->first() + ($showCheckboxColumn ? 1 : 0);\n            $orderColumn = [[$index, $sortOrder ?? 'desc']];\n        }\n\n        // Define list of columns that can be sorted server side\n        $sortableColumns = $this->getSortableColumns($dataType->browseRows);\n\n        $view = 'voyager::bread.browse';\n\n        if (view()->exists(\"voyager::$slug.browse\")) {\n            $view = \"voyager::$slug.browse\";\n        }\n\n        return Voyager::view($view, compact(\n            'actions',\n            'dataType',\n            'dataTypeContent',\n            'isModelTranslatable',\n            'search',\n            'orderBy',\n            'orderColumn',\n            'sortableColumns',\n            'sortOrder',\n            'searchNames',\n            'isServerSide',\n            'defaultSearchKey',\n            'usesSoftDeletes',\n            'showSoftDeleted',\n            'showCheckboxColumn'\n        ));\n    }"
        }
    ]
}