{
    "sourceFile": "app/Http/Controllers/Api/V1/AuthController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 328,
            "patches": [
                {
                    "date": 1627650339496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1627650417472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     {\n         $time = date('Y-m-d H:i:s');\n         $validation = Validator::make($request->all(), [\n             'name' => 'required',\n-            'phone_number' => 'required|regex:/^[0-9]{9,12}$/',\n+            'mobile_number' => 'required|regex:/^[0-9]{9,12}$/',\n             'email' => 'required|email',\n             'password' => 'required|min:8',\n         ]);\n         $data = $request->all();\n@@ -58,9 +58,9 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-        $checkuser = User::where(['phone_number' => $request->get('phone_number'), 'role_id' => USER_ROLE])->count();\n+        $checkuser = User::where(['mobile_number' => $request->get('mobile_number'), 'role_id' => USER_ROLE])->count();\n         if($checkuser == 1){\n             $resp = [\n                 'status' => false,\n                 'data' => '',\n@@ -90,9 +90,9 @@\n         //$otp = '1234';\n         $arr = [\n             'role_id' => USER_ROLE,\n             'name' => $data['name'],\n-            'phone_number' => $data['phone_number'],\n+            'mobile_number' => $data['mobile_number'],\n             'email' => $data['email'],\n             'password' => Hash::make($data['password']),\n             'device_token' => $data['device_token'],\n             'device_type' => $data['device_type'],\n@@ -105,9 +105,9 @@\n \n             $notify_message = $otp . ' is the OTP for accessing your Mealox account. PLEASE DO NOT SHARE IT WITH ANYONE.';\n             $notification_data = ['type' => 'otp', 'message' => $notify_message, 'user_id' => $user->id];\n             $sendSms = sendGCMUser($user->device_token, 'Verify OTP', $notify_message, $user->device_type, $notification_data);\n-            $this->sendSms2($notify_message, $data['phone_number']);\n+            $this->sendSms2($notify_message, $data['mobile_number']);\n             //$this->sendSms($notify_message, $data['phone']);\n \n             $passportToken = $user->createToken('API Access Token');\n             $passportToken->token->save();\n@@ -207,9 +207,9 @@\n \n     public function verifyOtp(Request $request) {\n \n         $validation = Validator::make($request->all(), [\n-            'phone_number' => 'required',\n+            'mobile_number' => 'required',\n             'otp' => 'required',\n         ]);\n \n         if ($validation->fails()) {\n@@ -226,12 +226,12 @@\n         $data = $request->all();\n \n         $otp = randomOTP();\n         $resposeArray = array(\n-            'phone_number' => $request->get('phone_number'),\n+            'mobile_number' => $request->get('mobile_number'),\n             'otp' => $otp,\n         );\n-        $checkuser = User::where(['phone_number'=> $request->get('phone_number')])->count();\n+        $checkuser = User::where(['mobile_number'=> $request->get('mobile_number')])->count();\n         if($checkuser == 0){\n             $resp = [\n                 'status' => false,\n                 'data' => $resposeArray,\n@@ -241,9 +241,9 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-        $user = User::select('id', 'name', 'email', 'phone_number', 'otp', 'avatar', 'location')->where(['phone_number'=> $request->get('phone_number'), 'otp' => $request->otp])->first();\n+        $user = User::select('id', 'name', 'email', 'mobile_number', 'otp', 'avatar', 'location')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n        \n         if($user){\n             if(isset($data['device_token'])){\n                 $userProfileArr = array(\n@@ -291,9 +291,9 @@\n     public function resendOtp(Request $request)\n     {\n         $data = $request->all();\n         $validation = Validator::make($request->all(), [\n-            'phone_number' => 'required',\n+            'mobile_number' => 'required',\n         ]);\n \n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n@@ -307,16 +307,16 @@\n             return response()->json($resp, $this->statusCode);\n         }\n         $otp = randomOTP();\n         $resposeArray = array(\n-            'phone_number' => $request->get('phone_number'),\n+            'mobile_number' => $request->get('mobile_number'),\n             'otp' => $otp\n         );\n-        $user = User::where(['users.phone_number' => $data['phone_number'], 'role_id' => USER_ROLE])->count();\n+        $user = User::where(['users.mobile_number' => $data['mobile_number'], 'role_id' => USER_ROLE])->count();\n         if($user > 0){\n            \n-            DB::table('users')->where('phone_number', $data['phone_number'])->update(['otp' => $otp]);\n-            $user = User::where('users.phone_number', $data['phone_number'])->first();\n+            DB::table('users')->where('mobile_number', $data['mobile_number'])->update(['otp' => $otp]);\n+            $user = User::where('users.mobile_number', $data['mobile_number'])->first();\n             \n             $notify_message = $otp . ' is the OTP for accessing your MLM account. PLEASE DO NOT SHARE IT WITH ANYONE.';\n             $notification_data = ['type' => 'otp', 'message' => $notify_message, 'user_id' => $user->id];\n             $sendSms = sendGCMUser($user->device_token, 'Verify OTP', $notify_message, $user->device_type, $notification_data);\n@@ -529,17 +529,17 @@\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n \n-        $user = User::where('users.phone_number', $data['phone'])->count();\n+        $user = User::where('users.mobile_number', $data['phone'])->count();\n         if($user > 0){\n             $password = randomPassword();\n             $userProfileArr = array(\n                 'password' => Hash::make($password),\n             );\n \n-            DB::table('users')->where('phone_number', $data['phone'])->update($userProfileArr);\n-            $user = User::where('users.phone_number', $data['phone'])->first();\n+            DB::table('users')->where('mobile_number', $data['phone'])->update($userProfileArr);\n+            $user = User::where('users.mobile_number', $data['phone'])->first();\n             \n             $notify_message = $password . ' is the password for accessing your MLM account';\n             $notification_data = ['type' => 'forgot', 'message' => $notify_message, 'user_id' => $user->id];\n             $sendSms = sendGCMUser($user->device_token, 'Forgot password', $notify_message, $user->device_type, $notification_data);\n@@ -580,9 +580,9 @@\n         } \n \n         $userProfileArr = array(\n             'name' => isset($data['name']) && $data['name'] != '' ? $data['name'] : $user->name,\n-            'phone_number' => isset($data['phone']) && $data['phone'] != '' ? $data['phone'] : $user->phone_number,\n+            'mobile_number' => isset($data['phone']) && $data['phone'] != '' ? $data['phone'] : $user->mobile_number,\n             'email' => isset($data['email']) && $data['email'] != '' ? $data['email'] : $user->email,\n             'avatar' => $avatarImage,\n             'updated_at' => date('Y-m-d H:i:s'),\n         );\n@@ -738,9 +738,9 @@\n             return response()->json($resp, $this->statusCode);\n         }\n         \n         $status = $data['type'] == 1 ? array('N','A','P', 'AD', 'OD') : ($data['type'] == 2 ? array('DL') : array('CC', 'CB'));\n-        $odrderData = DB::table('orders')->select('orders.id as orderId', 'orders.created_at as orderTime', 'orders.order_otp as order_otp', 'orders.item_total as item_total', 'orders.bill_to_pay as bill_to_pay', 'orders.offer_discount as offer_discount', 'orders.restaurant_id', 'orders.status', 'users.name as driverName', 'users.phone_number as phone_number')->leftJoin('users', 'users.id', '=', 'orders.delivery_man_id')->where('user_id', $userID->id)->whereIn('orders.status', $status)->get();\n+        $odrderData = DB::table('orders')->select('orders.id as orderId', 'orders.created_at as orderTime', 'orders.order_otp as order_otp', 'orders.item_total as item_total', 'orders.bill_to_pay as bill_to_pay', 'orders.offer_discount as offer_discount', 'orders.restaurant_id', 'orders.status', 'users.name as driverName', 'users.mobile_number as mobile_number')->leftJoin('users', 'users.id', '=', 'orders.delivery_man_id')->where('user_id', $userID->id)->whereIn('orders.status', $status)->get();\n \n         if($odrderData){\n             $orderArray = array();\n             foreach($odrderData as $orderList){\n@@ -777,9 +777,9 @@\n                 $listCatRow['orderTime'] = date('M d, H:i A', $orderList->orderTime);\n                 $listCatRow['item_count'] = array_sum($iteamQuantityCount);\n                 $listCatRow['items'] = $iteamDetail;\n                 $listCatRow['driver_name'] = $orderList->driverName;\n-                $listCatRow['driver_location'] = $orderList->phone_number;\n+                $listCatRow['mobile_number'] = $orderList->mobile_number;\n                 $listCatRow['order_otp'] = $orderList->order_otp;\n                 $orderArray[] = $listCatRow;\n \n                 \n"
                },
                {
                    "date": 1627650500623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,23 +168,22 @@\n             'mobile_number' => $request->get('mobile_number'),\n             'otp' => $otp\n         );\n         if($checkuser == 0){\n-            $resp = [\n-                'status' => false,\n-                'data' => $resposeArray,\n-                'is_register' => 0,\n-                'message' => 'User not register',\n-                'error' => true,\n-                'errors' => '',\n+            $arr = [\n+                'role_id' => USER_ROLE,\n+                'phone_number' => $request->get('phone_number'),\n+                'email' => $request->get('email'),\n+                'password' => Hash::make('123456'),\n+                'status' => 0,\n+                'device_token' => $request->get('device_token'),\n+                'device_type' => $request->get('device_type'),\n+                'otp' => $otp\n             ];\n-            return response()->json($resp, $this->statusCode);\n+            $user = User::create($arr);\n         }   \n         \n         try {\n-            //$otp = randomOTP();\n-            \n-            User::where('mobile_number', $request->get('mobile_number'))->update(['otp'=>$otp]);\n             $user = User::where('mobile_number', $request->get('mobile_number'))->first();\n             // Save generated token\n             $notify_message = $otp . ' is the OTP for accessing your account. PLEASE DO NOT SHARE IT WITH ANYONE.';\n             $notification_data = ['type' => 'otp', 'message' => $notify_message, 'user_id' => $user->id];\n@@ -223,26 +222,8 @@\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n         $data = $request->all();\n-\n-        $otp = randomOTP();\n-        $resposeArray = array(\n-            'mobile_number' => $request->get('mobile_number'),\n-            'otp' => $otp,\n-        );\n-        $checkuser = User::where(['mobile_number'=> $request->get('mobile_number')])->count();\n-        if($checkuser == 0){\n-            $resp = [\n-                'status' => false,\n-                'data' => $resposeArray,\n-                'message' => 'User not register.',\n-                'is_register' => 0,\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n         $user = User::select('id', 'name', 'email', 'mobile_number', 'otp', 'avatar', 'location')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n        \n         if($user){\n             if(isset($data['device_token'])){\n"
                },
                {
                    "date": 1627650655027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,34 +221,19 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-        $data = $request->all();\n         $user = User::select('id', 'name', 'email', 'mobile_number', 'otp', 'avatar', 'location')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n        \n         if($user){\n-            if(isset($data['device_token'])){\n-                $userProfileArr = array(\n-                    'device_token' => $data['device_token'],\n-                    'device_type' => $data['device_type']\n-                );\n-                DB::table('users')->where('id', $user->id)->update($userProfileArr);\n-            }\n             DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n             $passportToken->token->save();\n             $token = $passportToken->accessToken;\n             \n-            $checkLocation = DB::table('user_addresses')->select('location', 'latitude', 'longitude')->where(['user_id'=> $user->id])->first();\n-            $user->location = $checkLocation && $checkLocation->location ? $checkLocation->location : '';\n-            $user->lat = $checkLocation && $checkLocation->latitude ? $checkLocation->latitude : '';\n-            $user->lng = $checkLocation && $checkLocation->longitude ? $checkLocation->longitude : '';\n-            \n             $resp = [\n                 'status' => true,\n                 'data' => $user,\n-                \n-                'is_location' => isset($checkLocation->location) && $checkLocation->location != '' ? 1 : 0,\n                 'is_register' => 1,\n                 'token' => $token,\n                 'message' => 'success',\n                 'error' => false,\n"
                },
                {
                    "date": 1627650662613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,9 +237,8 @@\n                 'token' => $token,\n                 'message' => 'success',\n                 'error' => false,\n                 'errors' => '',\n-                'user_path' => env('APP_URL').'/public/images/profile/',\n             ];\n         }else{\n             $resp = [\n                 'status' => false,\n"
                },
                {
                    "date": 1627650686642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n         );\n         if($checkuser == 0){\n             $arr = [\n                 'role_id' => USER_ROLE,\n-                'phone_number' => $request->get('phone_number'),\n+                'mobile_number' => $request->get('mobile_number'),\n                 'email' => $request->get('email'),\n                 'password' => Hash::make('123456'),\n                 'status' => 0,\n                 'device_token' => $request->get('device_token'),\n@@ -241,9 +241,9 @@\n             ];\n         }else{\n             $resp = [\n                 'status' => false,\n-                'data' => $resposeArray,\n+                'data' => '',\n                 'message' => 'Otp not verified.',\n                 'error' => true,\n                 'errors' => '',\n             ];\n"
                },
                {
                    "date": 1627650745369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,8 @@\n         if($checkuser == 0){\n             $arr = [\n                 'role_id' => USER_ROLE,\n                 'mobile_number' => $request->get('mobile_number'),\n-                'email' => $request->get('email'),\n                 'password' => Hash::make('123456'),\n                 'status' => 0,\n                 'device_token' => $request->get('device_token'),\n                 'device_type' => $request->get('device_type'),\n"
                },
                {
                    "date": 1627650902864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,8 +178,10 @@\n                 'device_type' => $request->get('device_type'),\n                 'otp' => $otp\n             ];\n             $user = User::create($arr);\n+        }else{\n+            User::where('phone_number', $request->get('phone_number'))->update(['otp'=>$otp]);\n         }   \n         \n         try {\n             $user = User::where('mobile_number', $request->get('mobile_number'))->first();\n"
                },
                {
                    "date": 1627651130734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,9 @@\n                 'otp' => $otp\n             ];\n             $user = User::create($arr);\n         }else{\n-            User::where('phone_number', $request->get('phone_number'))->update(['otp'=>$otp]);\n+            User::where('mobile_number', $request->get('mobile_number'))->update(['otp'=>$otp]);\n         }   \n         \n         try {\n             $user = User::where('mobile_number', $request->get('mobile_number'))->first();\n@@ -222,9 +222,9 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-        $user = User::select('id', 'name', 'email', 'mobile_number', 'otp', 'avatar', 'location')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n+        $user = User::select('id', 'name', 'email', 'mobile_number', 'otp')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n        \n         if($user){\n             DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n"
                },
                {
                    "date": 1627654042291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,8 +253,9 @@\n        \n         return response()->json($resp, $this->statusCode);\n \n     }\n+\n     public function resendOtp(Request $request)\n     {\n         $data = $request->all();\n         $validation = Validator::make($request->all(), [\n@@ -307,8 +308,9 @@\n         }\n         return response()->json($resp, $this->statusCode);\n \n     }\n+    \n     public function getCountries()\n     {\n         $countries = Countries::get();\n        \n"
                },
                {
                    "date": 1627654120319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,9 +308,13 @@\n         }\n         return response()->json($resp, $this->statusCode);\n \n     }\n-    \n+\n+    public function socialLogin(Request $request){\n+\n+    }\n+\n     public function getCountries()\n     {\n         $countries = Countries::get();\n        \n"
                },
                {
                    "date": 1627655186544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,28 @@\n \n     }\n \n     public function socialLogin(Request $request){\n-\n+        $validation = Validator::make($request->all(), [\n+            'name' => 'required',\n+            'mobile_number' => 'required|regex:/^[0-9]{9,12}$/',\n+            'email' => 'required|email',\n+            'device_token' =>'required',\n+            'device_id' =>'required',\n+            'device_type' =>'required',\n+        ]);\n+        $data = $request->all();\n+        if ($validation->fails()) {\n+            //return $this->throwValidation($validation->messages()->first());\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => $validation->messages()->first(),\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        }\n     }\n \n     public function getCountries()\n     {\n"
                },
                {
                    "date": 1627666295650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,8 +330,18 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n+\n+        $arr = [\n+            'role_id' => USER_ROLE,\n+            'mobile_number' => $request->get('mobile_number'),\n+            'password' => Hash::make('123456'),\n+            'status' => 1,\n+            'device_token' => $request->get('device_token'),\n+            'device_type' => $request->get('device_type'),\n+        ];\n+        $user = User::create($arr);\n     }\n \n     public function getCountries()\n     {\n"
                },
                {
                    "date": 1627666390602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,8 +333,11 @@\n         }\n \n         $arr = [\n             'role_id' => USER_ROLE,\n+            'name' => $request->get('name'),\n+            'email' => $request->get('email'),\n+            'user_name' => explode('@', $request->get('email'))[0],\n             'mobile_number' => $request->get('mobile_number'),\n             'password' => Hash::make('123456'),\n             'status' => 1,\n             'device_token' => $request->get('device_token'),\n"
                },
                {
                    "date": 1627666466760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -343,8 +343,37 @@\n             'device_token' => $request->get('device_token'),\n             'device_type' => $request->get('device_type'),\n         ];\n         $user = User::create($arr);\n+\n+        $user = User::select('id', 'name', 'email', 'mobile_number', 'otp')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n+       \n+        if($user){\n+            DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n+            $passportToken = $user->createToken('API Access Token');\n+            $passportToken->token->save();\n+            $token = $passportToken->accessToken;\n+            \n+            $resp = [\n+                'status' => true,\n+                'data' => $user,\n+                'is_register' => 1,\n+                'token' => $token,\n+                'message' => 'success',\n+                'error' => false,\n+                'errors' => '',\n+            ];\n+        }else{\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => 'Something went wrong.',\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+        }\n+\n+        return response()->json($resp, $this->statusCode);\n     }\n \n     public function getCountries()\n     {\n"
                },
                {
                    "date": 1627666493968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -344,9 +344,9 @@\n             'device_type' => $request->get('device_type'),\n         ];\n         $user = User::create($arr);\n \n-        $user = User::select('id', 'name', 'email', 'mobile_number', 'otp')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n+        $user = User::select('id', 'name', 'email', 'mobile_number', 'otp')->where(['mobile_number'=> $request->get('mobile_number')])->first();\n        \n         if($user){\n             DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n"
                },
                {
                    "date": 1627666501197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -347,9 +347,8 @@\n \n         $user = User::select('id', 'name', 'email', 'mobile_number', 'otp')->where(['mobile_number'=> $request->get('mobile_number')])->first();\n        \n         if($user){\n-            DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n             $passportToken->token->save();\n             $token = $passportToken->accessToken;\n             \n"
                },
                {
                    "date": 1627666541939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,8 +339,10 @@\n             'user_name' => explode('@', $request->get('email'))[0],\n             'mobile_number' => $request->get('mobile_number'),\n             'password' => Hash::make('123456'),\n             'status' => 1,\n+            'social_id' => $request->get('social_id'),\n+            'login_type' => $request->get('login_type'),\n             'device_token' => $request->get('device_token'),\n             'device_type' => $request->get('device_type'),\n         ];\n         $user = User::create($arr);\n"
                },
                {
                    "date": 1627666581606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,10 +339,10 @@\n             'user_name' => explode('@', $request->get('email'))[0],\n             'mobile_number' => $request->get('mobile_number'),\n             'password' => Hash::make('123456'),\n             'status' => 1,\n-            'social_id' => $request->get('social_id'),\n-            'login_type' => $request->get('login_type'),\n+            'social_id' => isset($request->get('social_id')) ? $request->get('social_id') : '',\n+            'login_type' => isset($request->get('login_type')) ? $request->get('login_type') : '',\n             'device_token' => $request->get('device_token'),\n             'device_type' => $request->get('device_type'),\n         ];\n         $user = User::create($arr);\n"
                },
                {
                    "date": 1627666637311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,10 +339,10 @@\n             'user_name' => explode('@', $request->get('email'))[0],\n             'mobile_number' => $request->get('mobile_number'),\n             'password' => Hash::make('123456'),\n             'status' => 1,\n-            'social_id' => isset($request->get('social_id')) ? $request->get('social_id') : '',\n-            'login_type' => isset($request->get('login_type')) ? $request->get('login_type') : '',\n+            'social_id' => $request->get('social_id') != null ? $request->get('social_id') : '',\n+            'login_type' => $request->get('login_type') != null ? $request->get('login_type') : '',\n             'device_token' => $request->get('device_token'),\n             'device_type' => $request->get('device_type'),\n         ];\n         $user = User::create($arr);\n"
                },
                {
                    "date": 1627666701676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -340,9 +340,9 @@\n             'mobile_number' => $request->get('mobile_number'),\n             'password' => Hash::make('123456'),\n             'status' => 1,\n             'social_id' => $request->get('social_id') != null ? $request->get('social_id') : '',\n-            'login_type' => $request->get('login_type') != null ? $request->get('login_type') : '',\n+            'login_type' => $request->get('social_type') != null ? $request->get('social_type') : '',\n             'device_token' => $request->get('device_token'),\n             'device_type' => $request->get('device_type'),\n         ];\n         $user = User::create($arr);\n"
                },
                {
                    "date": 1627666902378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,9 +346,9 @@\n             'device_type' => $request->get('device_type'),\n         ];\n         $user = User::create($arr);\n \n-        $user = User::select('id', 'name', 'email', 'mobile_number', 'otp')->where(['mobile_number'=> $request->get('mobile_number')])->first();\n+        $user = User::select('id', 'name', 'email', 'mobile_number')->where(['mobile_number'=> $request->get('mobile_number')])->first();\n        \n         if($user){\n             $passportToken = $user->createToken('API Access Token');\n             $passportToken->token->save();\n"
                },
                {
                    "date": 1627666926243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,9 +346,9 @@\n             'device_type' => $request->get('device_type'),\n         ];\n         $user = User::create($arr);\n \n-        $user = User::select('id', 'name', 'email', 'mobile_number')->where(['mobile_number'=> $request->get('mobile_number')])->first();\n+        $user = User::select('id', 'name', 'email', 'mobile_number')->where(['id'=> $user->id])->first();\n        \n         if($user){\n             $passportToken = $user->createToken('API Access Token');\n             $passportToken->token->save();\n"
                },
                {
                    "date": 1627667196181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,25 +330,29 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-\n-        $arr = [\n-            'role_id' => USER_ROLE,\n-            'name' => $request->get('name'),\n-            'email' => $request->get('email'),\n-            'user_name' => explode('@', $request->get('email'))[0],\n-            'mobile_number' => $request->get('mobile_number'),\n-            'password' => Hash::make('123456'),\n-            'status' => 1,\n-            'social_id' => $request->get('social_id') != null ? $request->get('social_id') : '',\n-            'login_type' => $request->get('social_type') != null ? $request->get('social_type') : '',\n-            'device_token' => $request->get('device_token'),\n-            'device_type' => $request->get('device_type'),\n-        ];\n-        $user = User::create($arr);\n-\n-        $user = User::select('id', 'name', 'email', 'mobile_number')->where(['id'=> $user->id])->first();\n+        $checkuser = User::where(['mobile_number' => $request->get('mobile_number'), 'email' => $request->get('email')])->count();\n+        if($checkuser == 0){\n+            $arr = [\n+                'role_id' => USER_ROLE,\n+                'name' => $request->get('name'),\n+                'email' => $request->get('email'),\n+                'user_name' => explode('@', $request->get('email'))[0],\n+                'mobile_number' => $request->get('mobile_number'),\n+                'password' => Hash::make('123456'),\n+                'status' => 1,\n+                'social_id' => $request->get('social_id') != null ? $request->get('social_id') : '',\n+                'login_type' => $request->get('social_type') != null ? $request->get('social_type') : '',\n+                'device_token' => $request->get('device_token'),\n+                'device_type' => $request->get('device_type'),\n+            ];\n+            $user = User::create($arr);\n+            $user = User::select('id', 'name', 'email', 'mobile_number')->where(['id'=> $user->id])->first();\n+        }else{\n+            $user = User::select('id', 'name', 'email', 'mobile_number')->where(['email'=> $request->get('email')])->first();    \n+        }\n+        \n        \n         if($user){\n             $passportToken = $user->createToken('API Access Token');\n             $passportToken->token->save();\n"
                },
                {
                    "date": 1627670328774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,10 +311,8 @@\n     }\n \n     public function socialLogin(Request $request){\n         $validation = Validator::make($request->all(), [\n-            'name' => 'required',\n-            'mobile_number' => 'required|regex:/^[0-9]{9,12}$/',\n             'email' => 'required|email',\n             'device_token' =>'required',\n             'device_id' =>'required',\n             'device_type' =>'required',\n"
                },
                {
                    "date": 1627670404833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -332,18 +332,18 @@\n         $checkuser = User::where(['mobile_number' => $request->get('mobile_number'), 'email' => $request->get('email')])->count();\n         if($checkuser == 0){\n             $arr = [\n                 'role_id' => USER_ROLE,\n-                'name' => $request->get('name'),\n+                'name' => $request->get('name') != null ? $request->get('name') : '',\n                 'email' => $request->get('email'),\n                 'user_name' => explode('@', $request->get('email'))[0],\n-                'mobile_number' => $request->get('mobile_number'),\n+                'mobile_number' => $request->get('mobile_number') != null ? $request->get('mobile_number') : '',\n                 'password' => Hash::make('123456'),\n                 'status' => 1,\n                 'social_id' => $request->get('social_id') != null ? $request->get('social_id') : '',\n                 'login_type' => $request->get('social_type') != null ? $request->get('social_type') : '',\n-                'device_token' => $request->get('device_token'),\n-                'device_type' => $request->get('device_type'),\n+                'device_token' => $request->get('device_token') != null ? $request->get('device_token') : '',\n+                'device_type' => $request->get('device_type') != null ? $request->get('device_type') : '',\n             ];\n             $user = User::create($arr);\n             $user = User::select('id', 'name', 'email', 'mobile_number')->where(['id'=> $user->id])->first();\n         }else{\n"
                },
                {
                    "date": 1627670434984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,11 +312,8 @@\n \n     public function socialLogin(Request $request){\n         $validation = Validator::make($request->all(), [\n             'email' => 'required|email',\n-            'device_token' =>'required',\n-            'device_id' =>'required',\n-            'device_type' =>'required',\n         ]);\n         $data = $request->all();\n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n"
                },
                {
                    "date": 1627670454762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,9 +325,9 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-        $checkuser = User::where(['mobile_number' => $request->get('mobile_number'), 'email' => $request->get('email')])->count();\n+        $checkuser = User::where(['email' => $request->get('email')])->count();\n         if($checkuser == 0){\n             $arr = [\n                 'role_id' => USER_ROLE,\n                 'name' => $request->get('name') != null ? $request->get('name') : '',\n"
                },
                {
                    "date": 1627919801862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -632,289 +632,9 @@\n         ];\n         return response()->json($resp, $this->statusCode);\n     }\n \n-    public function addAddress(Request $request)\n-    {\n-        $user = Auth::user();\n-        $data = $request->all();\n-        \n-        $validation = Validator::make($request->all(), [\n-            'location' => 'required',\n-            'address_type' => 'required',\n-        ]);\n-\n-        if ($validation->fails()) {\n-            //return $this->throwValidation($validation->messages()->first());\n-            $resp = [\n-                'status' => true,\n-                'data' => '',\n-                'message' => $validation->messages()->first(),\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n-        $latlong = get_lat_long($data['location']); // create a function with the name \"get_lat_long\" given as below\n-        $map = explode(',', $latlong);\n-        $lat = $map[0];\n-        $lng = $map[1];\n-        $defaultSet = 0;\n-        $checkAddressExist = DB::table('user_addresses')->where('user_id', $user->id)->count();\n-        if($checkAddressExist == 0){\n-            $defaultSet = 1;\n-        }\n-        $userAddressArr = array(\n-            'user_id' => $user->id,\n-            'location' => $data['location'],\n-            'area' => isset($data['area']) && $data['area'] != '' ? $data['area'] : '',\n-            'house_no' => isset($data['flat_no']) && $data['flat_no'] != '' ? $data['flat_no'] : '',\n-            'landmark' => isset($data['landmark']) && $data['landmark'] != '' ? $data['landmark'] : '',\n-            'type' => $data['address_type'] == 1 ? 'HOME' : ($data['address_type'] == 2 ? 'WORK' : 'OTHER'), \n-            'latitude' => $lat,\n-            'longitude' => $lng,\n-            'is_default' => $defaultSet,\n-            'created_at' => time(),\n-            'updated_at' => time(),\n-        );\n-\n-        DB::table('user_addresses')->insert($userAddressArr);\n-\n-        $resp = [\n-            'status' => true,\n-            'data' => '',\n-            'message' => 'Address add successfully.',\n-            'error' => false,\n-            'errors' => '',\n-            //'image_path' => env('ASSET_URL') . '/images/profile'\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-    }\n-\n-    public function updateAddress(Request $request)\n-    {\n-        $user = Auth::user();\n-        $data = $request->all();\n-        \n-        $validation = Validator::make($request->all(), [\n-            'location' => 'required',\n-            'address_type' => 'required',\n-        ]);\n-\n-        if ($validation->fails()) {\n-            //return $this->throwValidation($validation->messages()->first());\n-            $resp = [\n-                'status' => true,\n-                'data' => '',\n-                'message' => $validation->messages()->first(),\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n-        $latlong = get_lat_long($data['location']); // create a function with the name \"get_lat_long\" given as below\n-        $map = explode(',', $latlong);\n-        $lat = $map[0];\n-        $lng = $map[1];\n-\n-        $userAddressArr = array(\n-            'location' => $data['location'],\n-            'area' => isset($data['area']) && $data['area'] != '' ? $data['area'] : '',\n-            'flat_no' => isset($data['flat_no']) && $data['flat_no'] != '' ? $data['flat_no'] : '',\n-            'landmark' => isset($data['landmark']) && $data['landmark'] != '' ? $data['landmark'] : '',\n-            'address_type' =>$data['address_type'], \n-            'lat' => $lat,\n-            'lng' => $lng,\n-            'updated_at' => date('Y-m-d H:i:s'),\n-        );\n-\n-        DB::table('users')->where('id', $user->id)->update($userAddressArr);\n-\n-        $resp = [\n-            'status' => true,\n-            'data' => '',\n-            'message' => 'Updated Successfully.',\n-            'error' => false,\n-            'errors' => '',\n-            //'image_path' => env('ASSET_URL') . '/images/profile'\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-    }\n-\n-    public function addressList(Request $request){\n-        $user = Auth::user();\n-        $userAddress = DB::table('user_addresses')->where('user_id', $user->id)->get();\n-        $resp = [\n-            'status' => true,\n-            'data' => $userAddress,\n-            'message' => 'Success.',\n-            'error' => false,\n-            'errors' => '',\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-    }\n-\n-    public function orderList(Request $request){\n-        $userID = Auth::user();\n-        $validation = Validator::make($request->all(), [\n-            'type' => 'required',\n-        ]);\n-        $data = $request->all();\n-        if ($validation->fails()) {\n-            //return $this->throwValidation($validation->messages()->first());\n-            $resp = [\n-                'status' => false,\n-                'data' => '',\n-                'message' => $validation->messages()->first(),\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n-        \n-        $status = $data['type'] == 1 ? array('N','A','P', 'AD', 'OD') : ($data['type'] == 2 ? array('DL') : array('CC', 'CB'));\n-        $odrderData = DB::table('orders')->select('orders.id as orderId', 'orders.created_at as orderTime', 'orders.order_otp as order_otp', 'orders.item_total as item_total', 'orders.bill_to_pay as bill_to_pay', 'orders.offer_discount as offer_discount', 'orders.restaurant_id', 'orders.status', 'users.name as driverName', 'users.mobile_number as mobile_number')->leftJoin('users', 'users.id', '=', 'orders.delivery_man_id')->where('user_id', $userID->id)->whereIn('orders.status', $status)->get();\n-\n-        if($odrderData){\n-            $orderArray = array();\n-            foreach($odrderData as $orderList){\n-                $getOrderItem = OrderItem::where('order_id', $orderList->orderId)->take(4)->get();\n-                $iteamDetail = $iteamQuantityCount = array();\n-                foreach($getOrderItem as $itemList){\n-                    $rowItem['name'] = $itemList->name;\n-                    $rowItem['price'] = $itemList->total_price;\n-                    $rowItem['image'] = $itemList->image;\n-                    $rowItem['is_nonveg'] = $itemList->is_nonveg;\n-                    $rowItem['quantity'] = $itemList->quantity;\n-                    $iteamQuantityCount[] = $itemList->quantity;\n-                    $iteamDetail[] = $rowItem;\n-                }\n-\n-                $getRestaurant = Restaurant::where('id', $orderList->restaurant_id)->first();\n-                $listCatRow['res_id'] = $getRestaurant->id;\n-                $listCatRow['name'] = $getRestaurant->name;\n-                $listCatRow['description'] = $getRestaurant->description;\n-                $listCatRow['rating'] = '0.00';\n-                $listCatRow['deliverytime'] = '48 mins';\n-                $listCatRow['two_person_price'] = $getRestaurant->two_person_price;\n-                $listCatRow['image'] = env('APP_URL').'/storage/app/public/restaurants/'.$getRestaurant->image;\n-                $listCatRow['driver_charge'] = Voyager::setting('site.driver_charges', '');\n-                $listCatRow['admin_charge'] = Voyager::setting('site.admin_charge', '');\n-                $userAddress = DB::table('user_addresses')->where('user_id', $userID->id)->first();\n-                $listCatRow['id'] = $orderList->orderId;\n-                $listCatRow['order_id'] = '#RES'.$orderList->orderId;\n-                $listCatRow['user_address'] = isset($userAddress->location) && $userAddress->location != '' ? $userAddress->location : '';\n-                $listCatRow['item_total'] = $orderList->item_total;\n-                $listCatRow['total_amount'] = $orderList->bill_to_pay;\n-                $listCatRow['discount'] = $orderList->offer_discount;\n-                $listCatRow['status'] = $orderList->status;\n-                $listCatRow['orderTime'] = date('M d, H:i A', $orderList->orderTime);\n-                $listCatRow['item_count'] = array_sum($iteamQuantityCount);\n-                $listCatRow['items'] = $iteamDetail;\n-                $listCatRow['driver_name'] = $orderList->driverName;\n-                $listCatRow['mobile_number'] = $orderList->mobile_number;\n-                $listCatRow['order_otp'] = $orderList->order_otp;\n-                $orderArray[] = $listCatRow;\n-\n-                \n-            }\n-            $status = true;\n-            $data = $orderArray;\n-            $message = 'orders';\n-            $error = false;\n-        }else{\n-            $status = false;\n-            $data = '';\n-            $message = 'Orders not found.';\n-            $error = true;\n-        }\n-        $resp = [\n-            'status' => $status,\n-            'data' => $orderArray,\n-            'message' => $message,\n-            'error' => $error,\n-            'errors' => '',\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-    }\n-\n-    public function orderDetail(Request $request){\n-        $userID = Auth::user();\n-        $validation = Validator::make($request->all(), [\n-            'order_id' => 'required',\n-        ]);\n-        $data = $request->all();\n-        if ($validation->fails()) {\n-            //return $this->throwValidation($validation->messages()->first());\n-            $resp = [\n-                'status' => false,\n-                'data' => '',\n-                'message' => $validation->messages()->first(),\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n-\n-        $getOrderDetail = Order::select('orders.id as orderId','orders.user_id as user_id', 'orders.created_at as orderTime', 'orders.payment_type as paymentType', 'orders.item_total as item_total', 'orders.bill_to_pay as bill_to_pay', 'orders.offer_discount as offer_discount', 'orders.status as status', 'usr.name as userName', 'usr.location as userLocation', 'restaurant.name as resName', 'restaurant.location as resLocation', 'driver.name as driverName', 'orders.restaurant_id', 'usrAdd.location', 'usrAdd.type')->leftJoin('users as restaurant', 'restaurant.id', '=', 'orders.restaurant_id')->leftJoin('users as usr', 'usr.id', '=', 'orders.user_id')->leftJoin('users as driver', 'driver.id', '=', 'orders.delivery_man_id')->leftJoin('user_addresses as usrAdd', 'usrAdd.id', '=', 'orders.user_address_id')->where('orders.id', $data['order_id'])->first();\n-        if($getOrderDetail){\n-        $getOrderItem = OrderItem::where('order_id', $getOrderDetail->orderId)->get();\n-        $iteamDetail = array();\n-        foreach($getOrderItem as $itemList){\n-            $rowItem['name'] = $itemList->name;\n-            $rowItem['is_nonveg'] = $itemList->is_nonveg;\n-            $rowItem['price'] = $itemList->total_price;\n-            $rowItem['quantity'] = $itemList->quantity;\n-            $iteamDetail[] = $rowItem;\n-        }\n-        $getRestaurant = Restaurant::where('id', $getOrderDetail->restaurant_id)->first();\n-        $orderArray['res_id'] = $getRestaurant->id;\n-        $orderArray['name'] = $getRestaurant->name;\n-        $orderArray['description'] = $getRestaurant->description;\n-        $orderArray['rating'] = '0.00';\n-        $orderArray['deliverytime'] = '48 mins';\n-        $orderArray['two_person_price'] = $getRestaurant->two_person_price;\n-        $orderArray['image'] = env('APP_URL').'/storage/app/public/restaurants/'.$getRestaurant->image;\n-        $orderArray['driver_charge'] = Voyager::setting('site.driver_charges', '');\n-        $orderArray['admin_charge'] = Voyager::setting('site.admin_charge', '');\n-\n-        $getUserDetail = User::where('id', $getOrderDetail->user_id)->first();\n-        $orderArray['userName'] = $getOrderDetail->userName;\n-        $orderArray['userLocation'] = $getOrderDetail->location;\n-        $orderArray['locationType'] = $getOrderDetail->type;\n-        $orderArray['resName'] = $getOrderDetail->resName;\n-        $orderArray['resLocation'] = $getOrderDetail->resLocation;\n-        $orderArray['orderTime'] = date('F d, H:i A', $getOrderDetail->orderTime);\n-        $orderArray['driverName'] = $getOrderDetail->driverName;\n-        $orderArray['paymentType'] = $getOrderDetail->paymentType;\n-        $orderArray['items'] = $iteamDetail;\n-        $orderArray['item_total'] = $getOrderDetail->item_total;\n-        $orderArray['total_amount'] = $getOrderDetail->bill_to_pay;\n-        $orderArray['discount'] = $getOrderDetail->offer_discount;\n-        $orderArray['status'] = $getOrderDetail->status;\n-        $orderArray['cgst'] = '0.00';\n-        $orderArray['sgst'] = '0.00';\n-        $orderArray['delivery_charges'] = Voyager::setting('site.driver_charges', '');\n-            $resp = [\n-                'status' => true,\n-                'data' => $orderArray,\n-                'message' => 'Success',\n-                'error' => false,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }else{\n-            $resp = [\n-                'status' => false,\n-                'data' => '',\n-                'message' => 'Order not found',\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n-    }\n-\n+ \n     public function cmsPage(Request $request)\n     {\n         $userID = Auth::user();\n         $data = $request->all();\n"
                },
                {
                    "date": 1627919838598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -753,40 +753,9 @@\n             echo $response;\n         }\n     }\n \n-    public function enquiry(Request $request)\n-    {\n-        $validation = Validator::make($request->all(), [\n-            'name' => 'required',\n-            'email' => 'required',\n-            'message' => 'required',\n-        ]);\n-        $data = $request->all();\n-        if ($validation->fails()) {\n-            $resp = [\n-                'status' => false,\n-                'data' => '',\n-                'message' => $validation->messages()->first(),\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n-        $input['name'] = $data['name'];\n-        $input['email'] = $data['email'];\n-        $input['message'] = $data['message'];\n-        $post = Enquiry::create($input);\n-\n-        $resp = [\n-            'status' => true,\n-            'data' => $post,\n-            'message' => 'Comment Successfully.',\n-            'error' => false,\n-            'errors' => '',\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-\n+    public function getMediaList(Request $request){\n+        \n     }\n     \n-    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1627920242560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -754,8 +754,26 @@\n         }\n     }\n \n     public function getMediaList(Request $request){\n-        \n+\n+        $data =  array();\n+        $imageData =  array();\n+        $imageData['id'] = 1;\n+        $imageData['image'] = '';\n+        $imageData['thumbnail'] = '';\n+        $data['id'] = 1;\n+        $data['type'] = 'image';\n+        $data['image_array'] = $imageData;\n+\n+        $resp = [\n+            'status' => true,\n+            'data' => $data,\n+            'message' => 'success',\n+            'error' => false,\n+            'errors' => '',\n+            'user_path' => env('APP_URL').'/public/images/profile/',\n+        ];\n+        return response()->json($resp, $this->statusCode);\n     }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1627920286780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -756,15 +756,16 @@\n \n     public function getMediaList(Request $request){\n \n         $data =  array();\n-        $imageData =  array();\n+        $imageData =  $imageDataArray = array();\n         $imageData['id'] = 1;\n         $imageData['image'] = '';\n         $imageData['thumbnail'] = '';\n+        $imageDataArray[] = $imageData;\n         $data['id'] = 1;\n         $data['type'] = 'image';\n-        $data['image_array'] = $imageData;\n+        $data['image_array'] = $imageDataArray;\n \n         $resp = [\n             'status' => true,\n             'data' => $data,\n"
                },
                {
                    "date": 1627920454631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -764,8 +764,16 @@\n         $imageDataArray[] = $imageData;\n         $data['id'] = 1;\n         $data['type'] = 'image';\n         $data['image_array'] = $imageDataArray;\n+        $data['name'] = 'Praveen Singh';\n+        $data['nick_name'] = '@praveen_singh';\n+        $data['user_image'] = '';\n+        $data['user_thumb_image'] = '';\n+        $data['is_like'] = true;\n+        $data['comments_count'] = '26M';\n+        $data['share_post'] = '';\n+        $data['is_follow'] = true;\n \n         $resp = [\n             'status' => true,\n             'data' => $data,\n"
                },
                {
                    "date": 1627920508527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -772,9 +772,9 @@\n         $data['is_like'] = true;\n         $data['comments_count'] = '26M';\n         $data['share_post'] = '';\n         $data['is_follow'] = true;\n-\n+        \n         $resp = [\n             'status' => true,\n             'data' => $data,\n             'message' => 'success',\n"
                },
                {
                    "date": 1627920557366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -753,9 +753,9 @@\n             echo $response;\n         }\n     }\n \n-    public function getMediaList(Request $request){\n+    public function getHomeList(Request $request){\n \n         $data =  array();\n         $imageData =  $imageDataArray = array();\n         $imageData['id'] = 1;\n"
                },
                {
                    "date": 1627920590657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -783,6 +783,38 @@\n             'user_path' => env('APP_URL').'/public/images/profile/',\n         ];\n         return response()->json($resp, $this->statusCode);\n     }\n+\n+\n+    public function getReelsList(Request $request){\n+\n+        $data =  array();\n+        $imageData =  $imageDataArray = array();\n+        $imageData['id'] = 1;\n+        $imageData['image'] = '';\n+        $imageData['thumbnail'] = '';\n+        $imageDataArray[] = $imageData;\n+        $data['id'] = 1;\n+        $data['type'] = 'image';\n+        $data['image_array'] = $imageDataArray;\n+        $data['name'] = 'Praveen Singh';\n+        $data['nick_name'] = '@praveen_singh';\n+        $data['user_image'] = '';\n+        $data['user_thumb_image'] = '';\n+        $data['is_like'] = true;\n+        $data['comments_count'] = '26M';\n+        $data['share_post'] = '';\n+        $data['is_follow'] = true;\n+        \n+        $resp = [\n+            'status' => true,\n+            'data' => $data,\n+            'message' => 'success',\n+            'error' => false,\n+            'errors' => '',\n+            'user_path' => env('APP_URL').'/public/images/profile/',\n+        ];\n+        return response()->json($resp, $this->statusCode);\n+    }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1627920633273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -788,16 +788,11 @@\n \n     public function getReelsList(Request $request){\n \n         $data =  array();\n-        $imageData =  $imageDataArray = array();\n-        $imageData['id'] = 1;\n-        $imageData['image'] = '';\n-        $imageData['thumbnail'] = '';\n-        $imageDataArray[] = $imageData;\n         $data['id'] = 1;\n-        $data['type'] = 'image';\n-        $data['image_array'] = $imageDataArray;\n+        $data['type'] = 'video';\n+        $data['video_url'] = '';\n         $data['name'] = 'Praveen Singh';\n         $data['nick_name'] = '@praveen_singh';\n         $data['user_image'] = '';\n         $data['user_thumb_image'] = '';\n"
                },
                {
                    "date": 1627920900212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -758,9 +758,9 @@\n \n         $data =  array();\n         $imageData =  $imageDataArray = array();\n         $imageData['id'] = 1;\n-        $imageData['image'] = '';\n+        $imageData['image'] = 'http://decentinfotech.com/tic-tok/storage/app/public/posts/image1.jpeg';\n         $imageData['thumbnail'] = '';\n         $imageDataArray[] = $imageData;\n         $data['id'] = 1;\n         $data['type'] = 'image';\n"
                },
                {
                    "date": 1627920914175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -759,9 +759,9 @@\n         $data =  array();\n         $imageData =  $imageDataArray = array();\n         $imageData['id'] = 1;\n         $imageData['image'] = 'http://decentinfotech.com/tic-tok/storage/app/public/posts/image1.jpeg';\n-        $imageData['thumbnail'] = '';\n+        $imageData['thumbnail'] = 'http://decentinfotech.com/tic-tok/storage/app/public/posts/image1.jpeg';\n         $imageDataArray[] = $imageData;\n         $data['id'] = 1;\n         $data['type'] = 'image';\n         $data['image_array'] = $imageDataArray;\n"
                },
                {
                    "date": 1627921016535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -766,10 +766,10 @@\n         $data['type'] = 'image';\n         $data['image_array'] = $imageDataArray;\n         $data['name'] = 'Praveen Singh';\n         $data['nick_name'] = '@praveen_singh';\n-        $data['user_image'] = '';\n-        $data['user_thumb_image'] = '';\n+        $data['user_image'] = 'http://decentinfotech.com/tic-tok/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $data['user_thumb_image'] = 'http://decentinfotech.com/tic-tok/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n         $data['is_like'] = true;\n         $data['comments_count'] = '26M';\n         $data['share_post'] = '';\n         $data['is_follow'] = true;\n"
                },
                {
                    "date": 1627921036599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -793,10 +793,10 @@\n         $data['type'] = 'video';\n         $data['video_url'] = '';\n         $data['name'] = 'Praveen Singh';\n         $data['nick_name'] = '@praveen_singh';\n-        $data['user_image'] = '';\n-        $data['user_thumb_image'] = '';\n+        $data['user_image'] = 'http://decentinfotech.com/tic-tok/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $data['user_thumb_image'] = 'http://decentinfotech.com/tic-tok/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n         $data['is_like'] = true;\n         $data['comments_count'] = '26M';\n         $data['share_post'] = '';\n         $data['is_follow'] = true;\n"
                },
                {
                    "date": 1627921118231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -790,9 +790,9 @@\n \n         $data =  array();\n         $data['id'] = 1;\n         $data['type'] = 'video';\n-        $data['video_url'] = '';\n+        $data['video_url'] = 'http://decentinfotech.com/tic-tok/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n         $data['name'] = 'Praveen Singh';\n         $data['nick_name'] = '@praveen_singh';\n         $data['user_image'] = 'http://decentinfotech.com/tic-tok/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n         $data['user_thumb_image'] = 'http://decentinfotech.com/tic-tok/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n"
                },
                {
                    "date": 1627921217329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -758,18 +758,18 @@\n \n         $data =  array();\n         $imageData =  $imageDataArray = array();\n         $imageData['id'] = 1;\n-        $imageData['image'] = 'http://decentinfotech.com/tic-tok/storage/app/public/posts/image1.jpeg';\n-        $imageData['thumbnail'] = 'http://decentinfotech.com/tic-tok/storage/app/public/posts/image1.jpeg';\n+        $imageData['image'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n+        $imageData['thumbnail'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n         $imageDataArray[] = $imageData;\n         $data['id'] = 1;\n         $data['type'] = 'image';\n         $data['image_array'] = $imageDataArray;\n         $data['name'] = 'Praveen Singh';\n         $data['nick_name'] = '@praveen_singh';\n-        $data['user_image'] = 'http://decentinfotech.com/tic-tok/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $data['user_thumb_image'] = 'http://decentinfotech.com/tic-tok/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $data['user_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $data['user_thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n         $data['is_like'] = true;\n         $data['comments_count'] = '26M';\n         $data['share_post'] = '';\n         $data['is_follow'] = true;\n@@ -779,9 +779,8 @@\n             'data' => $data,\n             'message' => 'success',\n             'error' => false,\n             'errors' => '',\n-            'user_path' => env('APP_URL').'/public/images/profile/',\n         ];\n         return response()->json($resp, $this->statusCode);\n     }\n \n@@ -790,13 +789,13 @@\n \n         $data =  array();\n         $data['id'] = 1;\n         $data['type'] = 'video';\n-        $data['video_url'] = 'http://decentinfotech.com/tic-tok/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n+        $data['video_url'] = env('APP_URL').'/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n         $data['name'] = 'Praveen Singh';\n         $data['nick_name'] = '@praveen_singh';\n-        $data['user_image'] = 'http://decentinfotech.com/tic-tok/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $data['user_thumb_image'] = 'http://decentinfotech.com/tic-tok/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $data['user_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $data['user_thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n         $data['is_like'] = true;\n         $data['comments_count'] = '26M';\n         $data['share_post'] = '';\n         $data['is_follow'] = true;\n@@ -806,9 +805,8 @@\n             'data' => $data,\n             'message' => 'success',\n             'error' => false,\n             'errors' => '',\n-            'user_path' => env('APP_URL').'/public/images/profile/',\n         ];\n         return response()->json($resp, $this->statusCode);\n     }\n     \n"
                },
                {
                    "date": 1627972946313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,9 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-        $user = User::select('id', 'name', 'email', 'mobile_number', 'otp')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n+        $user = User::select('id', 'name', 'email', 'mobile_number')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n        \n         if($user){\n             DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n"
                },
                {
                    "date": 1627973541658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,9 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-        $user = User::select('id', 'name', 'email', 'mobile_number')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n+        $user = User::select('id', 'name', 'email', 'mobile_number', 'avatar', 'thumb_avatar')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n        \n         if($user){\n             DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n"
                },
                {
                    "date": 1627973582855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,9 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-        $user = User::select('id', 'name', 'email', 'mobile_number', 'avatar', 'thumb_avatar')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n+        $user = User::select('id', 'name', 'email', 'mobile_number')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n        \n         if($user){\n             DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n"
                },
                {
                    "date": 1627973592207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,9 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-        $user = User::select('id', 'name', 'email', 'mobile_number')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n+        $user = User::select('id', 'name', 'email', 'mobile_number', 'avatar', 'thumb_avatar')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n        \n         if($user){\n             DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n"
                },
                {
                    "date": 1627973597900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,9 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-        $user = User::select('id', 'name', 'email', 'mobile_number', 'avatar', 'thumb_avatar')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n+        $user = User::select('id', 'name', 'email', 'mobile_number', 'thumb_avatar')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n        \n         if($user){\n             DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n"
                },
                {
                    "date": 1627973716024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,9 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-        $user = User::select('id', 'name', 'email', 'mobile_number', 'thumb_avatar')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n+        $user = User::select('id', 'name', 'email', 'mobile_number')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n        \n         if($user){\n             DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n"
                },
                {
                    "date": 1627973750123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,9 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-        $user = User::select('id', 'name', 'email', 'mobile_number')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n+        $user = User::select('id', 'name','user_name', 'email', 'mobile_number')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n        \n         if($user){\n             DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n"
                },
                {
                    "date": 1627973774682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,9 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-        $user = User::select('id', 'name','user_name', 'email', 'mobile_number')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n+        $user = User::select('id', 'name','user_name as nickname', 'email', 'mobile_number')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n        \n         if($user){\n             DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n"
                },
                {
                    "date": 1627973841598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,9 +331,9 @@\n             $arr = [\n                 'role_id' => USER_ROLE,\n                 'name' => $request->get('name') != null ? $request->get('name') : '',\n                 'email' => $request->get('email'),\n-                'user_name' => explode('@', $request->get('email'))[0],\n+                'user_name' => '@'.explode('@', $request->get('email'))[0],\n                 'mobile_number' => $request->get('mobile_number') != null ? $request->get('mobile_number') : '',\n                 'password' => Hash::make('123456'),\n                 'status' => 1,\n                 'social_id' => $request->get('social_id') != null ? $request->get('social_id') : '',\n"
                },
                {
                    "date": 1627973881065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -341,11 +341,11 @@\n                 'device_token' => $request->get('device_token') != null ? $request->get('device_token') : '',\n                 'device_type' => $request->get('device_type') != null ? $request->get('device_type') : '',\n             ];\n             $user = User::create($arr);\n-            $user = User::select('id', 'name', 'email', 'mobile_number')->where(['id'=> $user->id])->first();\n+            $user = User::select('id', 'name','user_name as nickname', 'email', 'mobile_number')->where(['id'=> $user->id])->first();\n         }else{\n-            $user = User::select('id', 'name', 'email', 'mobile_number')->where(['email'=> $request->get('email')])->first();    \n+            $user = User::select('id', 'name','user_name as nickname', 'email', 'mobile_number')->where(['email'=> $request->get('email')])->first();    \n         }\n         \n        \n         if($user){\n"
                },
                {
                    "date": 1627974142924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,9 +325,9 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n-        $checkuser = User::where(['email' => $request->get('email')])->count();\n+        $checkuser = User::where(['email' => $request->get('email'), 'social_id' => $request->get('social_id')])->count();\n         if($checkuser == 0){\n             $arr = [\n                 'role_id' => USER_ROLE,\n                 'name' => $request->get('name') != null ? $request->get('name') : '',\n"
                },
                {
                    "date": 1627976633330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,8 +312,12 @@\n \n     public function socialLogin(Request $request){\n         $validation = Validator::make($request->all(), [\n             'email' => 'required|email',\n+            'social_id' => 'required',\n+            'social_type' => 'required',\n+            'device_token' => 'required',\n+            'device_type' => 'required',\n         ]);\n         $data = $request->all();\n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n"
                },
                {
                    "date": 1627976674627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,12 +339,12 @@\n                 'user_name' => '@'.explode('@', $request->get('email'))[0],\n                 'mobile_number' => $request->get('mobile_number') != null ? $request->get('mobile_number') : '',\n                 'password' => Hash::make('123456'),\n                 'status' => 1,\n-                'social_id' => $request->get('social_id') != null ? $request->get('social_id') : '',\n-                'login_type' => $request->get('social_type') != null ? $request->get('social_type') : '',\n-                'device_token' => $request->get('device_token') != null ? $request->get('device_token') : '',\n-                'device_type' => $request->get('device_type') != null ? $request->get('device_type') : '',\n+                'social_id' => $request->get('social_id'),\n+                'login_type' => $request->get('social_type'),\n+                'device_token' => $request->get('device_token'),\n+                'device_type' => $request->get('device_type'),\n             ];\n             $user = User::create($arr);\n             $user = User::select('id', 'name','user_name as nickname', 'email', 'mobile_number')->where(['id'=> $user->id])->first();\n         }else{\n"
                },
                {
                    "date": 1627976845141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -759,29 +759,42 @@\n     }\n \n     public function getHomeList(Request $request){\n \n-        $data =  array();\n+        $dataArray =  array();\n         $imageData =  $imageDataArray = array();\n         $imageData['id'] = 1;\n         $imageData['image'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n         $imageData['thumbnail'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n         $imageDataArray[] = $imageData;\n-        $data['id'] = 1;\n-        $data['type'] = 'image';\n-        $data['image_array'] = $imageDataArray;\n-        $data['name'] = 'Praveen Singh';\n-        $data['nick_name'] = '@praveen_singh';\n-        $data['user_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $data['user_thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $data['is_like'] = true;\n-        $data['comments_count'] = '26M';\n-        $data['share_post'] = '';\n-        $data['is_follow'] = true;\n         \n+        $dataRow['id'] = 1;\n+        $dataRow['type'] = 'image';\n+        $dataRow['image_array'] = $imageDataArray;\n+        $dataRow['name'] = 'Praveen Singh';\n+        $dataRow['nick_name'] = '@praveen_singh';\n+        $dataRow['user_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow['user_thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow['is_like'] = true;\n+        $dataRow['comments_count'] = '26M';\n+        $dataRow['share_post'] = '';\n+        $dataRow['is_follow'] = true;\n+\n+        $dataRow2['id'] = 1;\n+        $dataRow2['type'] = 'image';\n+        $dataRow2['image_array'] = $imageDataArray;\n+        $dataRow2['name'] = 'Praveen Singh';\n+        $dataRow2['nick_name'] = '@praveen_singh';\n+        $dataRow2['user_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow2['user_thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow2['is_like'] = true;\n+        $dataRow2['comments_count'] = '26M';\n+        $dataRow2['share_post'] = '';\n+        $dataRow2['is_follow'] = true;\n+        $dataArray = array(0 =>$dataRow, 1 => $dataRow2);\n         $resp = [\n             'status' => true,\n-            'data' => $data,\n+            'data' => $dataArray,\n             'message' => 'success',\n             'error' => false,\n             'errors' => '',\n         ];\n"
                },
                {
                    "date": 1627976916301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -761,13 +761,18 @@\n     public function getHomeList(Request $request){\n \n         $dataArray =  array();\n         $imageData =  $imageDataArray = array();\n-        $imageData['id'] = 1;\n-        $imageData['image'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n-        $imageData['thumbnail'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n-        $imageDataArray[] = $imageData;\n+        $imageData1['id'] = 1;\n+        $imageData1['image'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n+        $imageData1['thumbnail'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n         \n+\n+        $imageData2['id'] = 1;\n+        $imageData2['image'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n+        $imageData2['thumbnail'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n+        $imageDataArray = array(0 =>$imageData1, 1 => $imageData2);\n+        \n         $dataRow['id'] = 1;\n         $dataRow['type'] = 'image';\n         $dataRow['image_array'] = $imageDataArray;\n         $dataRow['name'] = 'Praveen Singh';\n@@ -778,11 +783,11 @@\n         $dataRow['comments_count'] = '26M';\n         $dataRow['share_post'] = '';\n         $dataRow['is_follow'] = true;\n \n-        $dataRow2['id'] = 1;\n-        $dataRow2['type'] = 'image';\n-        $dataRow2['image_array'] = $imageDataArray;\n+        $dataRow2['id'] = 2;\n+        $dataRow2['type'] = 'video';\n+        $dataRow2['image_array'] = $videoDataArray;\n         $dataRow2['name'] = 'Praveen Singh';\n         $dataRow2['nick_name'] = '@praveen_singh';\n         $dataRow2['user_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n         $dataRow2['user_thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n"
                },
                {
                    "date": 1627976996573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -770,8 +770,12 @@\n         $imageData2['id'] = 1;\n         $imageData2['image'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n         $imageData2['thumbnail'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n         $imageDataArray = array(0 =>$imageData1, 1 => $imageData2);\n+\n+        $videoData['id'] = 1;\n+        $videoData['video'] = env('APP_URL').'/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n+        $videoDataArray = array(0 =>$videoData, 1 => $imageData2);\n         \n         $dataRow['id'] = 1;\n         $dataRow['type'] = 'image';\n         $dataRow['image_array'] = $imageDataArray;\n"
                },
                {
                    "date": 1627977004458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -798,8 +798,9 @@\n         $dataRow2['is_like'] = true;\n         $dataRow2['comments_count'] = '26M';\n         $dataRow2['share_post'] = '';\n         $dataRow2['is_follow'] = true;\n+        \n         $dataArray = array(0 =>$dataRow, 1 => $dataRow2);\n         $resp = [\n             'status' => true,\n             'data' => $dataArray,\n"
                },
                {
                    "date": 1627977015028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -766,9 +766,9 @@\n         $imageData1['image'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n         $imageData1['thumbnail'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n         \n \n-        $imageData2['id'] = 1;\n+        $imageData2['id'] = 2;\n         $imageData2['image'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n         $imageData2['thumbnail'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n         $imageDataArray = array(0 =>$imageData1, 1 => $imageData2);\n \n@@ -798,9 +798,9 @@\n         $dataRow2['is_like'] = true;\n         $dataRow2['comments_count'] = '26M';\n         $dataRow2['share_post'] = '';\n         $dataRow2['is_follow'] = true;\n-        \n+\n         $dataArray = array(0 =>$dataRow, 1 => $dataRow2);\n         $resp = [\n             'status' => true,\n             'data' => $dataArray,\n"
                },
                {
                    "date": 1627977028369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -773,9 +773,9 @@\n         $imageDataArray = array(0 =>$imageData1, 1 => $imageData2);\n \n         $videoData['id'] = 1;\n         $videoData['video'] = env('APP_URL').'/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n-        $videoDataArray = array(0 =>$videoData, 1 => $imageData2);\n+        $videoDataArray = array(0 =>$videoData);\n         \n         $dataRow['id'] = 1;\n         $dataRow['type'] = 'image';\n         $dataRow['image_array'] = $imageDataArray;\n"
                },
                {
                    "date": 1627977083781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -780,10 +780,10 @@\n         $dataRow['type'] = 'image';\n         $dataRow['image_array'] = $imageDataArray;\n         $dataRow['name'] = 'Praveen Singh';\n         $dataRow['nick_name'] = '@praveen_singh';\n-        $dataRow['user_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $dataRow['user_thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n         $dataRow['is_like'] = true;\n         $dataRow['comments_count'] = '26M';\n         $dataRow['share_post'] = '';\n         $dataRow['is_follow'] = true;\n@@ -792,10 +792,10 @@\n         $dataRow2['type'] = 'video';\n         $dataRow2['image_array'] = $videoDataArray;\n         $dataRow2['name'] = 'Praveen Singh';\n         $dataRow2['nick_name'] = '@praveen_singh';\n-        $dataRow2['user_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $dataRow2['user_thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow2['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow2['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n         $dataRow2['is_like'] = true;\n         $dataRow2['comments_count'] = '26M';\n         $dataRow2['share_post'] = '';\n         $dataRow2['is_follow'] = true;\n"
                },
                {
                    "date": 1627977104331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -819,10 +819,10 @@\n         $data['type'] = 'video';\n         $data['video_url'] = env('APP_URL').'/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n         $data['name'] = 'Praveen Singh';\n         $data['nick_name'] = '@praveen_singh';\n-        $data['user_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $data['user_thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $data['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $data['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n         $data['is_like'] = true;\n         $data['comments_count'] = '26M';\n         $data['share_post'] = '';\n         $data['is_follow'] = true;\n"
                },
                {
                    "date": 1627977147234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -825,12 +825,24 @@\n         $data['is_like'] = true;\n         $data['comments_count'] = '26M';\n         $data['share_post'] = '';\n         $data['is_follow'] = true;\n-        \n+\n+        $data2['id'] = 2;\n+        $data2['type'] = 'video';\n+        $data2['video_url'] = env('APP_URL').'/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n+        $data2['name'] = 'Praveen Singh';\n+        $data2['nick_name'] = '@praveen_singh';\n+        $data2['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $data2['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $data2['is_like'] = true;\n+        $data2['comments_count'] = '26M';\n+        $data2['share_post'] = '';\n+        $data2['is_follow'] = true;\n+        $dataArray = array(0 =>$data, 1 => $data2);\n         $resp = [\n             'status' => true,\n-            'data' => $data,\n+            'data' => $dataArray,\n             'message' => 'success',\n             'error' => false,\n             'errors' => '',\n         ];\n"
                },
                {
                    "date": 1627977155618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -837,8 +837,9 @@\n         $data2['is_like'] = true;\n         $data2['comments_count'] = '26M';\n         $data2['share_post'] = '';\n         $data2['is_follow'] = true;\n+        \n         $dataArray = array(0 =>$data, 1 => $data2);\n         $resp = [\n             'status' => true,\n             'data' => $dataArray,\n"
                },
                {
                    "date": 1627977249133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,14 +355,14 @@\n         if($user){\n             $passportToken = $user->createToken('API Access Token');\n             $passportToken->token->save();\n             $token = $passportToken->accessToken;\n-            \n+            $dataArray[] = $user;\n             $resp = [\n                 'status' => true,\n                 'data' => $user,\n                 'is_register' => 1,\n-                'token' => $token,\n+                'token' => $dataArray,\n                 'message' => 'success',\n                 'error' => false,\n                 'errors' => '',\n             ];\n@@ -837,9 +837,9 @@\n         $data2['is_like'] = true;\n         $data2['comments_count'] = '26M';\n         $data2['share_post'] = '';\n         $data2['is_follow'] = true;\n-        \n+\n         $dataArray = array(0 =>$data, 1 => $data2);\n         $resp = [\n             'status' => true,\n             'data' => $dataArray,\n"
                },
                {
                    "date": 1627977264954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -358,11 +358,11 @@\n             $token = $passportToken->accessToken;\n             $dataArray[] = $user;\n             $resp = [\n                 'status' => true,\n-                'data' => $user,\n+                'data' => $dataArray,\n                 'is_register' => 1,\n-                'token' => $dataArray,\n+                'token' => $token,\n                 'message' => 'success',\n                 'error' => false,\n                 'errors' => '',\n             ];\n"
                },
                {
                    "date": 1627977278820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,9 +368,9 @@\n             ];\n         }else{\n             $resp = [\n                 'status' => false,\n-                'data' => '',\n+                'data' => [],\n                 'message' => 'Something went wrong.',\n                 'error' => true,\n                 'errors' => '',\n             ];\n"
                },
                {
                    "date": 1627977310672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,12 +229,12 @@\n             DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n             $passportToken->token->save();\n             $token = $passportToken->accessToken;\n-            \n+            $dataArray[] = $user;\n             $resp = [\n                 'status' => true,\n-                'data' => $user,\n+                'data' => $dataArray,\n                 'is_register' => 1,\n                 'token' => $token,\n                 'message' => 'success',\n                 'error' => false,\n"
                },
                {
                    "date": 1627977360228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,8 +167,9 @@\n         $resposeArray = array(\n             'mobile_number' => $request->get('mobile_number'),\n             'otp' => $otp\n         );\n+        $dataArray[] = $resposeArray;\n         if($checkuser == 0){\n             $arr = [\n                 'role_id' => USER_ROLE,\n                 'mobile_number' => $request->get('mobile_number'),\n@@ -198,9 +199,9 @@\n \n         return $this->respond([\n             'status' => true,\n             'message' => 'Otp send successfully.',\n-            'data' => $resposeArray,\n+            'data' => $dataArray,\n             'error' => false,\n             'errors' => '',\n         ]);\n     }\n"
                },
                {
                    "date": 1627977376400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n         $resposeArray = array(\n             'mobile_number' => $request->get('mobile_number'),\n             'otp' => $otp\n         );\n-        $dataArray[] = $resposeArray;\n+        \n         if($checkuser == 0){\n             $arr = [\n                 'role_id' => USER_ROLE,\n                 'mobile_number' => $request->get('mobile_number'),\n@@ -199,9 +199,9 @@\n \n         return $this->respond([\n             'status' => true,\n             'message' => 'Otp send successfully.',\n-            'data' => $dataArray,\n+            'data' => $resposeArray,\n             'error' => false,\n             'errors' => '',\n         ]);\n     }\n"
                },
                {
                    "date": 1628008688580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,9 +315,9 @@\n         $validation = Validator::make($request->all(), [\n             'email' => 'required|email',\n             'social_id' => 'required',\n             'social_type' => 'required',\n-            'device_token' => 'required',\n+            //'device_token' => 'required',\n             'device_type' => 'required',\n         ]);\n         $data = $request->all();\n         if ($validation->fails()) {\n"
                },
                {
                    "date": 1628012314731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -332,13 +332,14 @@\n             return response()->json($resp, $this->statusCode);\n         }\n         $checkuser = User::where(['email' => $request->get('email'), 'social_id' => $request->get('social_id')])->count();\n         if($checkuser == 0){\n+            \n             $arr = [\n                 'role_id' => USER_ROLE,\n                 'name' => $request->get('name') != null ? $request->get('name') : '',\n                 'email' => $request->get('email'),\n-                'user_name' => '@'.explode('@', $request->get('email'))[0],\n+                'user_name' => '@'.explode('@', $request->get('email'))[0].'_'.rand(11,99),\n                 'mobile_number' => $request->get('mobile_number') != null ? $request->get('mobile_number') : '',\n                 'password' => Hash::make('123456'),\n                 'status' => 1,\n                 'social_id' => $request->get('social_id'),\n"
                },
                {
                    "date": 1628012345775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -343,9 +343,9 @@\n                 'password' => Hash::make('123456'),\n                 'status' => 1,\n                 'social_id' => $request->get('social_id'),\n                 'login_type' => $request->get('social_type'),\n-                'device_token' => $request->get('device_token'),\n+                'device_token' => $request->get('device_token') != null ? $request->get('device_token') : '',\n                 'device_type' => $request->get('device_type'),\n             ];\n             $user = User::create($arr);\n             $user = User::select('id', 'name','user_name as nickname', 'email', 'mobile_number')->where(['id'=> $user->id])->first();\n"
                },
                {
                    "date": 1628012568777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -426,9 +426,9 @@\n      */\n     public function me()\n     {\n         $userID = Auth::user();\n-        $user = User::where('users.id', $userID->id)->first();\n+        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number')->where('users.id', $userID->id)->first();\n         \n         $this->userSetHidden($user);\n         $resp = [\n             'status' => true,\n"
                },
                {
                    "date": 1628012623455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -427,13 +427,13 @@\n     public function me()\n     {\n         $userID = Auth::user();\n         $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number')->where('users.id', $userID->id)->first();\n-        \n+        $dataArray['id'] = $user->id;\n         $this->userSetHidden($user);\n         $resp = [\n             'status' => true,\n-            'data' => $user,\n+            'data' => $dataArray,\n             'message' => 'success',\n             'error' => false,\n             'errors' => '',\n             'user_path' => env('APP_URL').'/public/images/profile/',\n"
                },
                {
                    "date": 1628012652947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -427,9 +427,10 @@\n     public function me()\n     {\n         $userID = Auth::user();\n         $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number')->where('users.id', $userID->id)->first();\n-        $dataArray['id'] = $user->id;\n+        $dataRow['id'] = $user->id;\n+        $dataArray[] = $dataRow;\n         $this->userSetHidden($user);\n         $resp = [\n             'status' => true,\n             'data' => $dataArray,\n"
                },
                {
                    "date": 1628012714909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -428,8 +428,19 @@\n     {\n         $userID = Auth::user();\n         $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number')->where('users.id', $userID->id)->first();\n         $dataRow['id'] = $user->id;\n+        $dataRow['id'] = $user->id;\n+        $dataRow['id'] = $user->id;\n+        $dataRow['id'] = $user->id;\n+        $dataRow['id'] = $user->id;\n+        $dataRow['id'] = $user->id;\n+        $dataRow['id'] = $user->id;\n+        $dataRow['id'] = $user->id;\n+        $dataRow['id'] = $user->id;\n+        $dataRow['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        \n         $dataArray[] = $dataRow;\n         $this->userSetHidden($user);\n         $resp = [\n             'status' => true,\n"
                },
                {
                    "date": 1628012846806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -426,21 +426,21 @@\n      */\n     public function me()\n     {\n         $userID = Auth::user();\n-        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number')->where('users.id', $userID->id)->first();\n+        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio')->where('users.id', $userID->id)->first();\n         $dataRow['id'] = $user->id;\n-        $dataRow['id'] = $user->id;\n-        $dataRow['id'] = $user->id;\n-        $dataRow['id'] = $user->id;\n-        $dataRow['id'] = $user->id;\n-        $dataRow['id'] = $user->id;\n-        $dataRow['id'] = $user->id;\n-        $dataRow['id'] = $user->id;\n-        $dataRow['id'] = $user->id;\n+        $dataRow['nick_name'] = $user->nick_name;\n+        $dataRow['name'] = $user->name;\n+        $dataRow['email'] = $user->email;\n+        $dataRow['mobile_number'] = $user->mobile_number;\n+        $dataRow['followers'] = 0;\n+        $dataRow['following'] = 0;\n+        $dataRow['likes'] = 0;\n+        $dataRow['user_bio'] = $user->user_bio;\n         $dataRow['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n         $dataRow['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        \n+\n         $dataArray[] = $dataRow;\n         $this->userSetHidden($user);\n         $resp = [\n             'status' => true,\n"
                },
                {
                    "date": 1628012979322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -436,9 +436,9 @@\n         $dataRow['followers'] = 0;\n         $dataRow['following'] = 0;\n         $dataRow['likes'] = 0;\n         $dataRow['user_bio'] = $user->user_bio;\n-        $dataRow['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow['full_image'] = env('APP_URL').'/storage/app/public/'.$user->avatar;\n         $dataRow['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n \n         $dataArray[] = $dataRow;\n         $this->userSetHidden($user);\n"
                },
                {
                    "date": 1628013015215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -427,8 +427,9 @@\n     public function me()\n     {\n         $userID = Auth::user();\n         $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio')->where('users.id', $userID->id)->first();\n+        \n         $dataRow['id'] = $user->id;\n         $dataRow['nick_name'] = $user->nick_name;\n         $dataRow['name'] = $user->name;\n         $dataRow['email'] = $user->email;\n"
                },
                {
                    "date": 1628013026898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -426,10 +426,10 @@\n      */\n     public function me()\n     {\n         $userID = Auth::user();\n-        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio')->where('users.id', $userID->id)->first();\n-        \n+        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio', 'avatar')->where('users.id', $userID->id)->first();\n+\n         $dataRow['id'] = $user->id;\n         $dataRow['nick_name'] = $user->nick_name;\n         $dataRow['name'] = $user->name;\n         $dataRow['email'] = $user->email;\n"
                },
                {
                    "date": 1628013070801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -426,9 +426,9 @@\n      */\n     public function me()\n     {\n         $userID = Auth::user();\n-        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio', 'avatar')->where('users.id', $userID->id)->first();\n+        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio', 'avatar', 'thumb_avatar')->where('users.id', $userID->id)->first();\n \n         $dataRow['id'] = $user->id;\n         $dataRow['nick_name'] = $user->nick_name;\n         $dataRow['name'] = $user->name;\n@@ -438,9 +438,9 @@\n         $dataRow['following'] = 0;\n         $dataRow['likes'] = 0;\n         $dataRow['user_bio'] = $user->user_bio;\n         $dataRow['full_image'] = env('APP_URL').'/storage/app/public/'.$user->avatar;\n-        $dataRow['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow['thumb_image'] = env('APP_URL').'/storage/app/public/'.$user->thumb_avatar;\n \n         $dataArray[] = $dataRow;\n         $this->userSetHidden($user);\n         $resp = [\n"
                },
                {
                    "date": 1628013103496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -448,9 +448,8 @@\n             'data' => $dataArray,\n             'message' => 'success',\n             'error' => false,\n             'errors' => '',\n-            'user_path' => env('APP_URL').'/public/images/profile/',\n         ];\n         return response()->json($resp, $this->statusCode);\n     }\n \n"
                },
                {
                    "date": 1628013218013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -631,9 +631,10 @@\n         } \n \n         $userProfileArr = array(\n             'name' => isset($data['name']) && $data['name'] != '' ? $data['name'] : $user->name,\n-            'mobile_number' => isset($data['phone']) && $data['phone'] != '' ? $data['phone'] : $user->mobile_number,\n+            'user_name' => isset($data['nick_name']) && $data['nick_name'] != '' ? $data['nick_name'] : $user->user_name,\n+            'mobile_number' => isset($data['mobile_number']) && $data['mobile_number'] != '' ? $data['mobile_number'] : $user->mobile_number,\n             'email' => isset($data['email']) && $data['email'] != '' ? $data['email'] : $user->email,\n             'avatar' => $avatarImage,\n             'updated_at' => date('Y-m-d H:i:s'),\n         );\n"
                },
                {
                    "date": 1628013291365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -632,11 +632,13 @@\n \n         $userProfileArr = array(\n             'name' => isset($data['name']) && $data['name'] != '' ? $data['name'] : $user->name,\n             'user_name' => isset($data['nick_name']) && $data['nick_name'] != '' ? $data['nick_name'] : $user->user_name,\n+            'user_bio' => isset($data['user_bio']) && $data['user_bio'] != '' ? $data['user_bio'] : $user->user_bio,\n             'mobile_number' => isset($data['mobile_number']) && $data['mobile_number'] != '' ? $data['mobile_number'] : $user->mobile_number,\n             'email' => isset($data['email']) && $data['email'] != '' ? $data['email'] : $user->email,\n             'avatar' => $avatarImage,\n+            'thumb_avatar' => $avatarThumbImage,\n             'updated_at' => date('Y-m-d H:i:s'),\n         );\n \n         DB::table('users')->where('id', $user->id)->update($userProfileArr);\n"
                },
                {
                    "date": 1628013310752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -620,8 +620,9 @@\n     public function updateProfile(Request $request)\n     {\n         $user = Auth::user();\n         $avatarImage = $user->avatar;\n+        $avatarThumbImage = $user->thumb_avatar;\n         $data = $request->all();\n         \n         if (isset($data['image']) && $data['image']!= null ) {\n             $name = 'img_' . time() . $request->file('image')->getClientOriginalName();\n"
                },
                {
                    "date": 1628013337155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -636,8 +636,9 @@\n             'user_name' => isset($data['nick_name']) && $data['nick_name'] != '' ? $data['nick_name'] : $user->user_name,\n             'user_bio' => isset($data['user_bio']) && $data['user_bio'] != '' ? $data['user_bio'] : $user->user_bio,\n             'mobile_number' => isset($data['mobile_number']) && $data['mobile_number'] != '' ? $data['mobile_number'] : $user->mobile_number,\n             'email' => isset($data['email']) && $data['email'] != '' ? $data['email'] : $user->email,\n+            'gender' => isset($data['gender']) && $data['gender'] != '' ? $data['gender'] : $user->gender,\n             'avatar' => $avatarImage,\n             'thumb_avatar' => $avatarThumbImage,\n             'updated_at' => date('Y-m-d H:i:s'),\n         );\n"
                },
                {
                    "date": 1628013449773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -637,8 +637,9 @@\n             'user_bio' => isset($data['user_bio']) && $data['user_bio'] != '' ? $data['user_bio'] : $user->user_bio,\n             'mobile_number' => isset($data['mobile_number']) && $data['mobile_number'] != '' ? $data['mobile_number'] : $user->mobile_number,\n             'email' => isset($data['email']) && $data['email'] != '' ? $data['email'] : $user->email,\n             'gender' => isset($data['gender']) && $data['gender'] != '' ? $data['gender'] : $user->gender,\n+            'dob' => isset($data['dob']) && $data['dob'] != '' ? $data['dob'] : $user->dob,\n             'avatar' => $avatarImage,\n             'thumb_avatar' => $avatarThumbImage,\n             'updated_at' => date('Y-m-d H:i:s'),\n         );\n"
                },
                {
                    "date": 1628013495771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -635,9 +635,9 @@\n             'name' => isset($data['name']) && $data['name'] != '' ? $data['name'] : $user->name,\n             'user_name' => isset($data['nick_name']) && $data['nick_name'] != '' ? $data['nick_name'] : $user->user_name,\n             'user_bio' => isset($data['user_bio']) && $data['user_bio'] != '' ? $data['user_bio'] : $user->user_bio,\n             'mobile_number' => isset($data['mobile_number']) && $data['mobile_number'] != '' ? $data['mobile_number'] : $user->mobile_number,\n-            'email' => isset($data['email']) && $data['email'] != '' ? $data['email'] : $user->email,\n+            //'email' => isset($data['email']) && $data['email'] != '' ? $data['email'] : $user->email,\n             'gender' => isset($data['gender']) && $data['gender'] != '' ? $data['gender'] : $user->gender,\n             'dob' => isset($data['dob']) && $data['dob'] != '' ? $data['dob'] : $user->dob,\n             'avatar' => $avatarImage,\n             'thumb_avatar' => $avatarThumbImage,\n"
                },
                {
                    "date": 1628015259166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -623,8 +623,33 @@\n         $avatarImage = $user->avatar;\n         $avatarThumbImage = $user->thumb_avatar;\n         $data = $request->all();\n         \n+        if($request->hasFile('image')) {\n+            //get filename with extension\n+            $filenamewithextension = $request->file('image')->getClientOriginalName();\n+      \n+            //get filename without extension\n+            $filename = pathinfo($filenamewithextension, PATHINFO_FILENAME);\n+      \n+            //get file extension\n+            $extension = $request->file('image')->getClientOriginalExtension();\n+      \n+            //filename to store\n+            $filenametostore = $filename.'_'.time().'.'.$extension;\n+     \n+            //medium thumbnail name\n+            $mediumthumbnail = $filename.'_medium_'.time().'.'.$extension;\n+     \n+            //Upload File\n+            $request->file('image')->storeAs('storage/app/public/users', $filenametostore);\n+            $request->file('image')->storeAs('storage/app/public/users/thumbnail', $mediumthumbnail);\n+      \n+            //create medium thumbnail\n+            $mediumthumbnailpath = public_path('storage/profile_images/thumbnail/'.$mediumthumbnail);\n+            $this->createThumbnail($mediumthumbnailpath, 300, 185);\n+        }\n+\n         if (isset($data['image']) && $data['image']!= null ) {\n             $name = 'img_' . time() . $request->file('image')->getClientOriginalName();\n             Storage::disk('pic_profile')->put($name, file_get_contents($request->file('image')->getRealPath()));\n             $avatarImage = $name;\n"
                },
                {
                    "date": 1628015264455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -648,14 +648,14 @@\n             $mediumthumbnailpath = public_path('storage/profile_images/thumbnail/'.$mediumthumbnail);\n             $this->createThumbnail($mediumthumbnailpath, 300, 185);\n         }\n \n-        if (isset($data['image']) && $data['image']!= null ) {\n-            $name = 'img_' . time() . $request->file('image')->getClientOriginalName();\n-            Storage::disk('pic_profile')->put($name, file_get_contents($request->file('image')->getRealPath()));\n-            $avatarImage = $name;\n-            $imgPath = Storage::disk('pic_profile')->url($name);\n-        } \n+        // if (isset($data['image']) && $data['image']!= null ) {\n+        //     $name = 'img_' . time() . $request->file('image')->getClientOriginalName();\n+        //     Storage::disk('pic_profile')->put($name, file_get_contents($request->file('image')->getRealPath()));\n+        //     $avatarImage = $name;\n+        //     $imgPath = Storage::disk('pic_profile')->url($name);\n+        // } \n \n         $userProfileArr = array(\n             'name' => isset($data['name']) && $data['name'] != '' ? $data['name'] : $user->name,\n             'user_name' => isset($data['nick_name']) && $data['nick_name'] != '' ? $data['nick_name'] : $user->user_name,\n"
                },
                {
                    "date": 1628015315301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -645,8 +645,9 @@\n             $request->file('image')->storeAs('storage/app/public/users/thumbnail', $mediumthumbnail);\n       \n             //create medium thumbnail\n             $mediumthumbnailpath = public_path('storage/profile_images/thumbnail/'.$mediumthumbnail);\n+            //$img = Image::make($path)->resize(300, 185)->save($path);\n             $this->createThumbnail($mediumthumbnailpath, 300, 185);\n         }\n \n         // if (isset($data['image']) && $data['image']!= null ) {\n@@ -681,8 +682,22 @@\n         ];\n         return response()->json($resp, $this->statusCode);\n     }\n \n+    /**\n+     * Create a thumbnail of specified size\n+     *\n+     * @param string $path path of thumbnail\n+     * @param int $width\n+     * @param int $height\n+     */\n+    public function createThumbnail($path, $width, $height)\n+    {\n+        $img = Image::make($path)->resize($width, $height, function ($constraint) {\n+            $constraint->aspectRatio();\n+        });\n+        $img->save($path);\n+    }\n  \n     public function cmsPage(Request $request)\n     {\n         $userID = Auth::user();\n"
                },
                {
                    "date": 1628015371724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -634,21 +634,21 @@\n             //get file extension\n             $extension = $request->file('image')->getClientOriginalExtension();\n       \n             //filename to store\n-            $filenametostore = $filename.'_'.time().'.'.$extension;\n+            $avatarImage = $filename.'_'.time().'.'.$extension;\n      \n             //medium thumbnail name\n-            $mediumthumbnail = $filename.'_medium_'.time().'.'.$extension;\n+            $avatarThumbImage = $filename.'_medium_'.time().'.'.$extension;\n      \n             //Upload File\n-            $request->file('image')->storeAs('storage/app/public/users', $filenametostore);\n-            $request->file('image')->storeAs('storage/app/public/users/thumbnail', $mediumthumbnail);\n+            $request->file('image')->storeAs('storage/app/public/users', $avatarImage);\n+            $request->file('image')->storeAs('storage/app/public/users/thumbnail', $avatarThumbImage);\n       \n             //create medium thumbnail\n-            $mediumthumbnailpath = public_path('storage/profile_images/thumbnail/'.$mediumthumbnail);\n+            $avatarThumbImagepath = public_path('storage/profile_images/thumbnail/'.$avatarThumbImage);\n             //$img = Image::make($path)->resize(300, 185)->save($path);\n-            $this->createThumbnail($mediumthumbnailpath, 300, 185);\n+            $this->createThumbnail($avatarThumbImagepath, 300, 185);\n         }\n \n         // if (isset($data['image']) && $data['image']!= null ) {\n         //     $name = 'img_' . time() . $request->file('image')->getClientOriginalName();\n"
                },
                {
                    "date": 1628015663850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -641,12 +641,13 @@\n             $avatarThumbImage = $filename.'_medium_'.time().'.'.$extension;\n      \n             //Upload File\n             $request->file('image')->storeAs('storage/app/public/users', $avatarImage);\n-            $request->file('image')->storeAs('storage/app/public/users/thumbnail', $avatarThumbImage);\n+            $request->file('image')->storeAs('storage/app/public/users', $avatarThumbImage);\n       \n             //create medium thumbnail\n-            $avatarThumbImagepath = public_path('storage/profile_images/thumbnail/'.$avatarThumbImage);\n+            $avatarThumbImagepath = public_path('storage/app/public/users/'.$avatarThumbImage);\n+\n             //$img = Image::make($path)->resize(300, 185)->save($path);\n             $this->createThumbnail($avatarThumbImagepath, 300, 185);\n         }\n \n"
                },
                {
                    "date": 1628015690247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -645,9 +645,9 @@\n             $request->file('image')->storeAs('storage/app/public/users', $avatarThumbImage);\n       \n             //create medium thumbnail\n             $avatarThumbImagepath = public_path('storage/app/public/users/'.$avatarThumbImage);\n-\n+            echo $avatarThumbImagepath;die;\n             //$img = Image::make($path)->resize(300, 185)->save($path);\n             $this->createThumbnail($avatarThumbImagepath, 300, 185);\n         }\n \n"
                },
                {
                    "date": 1628015742976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -644,9 +644,9 @@\n             $request->file('image')->storeAs('storage/app/public/users', $avatarImage);\n             $request->file('image')->storeAs('storage/app/public/users', $avatarThumbImage);\n       \n             //create medium thumbnail\n-            $avatarThumbImagepath = public_path('storage/app/public/users/'.$avatarThumbImage);\n+            $avatarThumbImagepath = public_path('storage/users/'.$avatarThumbImage);\n             echo $avatarThumbImagepath;die;\n             //$img = Image::make($path)->resize(300, 185)->save($path);\n             $this->createThumbnail($avatarThumbImagepath, 300, 185);\n         }\n"
                },
                {
                    "date": 1628015866854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -640,10 +640,10 @@\n             //medium thumbnail name\n             $avatarThumbImage = $filename.'_medium_'.time().'.'.$extension;\n      \n             //Upload File\n-            $request->file('image')->storeAs('storage/app/public/users', $avatarImage);\n-            $request->file('image')->storeAs('storage/app/public/users', $avatarThumbImage);\n+            $request->file('image')->storeAs('storage/users', $avatarImage);\n+            $request->file('image')->storeAs('storage/users', $avatarThumbImage);\n       \n             //create medium thumbnail\n             $avatarThumbImagepath = public_path('storage/users/'.$avatarThumbImage);\n             echo $avatarThumbImagepath;die;\n"
                },
                {
                    "date": 1628015894058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -645,9 +645,9 @@\n             $request->file('image')->storeAs('storage/users', $avatarThumbImage);\n       \n             //create medium thumbnail\n             $avatarThumbImagepath = public_path('storage/users/'.$avatarThumbImage);\n-            echo $avatarThumbImagepath;die;\n+            //echo $avatarThumbImagepath;die;\n             //$img = Image::make($path)->resize(300, 185)->save($path);\n             $this->createThumbnail($avatarThumbImagepath, 300, 185);\n         }\n \n"
                },
                {
                    "date": 1628016037041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -640,10 +640,10 @@\n             //medium thumbnail name\n             $avatarThumbImage = $filename.'_medium_'.time().'.'.$extension;\n      \n             //Upload File\n-            $request->file('image')->storeAs('storage/users', $avatarImage);\n-            $request->file('image')->storeAs('storage/users', $avatarThumbImage);\n+            $request->file('image')->storeAs('/storage/users', $avatarImage);\n+            $request->file('image')->storeAs('/storage/users', $avatarThumbImage);\n       \n             //create medium thumbnail\n             $avatarThumbImagepath = public_path('storage/users/'.$avatarThumbImage);\n             //echo $avatarThumbImagepath;die;\n"
                },
                {
                    "date": 1628016051269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -645,9 +645,9 @@\n             $request->file('image')->storeAs('/storage/users', $avatarThumbImage);\n       \n             //create medium thumbnail\n             $avatarThumbImagepath = public_path('storage/users/'.$avatarThumbImage);\n-            //echo $avatarThumbImagepath;die;\n+            echo $avatarThumbImagepath;die;\n             //$img = Image::make($path)->resize(300, 185)->save($path);\n             $this->createThumbnail($avatarThumbImagepath, 300, 185);\n         }\n \n"
                },
                {
                    "date": 1628016119736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -640,10 +640,10 @@\n             //medium thumbnail name\n             $avatarThumbImage = $filename.'_medium_'.time().'.'.$extension;\n      \n             //Upload File\n-            $request->file('image')->storeAs('/storage/users', $avatarImage);\n-            $request->file('image')->storeAs('/storage/users', $avatarThumbImage);\n+            Storage::disk('pic_profile')->put($name, file_get_contents($avatarImage->getRealPath()));\n+            Storage::disk('pic_profile')->put($name, file_get_contents($avatarThumbImage->getRealPath()));\n       \n             //create medium thumbnail\n             $avatarThumbImagepath = public_path('storage/users/'.$avatarThumbImage);\n             echo $avatarThumbImagepath;die;\n"
                },
                {
                    "date": 1628016153145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -640,10 +640,10 @@\n             //medium thumbnail name\n             $avatarThumbImage = $filename.'_medium_'.time().'.'.$extension;\n      \n             //Upload File\n-            Storage::disk('pic_profile')->put($name, file_get_contents($avatarImage->getRealPath()));\n-            Storage::disk('pic_profile')->put($name, file_get_contents($avatarThumbImage->getRealPath()));\n+            Storage::disk('pic_profile')->put($avatarImage, file_get_contents($request->file('image')->getRealPath()));\n+            Storage::disk('pic_profile')->put($avatarThumbImage, file_get_contents($request->file('image')->getRealPath()));\n       \n             //create medium thumbnail\n             $avatarThumbImagepath = public_path('storage/users/'.$avatarThumbImage);\n             echo $avatarThumbImagepath;die;\n"
                },
                {
                    "date": 1628016165302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -645,9 +645,8 @@\n             Storage::disk('pic_profile')->put($avatarThumbImage, file_get_contents($request->file('image')->getRealPath()));\n       \n             //create medium thumbnail\n             $avatarThumbImagepath = public_path('storage/users/'.$avatarThumbImage);\n-            echo $avatarThumbImagepath;die;\n             //$img = Image::make($path)->resize(300, 185)->save($path);\n             $this->createThumbnail($avatarThumbImagepath, 300, 185);\n         }\n \n"
                },
                {
                    "date": 1628016239375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -671,11 +671,29 @@\n         );\n \n         DB::table('users')->where('id', $user->id)->update($userProfileArr);\n \n+\n+        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio', 'avatar', 'thumb_avatar')->where('users.id', $user->id)->first();\n+\n+        $dataRow['id'] = $user->id;\n+        $dataRow['nick_name'] = $user->nick_name;\n+        $dataRow['name'] = $user->name;\n+        $dataRow['email'] = $user->email;\n+        $dataRow['mobile_number'] = $user->mobile_number;\n+        $dataRow['followers'] = 0;\n+        $dataRow['following'] = 0;\n+        $dataRow['likes'] = 0;\n+        $dataRow['user_bio'] = $user->user_bio;\n+        $dataRow['full_image'] = env('APP_URL').'/storage/app/public/'.$user->avatar;\n+        $dataRow['thumb_image'] = env('APP_URL').'/storage/app/public/'.$user->thumb_avatar;\n+\n+        $dataArray[] = $dataRow;\n+        $this->userSetHidden($user);\n+        \n         $resp = [\n             'status' => true,\n-            'data' => '',\n+            'data' => $dataArray,\n             'message' => 'Updated Successfully.',\n             'error' => false,\n             'errors' => '',\n             //'image_path' => env('ASSET_URL') . '/images/profile'\n"
                },
                {
                    "date": 1628016297304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -664,10 +664,10 @@\n             'mobile_number' => isset($data['mobile_number']) && $data['mobile_number'] != '' ? $data['mobile_number'] : $user->mobile_number,\n             //'email' => isset($data['email']) && $data['email'] != '' ? $data['email'] : $user->email,\n             'gender' => isset($data['gender']) && $data['gender'] != '' ? $data['gender'] : $user->gender,\n             'dob' => isset($data['dob']) && $data['dob'] != '' ? $data['dob'] : $user->dob,\n-            'avatar' => $avatarImage,\n-            'thumb_avatar' => $avatarThumbImage,\n+            'avatar' => 'users/'.$avatarImage,\n+            'thumb_avatar' => 'users/'.$avatarThumbImage,\n             'updated_at' => date('Y-m-d H:i:s'),\n         );\n \n         DB::table('users')->where('id', $user->id)->update($userProfileArr);\n"
                },
                {
                    "date": 1628016357418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -715,8 +715,11 @@\n         });\n         $img->save($path);\n     }\n  \n+    public function checkNickName(Request $request){\n+        \n+    }\n     public function cmsPage(Request $request)\n     {\n         $userID = Auth::user();\n         $data = $request->all();\n"
                },
                {
                    "date": 1628016447407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -716,10 +716,11 @@\n         $img->save($path);\n     }\n  \n     public function checkNickName(Request $request){\n-        \n+\n     }\n+    \n     public function cmsPage(Request $request)\n     {\n         $userID = Auth::user();\n         $data = $request->all();\n"
                },
                {
                    "date": 1628016504610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -716,11 +716,25 @@\n         $img->save($path);\n     }\n  \n     public function checkNickName(Request $request){\n+        $validation = Validator::make($request->all(), [\n+            'nick_name' => 'required',\n+        ]);\n+        $data = $request->all();\n+        if ($validation->fails()) {\n+            //return $this->throwValidation($validation->messages()->first());\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => $validation->messages()->first(),\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        }\n+    }\n \n-    }\n-    \n     public function cmsPage(Request $request)\n     {\n         $userID = Auth::user();\n         $data = $request->all();\n"
                },
                {
                    "date": 1628016662580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -716,10 +716,12 @@\n         $img->save($path);\n     }\n  \n     public function checkNickName(Request $request){\n+        $user = Auth::user();\n+\n         $validation = Validator::make($request->all(), [\n-            'nick_name' => 'required',\n+            'nick_name' => \"required|unique:users,user_name,{$user->id}\",\n         ]);\n         $data = $request->all();\n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n@@ -731,8 +733,9 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n+        \n     }\n \n     public function cmsPage(Request $request)\n     {\n"
                },
                {
                    "date": 1628016824917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -732,8 +732,17 @@\n                 'error' => true,\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n+        }else{\n+            $resp = [\n+                'status' => true,\n+                'data' => '',\n+                'message' => 'Available',\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            return response()->json($resp, $this->statusCode);\n         }\n         \n     }\n \n"
                },
                {
                    "date": 1628016833583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -736,9 +736,9 @@\n         }else{\n             $resp = [\n                 'status' => true,\n                 'data' => '',\n-                'message' => 'Available',\n+                'message' => 'User name available',\n                 'error' => true,\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n"
                },
                {
                    "date": 1628016898774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -719,9 +719,9 @@\n     public function checkNickName(Request $request){\n         $user = Auth::user();\n \n         $validation = Validator::make($request->all(), [\n-            'nick_name' => \"required|unique:users,user_name,{$user->id}\",\n+            'user_name' => \"required|unique:users,user_name,{$user->id}\",\n         ]);\n         $data = $request->all();\n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n@@ -737,9 +737,9 @@\n             $resp = [\n                 'status' => true,\n                 'data' => '',\n                 'message' => 'User name available',\n-                'error' => true,\n+                'error' => false,\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n"
                },
                {
                    "date": 1628016914212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -719,9 +719,9 @@\n     public function checkNickName(Request $request){\n         $user = Auth::user();\n \n         $validation = Validator::make($request->all(), [\n-            'user_name' => \"required|unique:users,user_name,{$user->id}\",\n+            'nick_name' => \"required|unique:users,user_name,{$user->id}\",\n         ]);\n         $data = $request->all();\n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n"
                },
                {
                    "date": 1628016994791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -719,9 +719,9 @@\n     public function checkNickName(Request $request){\n         $user = Auth::user();\n \n         $validation = Validator::make($request->all(), [\n-            'nick_name' => \"required|unique:users,user_name,{$user->id}\",\n+            'nick_name' => 'required|unique:users,user_name,' . $user->id,\n         ]);\n         $data = $request->all();\n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n"
                },
                {
                    "date": 1628017012481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -717,9 +717,9 @@\n     }\n  \n     public function checkNickName(Request $request){\n         $user = Auth::user();\n-\n+        echo $user->id;die;\n         $validation = Validator::make($request->all(), [\n             'nick_name' => 'required|unique:users,user_name,' . $user->id,\n         ]);\n         $data = $request->all();\n"
                },
                {
                    "date": 1628017059371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -719,9 +719,9 @@\n     public function checkNickName(Request $request){\n         $user = Auth::user();\n         echo $user->id;die;\n         $validation = Validator::make($request->all(), [\n-            'nick_name' => 'required|unique:users,user_name,' . $user->id,\n+            'nick_name' => 'unique:users,user_name,' . $user->id,\n         ]);\n         $data = $request->all();\n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n"
                },
                {
                    "date": 1628017092846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -717,13 +717,14 @@\n     }\n  \n     public function checkNickName(Request $request){\n         $user = Auth::user();\n-        echo $user->id;die;\n+        \n         $validation = Validator::make($request->all(), [\n             'nick_name' => 'unique:users,user_name,' . $user->id,\n         ]);\n         $data = $request->all();\n+        print_r($validation);die;\n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n             $resp = [\n                 'status' => false,\n"
                },
                {
                    "date": 1628017122412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -722,9 +722,9 @@\n         $validation = Validator::make($request->all(), [\n             'nick_name' => 'unique:users,user_name,' . $user->id,\n         ]);\n         $data = $request->all();\n-        print_r($validation);die;\n+        print_r($validation->messages()->first());die;\n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n             $resp = [\n                 'status' => false,\n"
                },
                {
                    "date": 1628017134844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -722,9 +722,9 @@\n         $validation = Validator::make($request->all(), [\n             'nick_name' => 'unique:users,user_name,' . $user->id,\n         ]);\n         $data = $request->all();\n-        print_r($validation->messages()->first());die;\n+        print_r($validation->fails());die;\n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n             $resp = [\n                 'status' => false,\n"
                },
                {
                    "date": 1628017478473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -719,9 +719,9 @@\n     public function checkNickName(Request $request){\n         $user = Auth::user();\n         \n         $validation = Validator::make($request->all(), [\n-            'nick_name' => 'unique:users,user_name,' . $user->id,\n+            'nick_name' => ['required', Rule::unique('users')->ignore($user)]\n         ]);\n         $data = $request->all();\n         print_r($validation->fails());die;\n         if ($validation->fails()) {\n"
                },
                {
                    "date": 1628017520317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n use TCG\\Voyager\\Facades\\Voyager;\n use App\\Models\\Order;\n use App\\Models\\OrderItem;\n use App\\Models\\Restaurant;\n-\n+use Illuminate\\Validation\\Rule;\n /**\n  * @group Authentication\n  *\n  * Class AuthController\n"
                },
                {
                    "date": 1628017543489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -719,9 +719,9 @@\n     public function checkNickName(Request $request){\n         $user = Auth::user();\n         \n         $validation = Validator::make($request->all(), [\n-            'nick_name' => ['required', Rule::unique('users')->ignore($user)]\n+            'user_name' => ['required', Rule::unique('users')->ignore($user)]\n         ]);\n         $data = $request->all();\n         print_r($validation->fails());die;\n         if ($validation->fails()) {\n"
                },
                {
                    "date": 1628017558415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -722,9 +722,9 @@\n         $validation = Validator::make($request->all(), [\n             'user_name' => ['required', Rule::unique('users')->ignore($user)]\n         ]);\n         $data = $request->all();\n-        print_r($validation->fails());die;\n+        //print_r($validation->fails());die;\n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n             $resp = [\n                 'status' => false,\n"
                },
                {
                    "date": 1628017621137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n use TCG\\Voyager\\Facades\\Voyager;\n use App\\Models\\Order;\n use App\\Models\\OrderItem;\n use App\\Models\\Restaurant;\n-use Illuminate\\Validation\\Rule;\n+\n /**\n  * @group Authentication\n  *\n  * Class AuthController\n@@ -719,12 +719,12 @@\n     public function checkNickName(Request $request){\n         $user = Auth::user();\n         \n         $validation = Validator::make($request->all(), [\n-            'user_name' => ['required', Rule::unique('users')->ignore($user)]\n+            'nick_name' => 'unique:users,user_name,' . $user->id,\n         ]);\n         $data = $request->all();\n-        //print_r($validation->fails());die;\n+        print_r($validation->fails());die;\n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n             $resp = [\n                 'status' => false,\n"
                },
                {
                    "date": 1628017850705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -716,15 +716,15 @@\n         $img->save($path);\n     }\n  \n     public function checkNickName(Request $request){\n+\n         $user = Auth::user();\n-        \n+\n         $validation = Validator::make($request->all(), [\n-            'nick_name' => 'unique:users,user_name,' . $user->id,\n+            'nick_name' => 'required',\n         ]);\n         $data = $request->all();\n-        print_r($validation->fails());die;\n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n             $resp = [\n                 'status' => false,\n@@ -733,18 +733,12 @@\n                 'error' => true,\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n-        }else{\n-            $resp = [\n-                'status' => true,\n-                'data' => '',\n-                'message' => 'User name available',\n-                'error' => false,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n         }\n+\n+        $checkUserName = User::where('user_name', $data['nick_name'])->where('id', '<>', $user->id)->first();\n+        print_r($checkUserName);die;\n         \n     }\n \n     public function cmsPage(Request $request)\n"
                },
                {
                    "date": 1628017865913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -735,9 +735,9 @@\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n \n-        $checkUserName = User::where('user_name', $data['nick_name'])->where('id', '<>', $user->id)->first();\n+        $checkUserName = User::where('user_names', $data['nick_name'])->where('id', '<>', $user->id)->first();\n         print_r($checkUserName);die;\n         \n     }\n \n"
                },
                {
                    "date": 1628017887331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -735,9 +735,9 @@\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n \n-        $checkUserName = User::where('user_names', $data['nick_name'])->where('id', '<>', $user->id)->first();\n+        $checkUserName = User::where('user_name', $data['nick_name'])->where('id', '<>', $user->id)->first();\n         print_r($checkUserName);die;\n         \n     }\n \n"
                },
                {
                    "date": 1628017904855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -735,9 +735,9 @@\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n \n-        $checkUserName = User::where('user_name', $data['nick_name'])->where('id', '<>', $user->id)->first();\n+        $checkUserName = User::where('user_name', $data['nick_name'])->where('id', '<>', $user->id)->count();\n         print_r($checkUserName);die;\n         \n     }\n \n"
                },
                {
                    "date": 1628017917785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -735,9 +735,9 @@\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n \n-        $checkUserName = User::where('user_name', $data['nick_name'])->where('id', '<>', $user->id)->count();\n+        $checkUserName = User::where('user_names', $data['nick_name'])->where('id', '<>', $user->id)->count();\n         print_r($checkUserName);die;\n         \n     }\n \n"
                },
                {
                    "date": 1628018165242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -735,10 +735,28 @@\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n \n-        $checkUserName = User::where('user_names', $data['nick_name'])->where('id', '<>', $user->id)->count();\n-        print_r($checkUserName);die;\n+        $checkUserName = User::where('user_name', $data['nick_name'])->where('id', '<>', $user->id)->count();\n+        if($checkUserName > 0){\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => 'Nick name already exist',\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+        }else{\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => 'Nick name avaiable',\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+        }\n+\n+        return response()->json($resp, $this->statusCode);\n         \n     }\n \n     public function cmsPage(Request $request)\n"
                },
                {
                    "date": 1628018176174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -748,9 +748,9 @@\n         }else{\n             $resp = [\n                 'status' => false,\n                 'data' => '',\n-                'message' => 'Nick name avaiable',\n+                'message' => 'Nick name available',\n                 'error' => true,\n                 'errors' => '',\n             ];\n         }\n"
                },
                {
                    "date": 1628018184544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -746,12 +746,12 @@\n                 'errors' => '',\n             ];\n         }else{\n             $resp = [\n-                'status' => false,\n+                'status' => true,\n                 'data' => '',\n                 'message' => 'Nick name available',\n-                'error' => true,\n+                'error' => false,\n                 'errors' => '',\n             ];\n         }\n \n"
                },
                {
                    "date": 1628056580828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -444,9 +444,9 @@\n         $dataArray[] = $dataRow;\n         $this->userSetHidden($user);\n         $resp = [\n             'status' => true,\n-            'data' => $dataArray,\n+            'data' => $dataRow,\n             'message' => 'success',\n             'error' => false,\n             'errors' => '',\n         ];\n"
                },
                {
                    "date": 1628056711808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -691,9 +691,9 @@\n         $this->userSetHidden($user);\n         \n         $resp = [\n             'status' => true,\n-            'data' => $dataArray,\n+            'data' => $dataRow,\n             'message' => 'Updated Successfully.',\n             'error' => false,\n             'errors' => '',\n             //'image_path' => env('ASSET_URL') . '/images/profile'\n"
                },
                {
                    "date": 1628056768834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -658,9 +658,9 @@\n         // } \n \n         $userProfileArr = array(\n             'name' => isset($data['name']) && $data['name'] != '' ? $data['name'] : $user->name,\n-            'user_name' => isset($data['nick_name']) && $data['nick_name'] != '' ? $data['nick_name'] : $user->user_name,\n+            'user_name' => isset($data['nick_name']) && $data['nick_name'] != '' ? '@'.$data['nick_name'] : $user->user_name,\n             'user_bio' => isset($data['user_bio']) && $data['user_bio'] != '' ? $data['user_bio'] : $user->user_bio,\n             'mobile_number' => isset($data['mobile_number']) && $data['mobile_number'] != '' ? $data['mobile_number'] : $user->mobile_number,\n             //'email' => isset($data['email']) && $data['email'] != '' ? $data['email'] : $user->email,\n             'gender' => isset($data['gender']) && $data['gender'] != '' ? $data['gender'] : $user->gender,\n"
                },
                {
                    "date": 1628060337466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,15 +18,11 @@\n use App\\Models\\PostLike;\n use Illuminate\\Support\\Str;\n use App\\Models\\Page;\n use App\\Models\\Notification;\n-use App\\Models\\Enquiry;\n use App\\Models\\UserFollower;\n use App\\Models\\ApiLogs;\n use TCG\\Voyager\\Facades\\Voyager;\n-use App\\Models\\Order;\n-use App\\Models\\OrderItem;\n-use App\\Models\\Restaurant;\n \n /**\n  * @group Authentication\n  *\n"
                },
                {
                    "date": 1628077912972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,971 @@\n+<?php\n+\n+namespace App\\Http\\Controllers\\API\\V1;\n+\n+use Validator;\n+use Illuminate\\Http\\Request;\n+use Illuminate\\Support\\Facades\\Auth;\n+use Illuminate\\Support\\Facades\\Storage;\n+use Illuminate\\Support\\Facades\\Hash;\n+use Illuminate\\Foundation\\Auth\\AuthenticatesUsers;\n+use Image;\n+use App\\User;\n+use Illuminate\\Support\\Facades\\DB;\n+use App\\Models\\Countries;\n+use App\\Models\\States;\n+use App\\Models\\Post;\n+use App\\Models\\Comment;\n+use App\\Models\\PostLike;\n+use Illuminate\\Support\\Str;\n+use App\\Models\\Page;\n+use App\\Models\\Notification;\n+use App\\Models\\UserFollower;\n+use App\\Models\\ApiLogs;\n+use TCG\\Voyager\\Facades\\Voyager;\n+use App\\Models\\VoxoMedias;\n+\n+/**\n+ * @group Authentication\n+ *\n+ * Class AuthController\n+ *\n+ * Fullfills all aspects related to authenticate a user.\n+ */\n+class AuthController extends APIController\n+{\n+\n+    use AuthenticatesUsers;\n+    public function register(Request $request)\n+    {\n+        $time = date('Y-m-d H:i:s');\n+        $validation = Validator::make($request->all(), [\n+            'name' => 'required',\n+            'mobile_number' => 'required|regex:/^[0-9]{9,12}$/',\n+            'email' => 'required|email',\n+            'password' => 'required|min:8',\n+        ]);\n+        $data = $request->all();\n+        if ($validation->fails()) {\n+            //return $this->throwValidation($validation->messages()->first());\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => $validation->messages()->first(),\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        }\n+        $checkuser = User::where(['mobile_number' => $request->get('mobile_number'), 'role_id' => USER_ROLE])->count();\n+        if($checkuser == 1){\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => 'The phone number has already been taken',\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        } \n+\n+        $checkuser = User::where(['email' => $request->get('email'), 'role_id' => USER_ROLE])->count();\n+        if($checkuser == 1){\n+            $resp = [\n+                'status' => false,\n+                'data' => $resposeArray,\n+                'message' => 'The email has already been taken',\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        } \n+\n+\n+        $otp = randomOTP();\n+        //print_r($data);die;\n+        $token ='';\n+        //$otp = '1234';\n+        $arr = [\n+            'role_id' => USER_ROLE,\n+            'name' => $data['name'],\n+            'mobile_number' => $data['mobile_number'],\n+            'email' => $data['email'],\n+            'password' => Hash::make($data['password']),\n+            'device_token' => $data['device_token'],\n+            'device_type' => $data['device_type'],\n+            'otp' => $otp\n+        ];\n+            //dd($arr);\n+        try {\n+\n+            $user = User::create($arr);\n+\n+            $notify_message = $otp . ' is the OTP for accessing your Mealox account. PLEASE DO NOT SHARE IT WITH ANYONE.';\n+            $notification_data = ['type' => 'otp', 'message' => $notify_message, 'user_id' => $user->id];\n+            $sendSms = sendGCMUser($user->device_token, 'Verify OTP', $notify_message, $user->device_type, $notification_data);\n+            $this->sendSms2($notify_message, $data['mobile_number']);\n+            //$this->sendSms($notify_message, $data['phone']);\n+\n+            $passportToken = $user->createToken('API Access Token');\n+            $passportToken->token->save();\n+            $token = $passportToken->accessToken;\n+\n+        } catch (\\Exception $e) {\n+            return $this->respondInternalError($e->getMessage());\n+        }\n+\n+        $resp = [\n+            'status' => true,\n+            'data' => $user,\n+            'token' => $token,\n+            'message' => 'Otp send successfully.',\n+            'error' => false,\n+            'errors' => '',\n+            'user_path' => env('APP_URL').'/public/images/profile/',\n+        ];\n+        return response()->json($resp, $this->statusCode);\n+    }\n+\n+\n+    /**\n+     * Attempt to login the user.\n+     *\n+     * If login is successfull, you get an api_token in response. Use that api_token to authenticate yourself for further api calls.\n+     *\n+     * @bodyParam email string required Your email id. Example: \"user@test.com\"\n+     * @bodyParam password string required Your Password. Example: \"abc@123_4\"\n+     *\n+     * @responseFile status=401 scenario=\"api_key not provided\" responses/unauthenticated.json\n+     * @responseFile responses/auth/login.json\n+     *\n+     * @param  \\Illuminate\\Http\\Request  $request\n+     * @return \\Illuminate\\Http\\JsonResponse\n+     */\n+    public function login(Request $request)\n+    {\n+        $validation = Validator::make($request->all(), [\n+            'mobile_number' => 'required'\n+        ]);\n+\n+        if ($validation->fails()) {\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => $validation->messages()->first(),\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        }\n+\n+        $resposeArray = array();\n+        $checkuser = User::where(['mobile_number' => $request->get('mobile_number'), 'role_id' => USER_ROLE])->count();\n+        $otp = randomOTP();\n+        $resposeArray = array(\n+            'mobile_number' => $request->get('mobile_number'),\n+            'otp' => $otp\n+        );\n+        \n+        if($checkuser == 0){\n+            $arr = [\n+                'role_id' => USER_ROLE,\n+                'mobile_number' => $request->get('mobile_number'),\n+                'password' => Hash::make('123456'),\n+                'status' => 0,\n+                'device_token' => $request->get('device_token'),\n+                'device_type' => $request->get('device_type'),\n+                'otp' => $otp\n+            ];\n+            $user = User::create($arr);\n+        }else{\n+            User::where('mobile_number', $request->get('mobile_number'))->update(['otp'=>$otp]);\n+        }   \n+        \n+        try {\n+            $user = User::where('mobile_number', $request->get('mobile_number'))->first();\n+            // Save generated token\n+            $notify_message = $otp . ' is the OTP for accessing your account. PLEASE DO NOT SHARE IT WITH ANYONE.';\n+            $notification_data = ['type' => 'otp', 'message' => $notify_message, 'user_id' => $user->id];\n+            $sendSms = sendGCMUser($user->device_token, 'Verify OTP', $notify_message, $user->device_type, $notification_data);\n+           \n+            //$this->sendSms($notify_message, $user->phone);\n+\n+        } catch (\\Exception $e) {\n+            return $this->respondInternalError($e->getMessage());\n+        }\n+\n+        return $this->respond([\n+            'status' => true,\n+            'message' => 'Otp send successfully.',\n+            'data' => $resposeArray,\n+            'error' => false,\n+            'errors' => '',\n+        ]);\n+    }\n+\n+    public function verifyOtp(Request $request) {\n+\n+        $validation = Validator::make($request->all(), [\n+            'mobile_number' => 'required',\n+            'otp' => 'required',\n+        ]);\n+\n+        if ($validation->fails()) {\n+            //return $this->throwValidation($validation->messages()->first());\n+            $resp = [\n+                'status' => true,\n+                'data' => '',\n+                'message' => $validation->messages()->first(),\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        }\n+        $user = User::select('id', 'name','user_name as nickname', 'email', 'mobile_number')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n+       \n+        if($user){\n+            DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n+            $passportToken = $user->createToken('API Access Token');\n+            $passportToken->token->save();\n+            $token = $passportToken->accessToken;\n+            $dataArray[] = $user;\n+            $resp = [\n+                'status' => true,\n+                'data' => $dataArray,\n+                'is_register' => 1,\n+                'token' => $token,\n+                'message' => 'success',\n+                'error' => false,\n+                'errors' => '',\n+            ];\n+        }else{\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => 'Otp not verified.',\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+        }\n+\n+       \n+        return response()->json($resp, $this->statusCode);\n+\n+    }\n+\n+    public function resendOtp(Request $request)\n+    {\n+        $data = $request->all();\n+        $validation = Validator::make($request->all(), [\n+            'mobile_number' => 'required',\n+        ]);\n+\n+        if ($validation->fails()) {\n+            //return $this->throwValidation($validation->messages()->first());\n+            $resp = [\n+                'status' => true,\n+                'data' => '',\n+                'message' => $validation->messages()->first(),\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        }\n+        $otp = randomOTP();\n+        $resposeArray = array(\n+            'mobile_number' => $request->get('mobile_number'),\n+            'otp' => $otp\n+        );\n+        $user = User::where(['users.mobile_number' => $data['mobile_number'], 'role_id' => USER_ROLE])->count();\n+        if($user > 0){\n+           \n+            DB::table('users')->where('mobile_number', $data['mobile_number'])->update(['otp' => $otp]);\n+            $user = User::where('users.mobile_number', $data['mobile_number'])->first();\n+            \n+            $notify_message = $otp . ' is the OTP for accessing your MLM account. PLEASE DO NOT SHARE IT WITH ANYONE.';\n+            $notification_data = ['type' => 'otp', 'message' => $notify_message, 'user_id' => $user->id];\n+            $sendSms = sendGCMUser($user->device_token, 'Verify OTP', $notify_message, $user->device_type, $notification_data);\n+            $resp = [\n+                'status' => true,\n+                'data' => $resposeArray,\n+                'message' => 'Otp sent.',\n+                'error' => false,\n+                'errors' => '',\n+            ];\n+            \n+        }else{\n+            $resp = [\n+                'status' => false,\n+                'data' => $resposeArray,\n+                'message' => 'User not found.',\n+                'is_register' => 0,\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            \n+        }\n+        return response()->json($resp, $this->statusCode);\n+\n+    }\n+\n+    public function socialLogin(Request $request){\n+        $validation = Validator::make($request->all(), [\n+            'email' => 'required|email',\n+            'social_id' => 'required',\n+            'social_type' => 'required',\n+            //'device_token' => 'required',\n+            'device_type' => 'required',\n+        ]);\n+        $data = $request->all();\n+        if ($validation->fails()) {\n+            //return $this->throwValidation($validation->messages()->first());\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => $validation->messages()->first(),\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        }\n+        $checkuser = User::where(['email' => $request->get('email'), 'social_id' => $request->get('social_id')])->count();\n+        if($checkuser == 0){\n+            \n+            $arr = [\n+                'role_id' => USER_ROLE,\n+                'name' => $request->get('name') != null ? $request->get('name') : '',\n+                'email' => $request->get('email'),\n+                'user_name' => '@'.explode('@', $request->get('email'))[0].'_'.rand(11,99),\n+                'mobile_number' => $request->get('mobile_number') != null ? $request->get('mobile_number') : '',\n+                'password' => Hash::make('123456'),\n+                'status' => 1,\n+                'social_id' => $request->get('social_id'),\n+                'login_type' => $request->get('social_type'),\n+                'device_token' => $request->get('device_token') != null ? $request->get('device_token') : '',\n+                'device_type' => $request->get('device_type'),\n+            ];\n+            $user = User::create($arr);\n+            $user = User::select('id', 'name','user_name as nickname', 'email', 'mobile_number')->where(['id'=> $user->id])->first();\n+        }else{\n+            $user = User::select('id', 'name','user_name as nickname', 'email', 'mobile_number')->where(['email'=> $request->get('email')])->first();    \n+        }\n+        \n+       \n+        if($user){\n+            $passportToken = $user->createToken('API Access Token');\n+            $passportToken->token->save();\n+            $token = $passportToken->accessToken;\n+            $dataArray[] = $user;\n+            $resp = [\n+                'status' => true,\n+                'data' => $dataArray,\n+                'is_register' => 1,\n+                'token' => $token,\n+                'message' => 'success',\n+                'error' => false,\n+                'errors' => '',\n+            ];\n+        }else{\n+            $resp = [\n+                'status' => false,\n+                'data' => [],\n+                'message' => 'Something went wrong.',\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+        }\n+\n+        return response()->json($resp, $this->statusCode);\n+    }\n+\n+    public function getCountries()\n+    {\n+        $countries = Countries::get();\n+       \n+        $resp = [\n+            'status' => true,\n+            'data' => $countries,\n+            'message' => 'success',\n+            'error' => false,\n+            'errors' => '',\n+        ];\n+        return response()->json($resp, $this->statusCode);\n+    }\n+\n+    public function getStates(Request $request)\n+    {\n+        $rule = [\n+            'country_id' => 'required',\n+        ];\n+        $data = $request->all();\n+        $states = array();\n+        if ($this->validateData($data, $rule)) {\n+            $states = States::where('country_id', $data['country_id'])->get();\n+        }\n+        $resp = [\n+            'status' => true,\n+            'data' => $states ,\n+            'message' => 'success',\n+            'error' => false,\n+            'errors' => '',\n+        ];\n+        return response()->json($resp, $this->statusCode);\n+    }\n+    \n+    /**\n+     * Get the authenticated User.\n+     *\n+     * @responseFile status=401 scenario=\"api_key not provided\" responses/unauthenticated.json\n+     * @responseFile responses/auth/me.json\n+     *\n+     * @param  \\Illuminate\\Http\\Request  $request\n+     * @return \\Illuminate\\Http\\JsonResponse\n+     */\n+    public function me()\n+    {\n+        $userID = Auth::user();\n+        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio', 'avatar', 'thumb_avatar')->where('users.id', $userID->id)->first();\n+\n+        $dataRow['id'] = $user->id;\n+        $dataRow['nick_name'] = $user->nick_name;\n+        $dataRow['name'] = $user->name;\n+        $dataRow['email'] = $user->email;\n+        $dataRow['mobile_number'] = $user->mobile_number;\n+        $dataRow['followers'] = 0;\n+        $dataRow['following'] = 0;\n+        $dataRow['likes'] = 0;\n+        $dataRow['user_bio'] = $user->user_bio;\n+        $dataRow['full_image'] = env('APP_URL').'/storage/app/public/'.$user->avatar;\n+        $dataRow['thumb_image'] = env('APP_URL').'/storage/app/public/'.$user->thumb_avatar;\n+\n+        $dataArray[] = $dataRow;\n+        $this->userSetHidden($user);\n+        $resp = [\n+            'status' => true,\n+            'data' => $dataRow,\n+            'message' => 'success',\n+            'error' => false,\n+            'errors' => '',\n+        ];\n+        return response()->json($resp, $this->statusCode);\n+    }\n+\n+    public function userProfile(Request $request)\n+    {\n+        $userID = Auth::user();\n+        $data = $request->all();\n+        $user = User::where('users.id', $data['user_id'])->first();\n+\n+        $this->userSetHidden($user);\n+        $resp = [\n+            'status' => true,\n+            'data' => $user,\n+            'message' => 'success',\n+            'error' => false,\n+            'errors' => '',\n+            'user_path' => env('APP_URL').'/public/images/profile/',\n+        ];\n+        return response()->json($resp, $this->statusCode);\n+    }\n+\n+    \n+    /**\n+     * Attempt to logout the user.\n+     *\n+     * After successfull logut the token get invalidated and can not be used further.\n+     *\n+     * @responseFile status=401 scenario=\"api_key not provided\" responses/unauthenticated.json\n+     * @responseFile responses/auth/logout.json\n+     *\n+     * @param  \\Illuminate\\Http\\Request  $request\n+     * @return \\Illuminate\\Http\\JsonResponse\n+     */\n+    public function logout(Request $request)\n+    {\n+        try {\n+            $request->user()->token()->revoke();\n+        } catch (\\Exception $e) {\n+            return $this->respondInternalError($e->getMessage());\n+        }\n+\n+        $resp = [\n+            'status' => true,\n+            'data' => '',\n+            'message' => trans('api.messages.logout.success'),\n+            'error' => true,\n+            'errors' => '',\n+        ];\n+        return response()->json($resp, $this->statusCode);\n+       \n+    }\n+\n+    public function changePassword(Request $request)\n+    {\n+        $errors = '';\n+        \n+        if (!(Hash::check($request->get('old_password'), Auth::user()->password))) {\n+            $message = 'Old password is wrong.';\n+            $errors = ['Old password is wrong.'];\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => $message,\n+                'error' => true,\n+                'errors' => $errors,\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        } else if (strcmp($request->get('old_password'), $request->get('new_password')) == 0) {\n+            $message = 'New password cannot be same as old password.';\n+            $errors = ['New password cannot be same as old password.'];\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => $message,\n+                'error' => true,\n+                'errors' => $errors,\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        } else {\n+            $validation = Validator::make($request->all(), [\n+                'old_password' => 'required',\n+                'new_password' => 'string|min:8|max:25|required_with:confirm_password|same:confirm_password',\n+            ]);\n+           \n+            $data = $request->all();\n+            if ($validation->fails()) {\n+                //return $this->throwValidation($validation->messages()->first());\n+                $resp = [\n+                    'status' => false,\n+                    'data' => '',\n+                    'message' => $validation->messages()->first(),\n+                    'error' => true,\n+                    'errors' => '',\n+                ];\n+                return response()->json($resp, $this->statusCode);\n+            }\n+            $user = Auth::user();\n+            $user->password = bcrypt($request->get('new_password'));\n+            $user->save();\n+            $message = 'Password changed successfully';\n+            \n+        }\n+        $resp = [\n+            'status' => true,\n+            'data' => '',\n+            'message' => $message,\n+            'error' => false,\n+            'errors' => $errors,\n+        ];\n+        return response()->json($resp, $this->statusCode);\n+    }\n+\n+    public function forgotPassword(Request $request)\n+    {\n+        $data = $request->all();\n+        $validation = Validator::make($request->all(), [\n+            'phone' => 'required',\n+        ]);\n+\n+        if ($validation->fails()) {\n+            //return $this->throwValidation($validation->messages()->first());\n+            $resp = [\n+                'status' => true,\n+                'data' => '',\n+                'message' => $validation->messages()->first(),\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        }\n+\n+        $user = User::where('users.mobile_number', $data['phone'])->count();\n+        if($user > 0){\n+            $password = randomPassword();\n+            $userProfileArr = array(\n+                'password' => Hash::make($password),\n+            );\n+\n+            DB::table('users')->where('mobile_number', $data['phone'])->update($userProfileArr);\n+            $user = User::where('users.mobile_number', $data['phone'])->first();\n+            \n+            $notify_message = $password . ' is the password for accessing your MLM account';\n+            $notification_data = ['type' => 'forgot', 'message' => $notify_message, 'user_id' => $user->id];\n+            $sendSms = sendGCMUser($user->device_token, 'Forgot password', $notify_message, $user->device_type, $notification_data);\n+            $this->sendSms2($notify_message, $data['phone']);\n+            $resp = [\n+                'status' => true,\n+                'data' => '',\n+                'message' => 'Password sent to your registred phone number.',\n+                'error' => false,\n+                'errors' => '',\n+            ];\n+            \n+        }else{\n+            $resp = [\n+                'status' => true,\n+                'data' => '',\n+                'message' => 'User not found.',\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            \n+        }\n+        return response()->json($resp, $this->statusCode);\n+\n+    }\n+\n+    public function updateProfile(Request $request)\n+    {\n+        $user = Auth::user();\n+        $avatarImage = $user->avatar;\n+        $avatarThumbImage = $user->thumb_avatar;\n+        $data = $request->all();\n+        \n+        if($request->hasFile('image')) {\n+            //get filename with extension\n+            $filenamewithextension = $request->file('image')->getClientOriginalName();\n+      \n+            //get filename without extension\n+            $filename = pathinfo($filenamewithextension, PATHINFO_FILENAME);\n+      \n+            //get file extension\n+            $extension = $request->file('image')->getClientOriginalExtension();\n+      \n+            //filename to store\n+            $avatarImage = $filename.'_'.time().'.'.$extension;\n+     \n+            //medium thumbnail name\n+            $avatarThumbImage = $filename.'_medium_'.time().'.'.$extension;\n+     \n+            //Upload File\n+            Storage::disk('pic_profile')->put($avatarImage, file_get_contents($request->file('image')->getRealPath()));\n+            Storage::disk('pic_profile')->put($avatarThumbImage, file_get_contents($request->file('image')->getRealPath()));\n+      \n+            //create medium thumbnail\n+            $avatarThumbImagepath = public_path('storage/users/'.$avatarThumbImage);\n+            //$img = Image::make($path)->resize(300, 185)->save($path);\n+            $this->createThumbnail($avatarThumbImagepath, 300, 185);\n+        }\n+\n+        // if (isset($data['image']) && $data['image']!= null ) {\n+        //     $name = 'img_' . time() . $request->file('image')->getClientOriginalName();\n+        //     Storage::disk('pic_profile')->put($name, file_get_contents($request->file('image')->getRealPath()));\n+        //     $avatarImage = $name;\n+        //     $imgPath = Storage::disk('pic_profile')->url($name);\n+        // } \n+\n+        $userProfileArr = array(\n+            'name' => isset($data['name']) && $data['name'] != '' ? $data['name'] : $user->name,\n+            'user_name' => isset($data['nick_name']) && $data['nick_name'] != '' ? '@'.$data['nick_name'] : $user->user_name,\n+            'user_bio' => isset($data['user_bio']) && $data['user_bio'] != '' ? $data['user_bio'] : $user->user_bio,\n+            'mobile_number' => isset($data['mobile_number']) && $data['mobile_number'] != '' ? $data['mobile_number'] : $user->mobile_number,\n+            //'email' => isset($data['email']) && $data['email'] != '' ? $data['email'] : $user->email,\n+            'gender' => isset($data['gender']) && $data['gender'] != '' ? $data['gender'] : $user->gender,\n+            'dob' => isset($data['dob']) && $data['dob'] != '' ? $data['dob'] : $user->dob,\n+            'avatar' => 'users/'.$avatarImage,\n+            'thumb_avatar' => 'users/'.$avatarThumbImage,\n+            'updated_at' => date('Y-m-d H:i:s'),\n+        );\n+\n+        DB::table('users')->where('id', $user->id)->update($userProfileArr);\n+\n+\n+        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio', 'avatar', 'thumb_avatar')->where('users.id', $user->id)->first();\n+\n+        $dataRow['id'] = $user->id;\n+        $dataRow['nick_name'] = $user->nick_name;\n+        $dataRow['name'] = $user->name;\n+        $dataRow['email'] = $user->email;\n+        $dataRow['mobile_number'] = $user->mobile_number;\n+        $dataRow['followers'] = 0;\n+        $dataRow['following'] = 0;\n+        $dataRow['likes'] = 0;\n+        $dataRow['user_bio'] = $user->user_bio;\n+        $dataRow['full_image'] = env('APP_URL').'/storage/app/public/'.$user->avatar;\n+        $dataRow['thumb_image'] = env('APP_URL').'/storage/app/public/'.$user->thumb_avatar;\n+\n+        $dataArray[] = $dataRow;\n+        $this->userSetHidden($user);\n+        \n+        $resp = [\n+            'status' => true,\n+            'data' => $dataRow,\n+            'message' => 'Updated Successfully.',\n+            'error' => false,\n+            'errors' => '',\n+            //'image_path' => env('ASSET_URL') . '/images/profile'\n+        ];\n+        return response()->json($resp, $this->statusCode);\n+    }\n+\n+    /**\n+     * Create a thumbnail of specified size\n+     *\n+     * @param string $path path of thumbnail\n+     * @param int $width\n+     * @param int $height\n+     */\n+    public function createThumbnail($path, $width, $height)\n+    {\n+        $img = Image::make($path)->resize($width, $height, function ($constraint) {\n+            $constraint->aspectRatio();\n+        });\n+        $img->save($path);\n+    }\n+ \n+    public function checkNickName(Request $request){\n+\n+        $user = Auth::user();\n+\n+        $validation = Validator::make($request->all(), [\n+            'nick_name' => 'required',\n+        ]);\n+        $data = $request->all();\n+        if ($validation->fails()) {\n+            //return $this->throwValidation($validation->messages()->first());\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => $validation->messages()->first(),\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        }\n+\n+        $checkUserName = User::where('user_name', $data['nick_name'])->where('id', '<>', $user->id)->count();\n+        if($checkUserName > 0){\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => 'Nick name already exist',\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+        }else{\n+            $resp = [\n+                'status' => true,\n+                'data' => '',\n+                'message' => 'Nick name available',\n+                'error' => false,\n+                'errors' => '',\n+            ];\n+        }\n+\n+        return response()->json($resp, $this->statusCode);\n+        \n+    }\n+\n+    public function cmsPage(Request $request)\n+    {\n+        $userID = Auth::user();\n+        $data = $request->all();\n+        $validation = Validator::make($data, [\n+            'slug' => 'required',\n+        ]);\n+\n+        if ($validation->fails()) {\n+            $resp = [\n+                'status' => true,\n+                'data' => '',\n+                'message' => $validation->messages()->first(),\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        }\n+\n+        $this->data = Page::where('slug', $data['slug'])->first();\n+        $resp = [\n+            'status' => true,\n+            'data' => $this->data,\n+            'message' => 'Success.',\n+            'error' => false,\n+            'errors' => '',\n+        ];\n+        return response()->json($resp, $this->statusCode);\n+\n+    }\n+\n+    public function notification(Request $request)\n+    {\n+        $userID = Auth::user();\n+        $this->data = Notification::select('title', 'content', 'created_at')->where('user_id', $userID->id)->get();\n+        $input = array(\n+            'is_read' => 1,\n+        );\n+        Notification::where('user_id', $userID->id)->update($input);\n+        $resp = [\n+            'status' => true,\n+            'data' => $this->data,\n+            'message' => 'Success.',\n+            'error' => false,\n+            'errors' => '',\n+            'user_path' => env('APP_URL').'/public/images/profile/',\n+        ];\n+        return response()->json($resp, $this->statusCode);\n+    }\n+\n+    public function sendSms2($message, $mobile){\n+        \n+\n+        $url = 'http://msg.ampleinfosoft.biz/submitsms.jsp?user=ayuvahel&key=c79d1b0438XX&mobile='.$mobile.'&message='.urlencode($message).'&senderid=AYUVAL&accusage=1';\n+\n+        //echo $url;die;\n+        $curl = curl_init();\n+\n+        curl_setopt_array($curl, array(\n+            CURLOPT_URL => $url,\n+            CURLOPT_RETURNTRANSFER => true,\n+            CURLOPT_ENCODING => \"\",\n+            CURLOPT_MAXREDIRS => 10,\n+            CURLOPT_TIMEOUT => 30,\n+            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n+            CURLOPT_CUSTOMREQUEST => \"GET\",\n+        ));\n+\n+        $response = curl_exec($curl);\n+        $err = curl_error($curl);\n+\n+        curl_close($curl);\n+        return $response;\n+        //print_r($response);die;\n+    }\n+    \n+    public function sendSms($message, $mobile)\n+    {\n+        \n+        $fields = array(\n+            \"sender_id\" => \"FSTSMS\",\n+            \"message\" => $message,\n+            \"language\" => \"english\",\n+            \"route\" => \"p\",\n+            \"numbers\" => $mobile,\n+            \"flash\" => \"1\"\n+        );\n+\n+        $curl = curl_init();\n+\n+        curl_setopt_array($curl, array(\n+            CURLOPT_URL => \"https://www.fast2sms.com/dev/bulk\",\n+            CURLOPT_RETURNTRANSFER => true,\n+            CURLOPT_ENCODING => \"\",\n+            CURLOPT_MAXREDIRS => 10,\n+            CURLOPT_TIMEOUT => 30,\n+            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n+            CURLOPT_CUSTOMREQUEST => \"POST\",\n+            CURLOPT_POSTFIELDS => json_encode($fields),\n+            CURLOPT_HTTPHEADER => array(\n+                \"authorization: 6pAFulWXI7UwkjGn8dyE4QgJeD5R0q2cimazLxTvOs3C1NfHbhcMhZ1EH0ib8tGxYFQayAfCOPUKgp73\",\n+                \"accept: */*\",\n+                \"cache-control: no-cache\",\n+                \"content-type: application/json\"\n+            ),\n+        ));\n+\n+        $response = curl_exec($curl);\n+        $err = curl_error($curl);\n+\n+        curl_close($curl);\n+        return $response;\n+       // print_r($response);die;\n+        if ($err) {\n+            echo \"cURL Error #:\" . $err;\n+        } else {\n+            echo $response;\n+        }\n+    }\n+\n+    public function getHomeList(Request $request){\n+\n+        $dataArray =  array();\n+        $imageData =  $imageDataArray = array();\n+        $imageData1['id'] = 1;\n+        $imageData1['image'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n+        $imageData1['thumbnail'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n+        \n+\n+        $imageData2['id'] = 2;\n+        $imageData2['image'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n+        $imageData2['thumbnail'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n+        $imageDataArray = array(0 =>$imageData1, 1 => $imageData2);\n+\n+        $videoData['id'] = 1;\n+        $videoData['video'] = env('APP_URL').'/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n+        $videoDataArray = array(0 =>$videoData);\n+        \n+        $dataRow['id'] = 1;\n+        $dataRow['type'] = 'image';\n+        $dataRow['image_array'] = $imageDataArray;\n+        $dataRow['name'] = 'Praveen Singh';\n+        $dataRow['nick_name'] = '@praveen_singh';\n+        $dataRow['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow['is_like'] = true;\n+        $dataRow['comments_count'] = '26M';\n+        $dataRow['share_post'] = '';\n+        $dataRow['is_follow'] = true;\n+\n+        $dataRow2['id'] = 2;\n+        $dataRow2['type'] = 'video';\n+        $dataRow2['image_array'] = $videoDataArray;\n+        $dataRow2['name'] = 'Praveen Singh';\n+        $dataRow2['nick_name'] = '@praveen_singh';\n+        $dataRow2['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow2['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $dataRow2['is_like'] = true;\n+        $dataRow2['comments_count'] = '26M';\n+        $dataRow2['share_post'] = '';\n+        $dataRow2['is_follow'] = true;\n+\n+        $dataArray = array(0 =>$dataRow, 1 => $dataRow2);\n+        $resp = [\n+            'status' => true,\n+            'data' => $dataArray,\n+            'message' => 'success',\n+            'error' => false,\n+            'errors' => '',\n+        ];\n+        return response()->json($resp, $this->statusCode);\n+    }\n+\n+\n+    public function getReelsList(Request $request){\n+\n+        $data =  array();\n+        $data['id'] = 1;\n+        $data['type'] = 'video';\n+        $data['video_url'] = env('APP_URL').'/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n+        $data['name'] = 'Praveen Singh';\n+        $data['nick_name'] = '@praveen_singh';\n+        $data['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $data['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $data['is_like'] = true;\n+        $data['comments_count'] = '26M';\n+        $data['share_post'] = '';\n+        $data['is_follow'] = true;\n+\n+        $data2['id'] = 2;\n+        $data2['type'] = 'video';\n+        $data2['video_url'] = env('APP_URL').'/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n+        $data2['name'] = 'Praveen Singh';\n+        $data2['nick_name'] = '@praveen_singh';\n+        $data2['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $data2['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n+        $data2['is_like'] = true;\n+        $data2['comments_count'] = '26M';\n+        $data2['share_post'] = '';\n+        $data2['is_follow'] = true;\n+\n+        $dataArray = array(0 =>$data, 1 => $data2);\n+        $resp = [\n+            'status' => true,\n+            'data' => $dataArray,\n+            'message' => 'success',\n+            'error' => false,\n+            'errors' => '',\n+        ];\n+        return response()->json($resp, $this->statusCode);\n+    }\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628077933045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -967,975 +967,8 @@\n         ];\n         return response()->json($resp, $this->statusCode);\n     }\n     \n-}\n-<?php\n+    public function VoxoMedias(Request $request){\n \n-namespace App\\Http\\Controllers\\API\\V1;\n-\n-use Validator;\n-use Illuminate\\Http\\Request;\n-use Illuminate\\Support\\Facades\\Auth;\n-use Illuminate\\Support\\Facades\\Storage;\n-use Illuminate\\Support\\Facades\\Hash;\n-use Illuminate\\Foundation\\Auth\\AuthenticatesUsers;\n-use Image;\n-use App\\User;\n-use Illuminate\\Support\\Facades\\DB;\n-use App\\Models\\Countries;\n-use App\\Models\\States;\n-use App\\Models\\Post;\n-use App\\Models\\Comment;\n-use App\\Models\\PostLike;\n-use Illuminate\\Support\\Str;\n-use App\\Models\\Page;\n-use App\\Models\\Notification;\n-use App\\Models\\UserFollower;\n-use App\\Models\\ApiLogs;\n-use TCG\\Voyager\\Facades\\Voyager;\n-\n-/**\n- * @group Authentication\n- *\n- * Class AuthController\n- *\n- * Fullfills all aspects related to authenticate a user.\n- */\n-class AuthController extends APIController\n-{\n-\n-    use AuthenticatesUsers;\n-    public function register(Request $request)\n-    {\n-        $time = date('Y-m-d H:i:s');\n-        $validation = Validator::make($request->all(), [\n-            'name' => 'required',\n-            'mobile_number' => 'required|regex:/^[0-9]{9,12}$/',\n-            'email' => 'required|email',\n-            'password' => 'required|min:8',\n-        ]);\n-        $data = $request->all();\n-        if ($validation->fails()) {\n-            //return $this->throwValidation($validation->messages()->first());\n-            $resp = [\n-                'status' => false,\n-                'data' => '',\n-                'message' => $validation->messages()->first(),\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n-        $checkuser = User::where(['mobile_number' => $request->get('mobile_number'), 'role_id' => USER_ROLE])->count();\n-        if($checkuser == 1){\n-            $resp = [\n-                'status' => false,\n-                'data' => '',\n-                'message' => 'The phone number has already been taken',\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        } \n-\n-        $checkuser = User::where(['email' => $request->get('email'), 'role_id' => USER_ROLE])->count();\n-        if($checkuser == 1){\n-            $resp = [\n-                'status' => false,\n-                'data' => $resposeArray,\n-                'message' => 'The email has already been taken',\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        } \n-\n-\n-        $otp = randomOTP();\n-        //print_r($data);die;\n-        $token ='';\n-        //$otp = '1234';\n-        $arr = [\n-            'role_id' => USER_ROLE,\n-            'name' => $data['name'],\n-            'mobile_number' => $data['mobile_number'],\n-            'email' => $data['email'],\n-            'password' => Hash::make($data['password']),\n-            'device_token' => $data['device_token'],\n-            'device_type' => $data['device_type'],\n-            'otp' => $otp\n-        ];\n-            //dd($arr);\n-        try {\n-\n-            $user = User::create($arr);\n-\n-            $notify_message = $otp . ' is the OTP for accessing your Mealox account. PLEASE DO NOT SHARE IT WITH ANYONE.';\n-            $notification_data = ['type' => 'otp', 'message' => $notify_message, 'user_id' => $user->id];\n-            $sendSms = sendGCMUser($user->device_token, 'Verify OTP', $notify_message, $user->device_type, $notification_data);\n-            $this->sendSms2($notify_message, $data['mobile_number']);\n-            //$this->sendSms($notify_message, $data['phone']);\n-\n-            $passportToken = $user->createToken('API Access Token');\n-            $passportToken->token->save();\n-            $token = $passportToken->accessToken;\n-\n-        } catch (\\Exception $e) {\n-            return $this->respondInternalError($e->getMessage());\n-        }\n-\n-        $resp = [\n-            'status' => true,\n-            'data' => $user,\n-            'token' => $token,\n-            'message' => 'Otp send successfully.',\n-            'error' => false,\n-            'errors' => '',\n-            'user_path' => env('APP_URL').'/public/images/profile/',\n-        ];\n-        return response()->json($resp, $this->statusCode);\n     }\n-\n-\n-    /**\n-     * Attempt to login the user.\n-     *\n-     * If login is successfull, you get an api_token in response. Use that api_token to authenticate yourself for further api calls.\n-     *\n-     * @bodyParam email string required Your email id. Example: \"user@test.com\"\n-     * @bodyParam password string required Your Password. Example: \"abc@123_4\"\n-     *\n-     * @responseFile status=401 scenario=\"api_key not provided\" responses/unauthenticated.json\n-     * @responseFile responses/auth/login.json\n-     *\n-     * @param  \\Illuminate\\Http\\Request  $request\n-     * @return \\Illuminate\\Http\\JsonResponse\n-     */\n-    public function login(Request $request)\n-    {\n-        $validation = Validator::make($request->all(), [\n-            'mobile_number' => 'required'\n-        ]);\n-\n-        if ($validation->fails()) {\n-            $resp = [\n-                'status' => false,\n-                'data' => '',\n-                'message' => $validation->messages()->first(),\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n-\n-        $resposeArray = array();\n-        $checkuser = User::where(['mobile_number' => $request->get('mobile_number'), 'role_id' => USER_ROLE])->count();\n-        $otp = randomOTP();\n-        $resposeArray = array(\n-            'mobile_number' => $request->get('mobile_number'),\n-            'otp' => $otp\n-        );\n-        \n-        if($checkuser == 0){\n-            $arr = [\n-                'role_id' => USER_ROLE,\n-                'mobile_number' => $request->get('mobile_number'),\n-                'password' => Hash::make('123456'),\n-                'status' => 0,\n-                'device_token' => $request->get('device_token'),\n-                'device_type' => $request->get('device_type'),\n-                'otp' => $otp\n-            ];\n-            $user = User::create($arr);\n-        }else{\n-            User::where('mobile_number', $request->get('mobile_number'))->update(['otp'=>$otp]);\n-        }   \n-        \n-        try {\n-            $user = User::where('mobile_number', $request->get('mobile_number'))->first();\n-            // Save generated token\n-            $notify_message = $otp . ' is the OTP for accessing your account. PLEASE DO NOT SHARE IT WITH ANYONE.';\n-            $notification_data = ['type' => 'otp', 'message' => $notify_message, 'user_id' => $user->id];\n-            $sendSms = sendGCMUser($user->device_token, 'Verify OTP', $notify_message, $user->device_type, $notification_data);\n-           \n-            //$this->sendSms($notify_message, $user->phone);\n-\n-        } catch (\\Exception $e) {\n-            return $this->respondInternalError($e->getMessage());\n-        }\n-\n-        return $this->respond([\n-            'status' => true,\n-            'message' => 'Otp send successfully.',\n-            'data' => $resposeArray,\n-            'error' => false,\n-            'errors' => '',\n-        ]);\n-    }\n-\n-    public function verifyOtp(Request $request) {\n-\n-        $validation = Validator::make($request->all(), [\n-            'mobile_number' => 'required',\n-            'otp' => 'required',\n-        ]);\n-\n-        if ($validation->fails()) {\n-            //return $this->throwValidation($validation->messages()->first());\n-            $resp = [\n-                'status' => true,\n-                'data' => '',\n-                'message' => $validation->messages()->first(),\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n-        $user = User::select('id', 'name','user_name as nickname', 'email', 'mobile_number')->where(['mobile_number'=> $request->get('mobile_number'), 'otp' => $request->otp])->first();\n-       \n-        if($user){\n-            DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n-            $passportToken = $user->createToken('API Access Token');\n-            $passportToken->token->save();\n-            $token = $passportToken->accessToken;\n-            $dataArray[] = $user;\n-            $resp = [\n-                'status' => true,\n-                'data' => $dataArray,\n-                'is_register' => 1,\n-                'token' => $token,\n-                'message' => 'success',\n-                'error' => false,\n-                'errors' => '',\n-            ];\n-        }else{\n-            $resp = [\n-                'status' => false,\n-                'data' => '',\n-                'message' => 'Otp not verified.',\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-        }\n-\n-       \n-        return response()->json($resp, $this->statusCode);\n-\n-    }\n-\n-    public function resendOtp(Request $request)\n-    {\n-        $data = $request->all();\n-        $validation = Validator::make($request->all(), [\n-            'mobile_number' => 'required',\n-        ]);\n-\n-        if ($validation->fails()) {\n-            //return $this->throwValidation($validation->messages()->first());\n-            $resp = [\n-                'status' => true,\n-                'data' => '',\n-                'message' => $validation->messages()->first(),\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n-        $otp = randomOTP();\n-        $resposeArray = array(\n-            'mobile_number' => $request->get('mobile_number'),\n-            'otp' => $otp\n-        );\n-        $user = User::where(['users.mobile_number' => $data['mobile_number'], 'role_id' => USER_ROLE])->count();\n-        if($user > 0){\n-           \n-            DB::table('users')->where('mobile_number', $data['mobile_number'])->update(['otp' => $otp]);\n-            $user = User::where('users.mobile_number', $data['mobile_number'])->first();\n-            \n-            $notify_message = $otp . ' is the OTP for accessing your MLM account. PLEASE DO NOT SHARE IT WITH ANYONE.';\n-            $notification_data = ['type' => 'otp', 'message' => $notify_message, 'user_id' => $user->id];\n-            $sendSms = sendGCMUser($user->device_token, 'Verify OTP', $notify_message, $user->device_type, $notification_data);\n-            $resp = [\n-                'status' => true,\n-                'data' => $resposeArray,\n-                'message' => 'Otp sent.',\n-                'error' => false,\n-                'errors' => '',\n-            ];\n-            \n-        }else{\n-            $resp = [\n-                'status' => false,\n-                'data' => $resposeArray,\n-                'message' => 'User not found.',\n-                'is_register' => 0,\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            \n-        }\n-        return response()->json($resp, $this->statusCode);\n-\n-    }\n-\n-    public function socialLogin(Request $request){\n-        $validation = Validator::make($request->all(), [\n-            'email' => 'required|email',\n-            'social_id' => 'required',\n-            'social_type' => 'required',\n-            //'device_token' => 'required',\n-            'device_type' => 'required',\n-        ]);\n-        $data = $request->all();\n-        if ($validation->fails()) {\n-            //return $this->throwValidation($validation->messages()->first());\n-            $resp = [\n-                'status' => false,\n-                'data' => '',\n-                'message' => $validation->messages()->first(),\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n-        $checkuser = User::where(['email' => $request->get('email'), 'social_id' => $request->get('social_id')])->count();\n-        if($checkuser == 0){\n-            \n-            $arr = [\n-                'role_id' => USER_ROLE,\n-                'name' => $request->get('name') != null ? $request->get('name') : '',\n-                'email' => $request->get('email'),\n-                'user_name' => '@'.explode('@', $request->get('email'))[0].'_'.rand(11,99),\n-                'mobile_number' => $request->get('mobile_number') != null ? $request->get('mobile_number') : '',\n-                'password' => Hash::make('123456'),\n-                'status' => 1,\n-                'social_id' => $request->get('social_id'),\n-                'login_type' => $request->get('social_type'),\n-                'device_token' => $request->get('device_token') != null ? $request->get('device_token') : '',\n-                'device_type' => $request->get('device_type'),\n-            ];\n-            $user = User::create($arr);\n-            $user = User::select('id', 'name','user_name as nickname', 'email', 'mobile_number')->where(['id'=> $user->id])->first();\n-        }else{\n-            $user = User::select('id', 'name','user_name as nickname', 'email', 'mobile_number')->where(['email'=> $request->get('email')])->first();    \n-        }\n-        \n-       \n-        if($user){\n-            $passportToken = $user->createToken('API Access Token');\n-            $passportToken->token->save();\n-            $token = $passportToken->accessToken;\n-            $dataArray[] = $user;\n-            $resp = [\n-                'status' => true,\n-                'data' => $dataArray,\n-                'is_register' => 1,\n-                'token' => $token,\n-                'message' => 'success',\n-                'error' => false,\n-                'errors' => '',\n-            ];\n-        }else{\n-            $resp = [\n-                'status' => false,\n-                'data' => [],\n-                'message' => 'Something went wrong.',\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-        }\n-\n-        return response()->json($resp, $this->statusCode);\n-    }\n-\n-    public function getCountries()\n-    {\n-        $countries = Countries::get();\n-       \n-        $resp = [\n-            'status' => true,\n-            'data' => $countries,\n-            'message' => 'success',\n-            'error' => false,\n-            'errors' => '',\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-    }\n-\n-    public function getStates(Request $request)\n-    {\n-        $rule = [\n-            'country_id' => 'required',\n-        ];\n-        $data = $request->all();\n-        $states = array();\n-        if ($this->validateData($data, $rule)) {\n-            $states = States::where('country_id', $data['country_id'])->get();\n-        }\n-        $resp = [\n-            'status' => true,\n-            'data' => $states ,\n-            'message' => 'success',\n-            'error' => false,\n-            'errors' => '',\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-    }\n-    \n-    /**\n-     * Get the authenticated User.\n-     *\n-     * @responseFile status=401 scenario=\"api_key not provided\" responses/unauthenticated.json\n-     * @responseFile responses/auth/me.json\n-     *\n-     * @param  \\Illuminate\\Http\\Request  $request\n-     * @return \\Illuminate\\Http\\JsonResponse\n-     */\n-    public function me()\n-    {\n-        $userID = Auth::user();\n-        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio', 'avatar', 'thumb_avatar')->where('users.id', $userID->id)->first();\n-\n-        $dataRow['id'] = $user->id;\n-        $dataRow['nick_name'] = $user->nick_name;\n-        $dataRow['name'] = $user->name;\n-        $dataRow['email'] = $user->email;\n-        $dataRow['mobile_number'] = $user->mobile_number;\n-        $dataRow['followers'] = 0;\n-        $dataRow['following'] = 0;\n-        $dataRow['likes'] = 0;\n-        $dataRow['user_bio'] = $user->user_bio;\n-        $dataRow['full_image'] = env('APP_URL').'/storage/app/public/'.$user->avatar;\n-        $dataRow['thumb_image'] = env('APP_URL').'/storage/app/public/'.$user->thumb_avatar;\n-\n-        $dataArray[] = $dataRow;\n-        $this->userSetHidden($user);\n-        $resp = [\n-            'status' => true,\n-            'data' => $dataRow,\n-            'message' => 'success',\n-            'error' => false,\n-            'errors' => '',\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-    }\n-\n-    public function userProfile(Request $request)\n-    {\n-        $userID = Auth::user();\n-        $data = $request->all();\n-        $user = User::where('users.id', $data['user_id'])->first();\n-\n-        $this->userSetHidden($user);\n-        $resp = [\n-            'status' => true,\n-            'data' => $user,\n-            'message' => 'success',\n-            'error' => false,\n-            'errors' => '',\n-            'user_path' => env('APP_URL').'/public/images/profile/',\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-    }\n-\n-    \n-    /**\n-     * Attempt to logout the user.\n-     *\n-     * After successfull logut the token get invalidated and can not be used further.\n-     *\n-     * @responseFile status=401 scenario=\"api_key not provided\" responses/unauthenticated.json\n-     * @responseFile responses/auth/logout.json\n-     *\n-     * @param  \\Illuminate\\Http\\Request  $request\n-     * @return \\Illuminate\\Http\\JsonResponse\n-     */\n-    public function logout(Request $request)\n-    {\n-        try {\n-            $request->user()->token()->revoke();\n-        } catch (\\Exception $e) {\n-            return $this->respondInternalError($e->getMessage());\n-        }\n-\n-        $resp = [\n-            'status' => true,\n-            'data' => '',\n-            'message' => trans('api.messages.logout.success'),\n-            'error' => true,\n-            'errors' => '',\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-       \n-    }\n-\n-    public function changePassword(Request $request)\n-    {\n-        $errors = '';\n-        \n-        if (!(Hash::check($request->get('old_password'), Auth::user()->password))) {\n-            $message = 'Old password is wrong.';\n-            $errors = ['Old password is wrong.'];\n-            $resp = [\n-                'status' => false,\n-                'data' => '',\n-                'message' => $message,\n-                'error' => true,\n-                'errors' => $errors,\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        } else if (strcmp($request->get('old_password'), $request->get('new_password')) == 0) {\n-            $message = 'New password cannot be same as old password.';\n-            $errors = ['New password cannot be same as old password.'];\n-            $resp = [\n-                'status' => false,\n-                'data' => '',\n-                'message' => $message,\n-                'error' => true,\n-                'errors' => $errors,\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        } else {\n-            $validation = Validator::make($request->all(), [\n-                'old_password' => 'required',\n-                'new_password' => 'string|min:8|max:25|required_with:confirm_password|same:confirm_password',\n-            ]);\n-           \n-            $data = $request->all();\n-            if ($validation->fails()) {\n-                //return $this->throwValidation($validation->messages()->first());\n-                $resp = [\n-                    'status' => false,\n-                    'data' => '',\n-                    'message' => $validation->messages()->first(),\n-                    'error' => true,\n-                    'errors' => '',\n-                ];\n-                return response()->json($resp, $this->statusCode);\n-            }\n-            $user = Auth::user();\n-            $user->password = bcrypt($request->get('new_password'));\n-            $user->save();\n-            $message = 'Password changed successfully';\n-            \n-        }\n-        $resp = [\n-            'status' => true,\n-            'data' => '',\n-            'message' => $message,\n-            'error' => false,\n-            'errors' => $errors,\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-    }\n-\n-    public function forgotPassword(Request $request)\n-    {\n-        $data = $request->all();\n-        $validation = Validator::make($request->all(), [\n-            'phone' => 'required',\n-        ]);\n-\n-        if ($validation->fails()) {\n-            //return $this->throwValidation($validation->messages()->first());\n-            $resp = [\n-                'status' => true,\n-                'data' => '',\n-                'message' => $validation->messages()->first(),\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n-\n-        $user = User::where('users.mobile_number', $data['phone'])->count();\n-        if($user > 0){\n-            $password = randomPassword();\n-            $userProfileArr = array(\n-                'password' => Hash::make($password),\n-            );\n-\n-            DB::table('users')->where('mobile_number', $data['phone'])->update($userProfileArr);\n-            $user = User::where('users.mobile_number', $data['phone'])->first();\n-            \n-            $notify_message = $password . ' is the password for accessing your MLM account';\n-            $notification_data = ['type' => 'forgot', 'message' => $notify_message, 'user_id' => $user->id];\n-            $sendSms = sendGCMUser($user->device_token, 'Forgot password', $notify_message, $user->device_type, $notification_data);\n-            $this->sendSms2($notify_message, $data['phone']);\n-            $resp = [\n-                'status' => true,\n-                'data' => '',\n-                'message' => 'Password sent to your registred phone number.',\n-                'error' => false,\n-                'errors' => '',\n-            ];\n-            \n-        }else{\n-            $resp = [\n-                'status' => true,\n-                'data' => '',\n-                'message' => 'User not found.',\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            \n-        }\n-        return response()->json($resp, $this->statusCode);\n-\n-    }\n-\n-    public function updateProfile(Request $request)\n-    {\n-        $user = Auth::user();\n-        $avatarImage = $user->avatar;\n-        $avatarThumbImage = $user->thumb_avatar;\n-        $data = $request->all();\n-        \n-        if($request->hasFile('image')) {\n-            //get filename with extension\n-            $filenamewithextension = $request->file('image')->getClientOriginalName();\n-      \n-            //get filename without extension\n-            $filename = pathinfo($filenamewithextension, PATHINFO_FILENAME);\n-      \n-            //get file extension\n-            $extension = $request->file('image')->getClientOriginalExtension();\n-      \n-            //filename to store\n-            $avatarImage = $filename.'_'.time().'.'.$extension;\n-     \n-            //medium thumbnail name\n-            $avatarThumbImage = $filename.'_medium_'.time().'.'.$extension;\n-     \n-            //Upload File\n-            Storage::disk('pic_profile')->put($avatarImage, file_get_contents($request->file('image')->getRealPath()));\n-            Storage::disk('pic_profile')->put($avatarThumbImage, file_get_contents($request->file('image')->getRealPath()));\n-      \n-            //create medium thumbnail\n-            $avatarThumbImagepath = public_path('storage/users/'.$avatarThumbImage);\n-            //$img = Image::make($path)->resize(300, 185)->save($path);\n-            $this->createThumbnail($avatarThumbImagepath, 300, 185);\n-        }\n-\n-        // if (isset($data['image']) && $data['image']!= null ) {\n-        //     $name = 'img_' . time() . $request->file('image')->getClientOriginalName();\n-        //     Storage::disk('pic_profile')->put($name, file_get_contents($request->file('image')->getRealPath()));\n-        //     $avatarImage = $name;\n-        //     $imgPath = Storage::disk('pic_profile')->url($name);\n-        // } \n-\n-        $userProfileArr = array(\n-            'name' => isset($data['name']) && $data['name'] != '' ? $data['name'] : $user->name,\n-            'user_name' => isset($data['nick_name']) && $data['nick_name'] != '' ? '@'.$data['nick_name'] : $user->user_name,\n-            'user_bio' => isset($data['user_bio']) && $data['user_bio'] != '' ? $data['user_bio'] : $user->user_bio,\n-            'mobile_number' => isset($data['mobile_number']) && $data['mobile_number'] != '' ? $data['mobile_number'] : $user->mobile_number,\n-            //'email' => isset($data['email']) && $data['email'] != '' ? $data['email'] : $user->email,\n-            'gender' => isset($data['gender']) && $data['gender'] != '' ? $data['gender'] : $user->gender,\n-            'dob' => isset($data['dob']) && $data['dob'] != '' ? $data['dob'] : $user->dob,\n-            'avatar' => 'users/'.$avatarImage,\n-            'thumb_avatar' => 'users/'.$avatarThumbImage,\n-            'updated_at' => date('Y-m-d H:i:s'),\n-        );\n-\n-        DB::table('users')->where('id', $user->id)->update($userProfileArr);\n-\n-\n-        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio', 'avatar', 'thumb_avatar')->where('users.id', $user->id)->first();\n-\n-        $dataRow['id'] = $user->id;\n-        $dataRow['nick_name'] = $user->nick_name;\n-        $dataRow['name'] = $user->name;\n-        $dataRow['email'] = $user->email;\n-        $dataRow['mobile_number'] = $user->mobile_number;\n-        $dataRow['followers'] = 0;\n-        $dataRow['following'] = 0;\n-        $dataRow['likes'] = 0;\n-        $dataRow['user_bio'] = $user->user_bio;\n-        $dataRow['full_image'] = env('APP_URL').'/storage/app/public/'.$user->avatar;\n-        $dataRow['thumb_image'] = env('APP_URL').'/storage/app/public/'.$user->thumb_avatar;\n-\n-        $dataArray[] = $dataRow;\n-        $this->userSetHidden($user);\n-        \n-        $resp = [\n-            'status' => true,\n-            'data' => $dataRow,\n-            'message' => 'Updated Successfully.',\n-            'error' => false,\n-            'errors' => '',\n-            //'image_path' => env('ASSET_URL') . '/images/profile'\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-    }\n-\n-    /**\n-     * Create a thumbnail of specified size\n-     *\n-     * @param string $path path of thumbnail\n-     * @param int $width\n-     * @param int $height\n-     */\n-    public function createThumbnail($path, $width, $height)\n-    {\n-        $img = Image::make($path)->resize($width, $height, function ($constraint) {\n-            $constraint->aspectRatio();\n-        });\n-        $img->save($path);\n-    }\n- \n-    public function checkNickName(Request $request){\n-\n-        $user = Auth::user();\n-\n-        $validation = Validator::make($request->all(), [\n-            'nick_name' => 'required',\n-        ]);\n-        $data = $request->all();\n-        if ($validation->fails()) {\n-            //return $this->throwValidation($validation->messages()->first());\n-            $resp = [\n-                'status' => false,\n-                'data' => '',\n-                'message' => $validation->messages()->first(),\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n-\n-        $checkUserName = User::where('user_name', $data['nick_name'])->where('id', '<>', $user->id)->count();\n-        if($checkUserName > 0){\n-            $resp = [\n-                'status' => false,\n-                'data' => '',\n-                'message' => 'Nick name already exist',\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-        }else{\n-            $resp = [\n-                'status' => true,\n-                'data' => '',\n-                'message' => 'Nick name available',\n-                'error' => false,\n-                'errors' => '',\n-            ];\n-        }\n-\n-        return response()->json($resp, $this->statusCode);\n-        \n-    }\n-\n-    public function cmsPage(Request $request)\n-    {\n-        $userID = Auth::user();\n-        $data = $request->all();\n-        $validation = Validator::make($data, [\n-            'slug' => 'required',\n-        ]);\n-\n-        if ($validation->fails()) {\n-            $resp = [\n-                'status' => true,\n-                'data' => '',\n-                'message' => $validation->messages()->first(),\n-                'error' => true,\n-                'errors' => '',\n-            ];\n-            return response()->json($resp, $this->statusCode);\n-        }\n-\n-        $this->data = Page::where('slug', $data['slug'])->first();\n-        $resp = [\n-            'status' => true,\n-            'data' => $this->data,\n-            'message' => 'Success.',\n-            'error' => false,\n-            'errors' => '',\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-\n-    }\n-\n-    public function notification(Request $request)\n-    {\n-        $userID = Auth::user();\n-        $this->data = Notification::select('title', 'content', 'created_at')->where('user_id', $userID->id)->get();\n-        $input = array(\n-            'is_read' => 1,\n-        );\n-        Notification::where('user_id', $userID->id)->update($input);\n-        $resp = [\n-            'status' => true,\n-            'data' => $this->data,\n-            'message' => 'Success.',\n-            'error' => false,\n-            'errors' => '',\n-            'user_path' => env('APP_URL').'/public/images/profile/',\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-    }\n-\n-    public function sendSms2($message, $mobile){\n-        \n-\n-        $url = 'http://msg.ampleinfosoft.biz/submitsms.jsp?user=ayuvahel&key=c79d1b0438XX&mobile='.$mobile.'&message='.urlencode($message).'&senderid=AYUVAL&accusage=1';\n-\n-        //echo $url;die;\n-        $curl = curl_init();\n-\n-        curl_setopt_array($curl, array(\n-            CURLOPT_URL => $url,\n-            CURLOPT_RETURNTRANSFER => true,\n-            CURLOPT_ENCODING => \"\",\n-            CURLOPT_MAXREDIRS => 10,\n-            CURLOPT_TIMEOUT => 30,\n-            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n-            CURLOPT_CUSTOMREQUEST => \"GET\",\n-        ));\n-\n-        $response = curl_exec($curl);\n-        $err = curl_error($curl);\n-\n-        curl_close($curl);\n-        return $response;\n-        //print_r($response);die;\n-    }\n-    \n-    public function sendSms($message, $mobile)\n-    {\n-        \n-        $fields = array(\n-            \"sender_id\" => \"FSTSMS\",\n-            \"message\" => $message,\n-            \"language\" => \"english\",\n-            \"route\" => \"p\",\n-            \"numbers\" => $mobile,\n-            \"flash\" => \"1\"\n-        );\n-\n-        $curl = curl_init();\n-\n-        curl_setopt_array($curl, array(\n-            CURLOPT_URL => \"https://www.fast2sms.com/dev/bulk\",\n-            CURLOPT_RETURNTRANSFER => true,\n-            CURLOPT_ENCODING => \"\",\n-            CURLOPT_MAXREDIRS => 10,\n-            CURLOPT_TIMEOUT => 30,\n-            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n-            CURLOPT_CUSTOMREQUEST => \"POST\",\n-            CURLOPT_POSTFIELDS => json_encode($fields),\n-            CURLOPT_HTTPHEADER => array(\n-                \"authorization: 6pAFulWXI7UwkjGn8dyE4QgJeD5R0q2cimazLxTvOs3C1NfHbhcMhZ1EH0ib8tGxYFQayAfCOPUKgp73\",\n-                \"accept: */*\",\n-                \"cache-control: no-cache\",\n-                \"content-type: application/json\"\n-            ),\n-        ));\n-\n-        $response = curl_exec($curl);\n-        $err = curl_error($curl);\n-\n-        curl_close($curl);\n-        return $response;\n-       // print_r($response);die;\n-        if ($err) {\n-            echo \"cURL Error #:\" . $err;\n-        } else {\n-            echo $response;\n-        }\n-    }\n-\n-    public function getHomeList(Request $request){\n-\n-        $dataArray =  array();\n-        $imageData =  $imageDataArray = array();\n-        $imageData1['id'] = 1;\n-        $imageData1['image'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n-        $imageData1['thumbnail'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n-        \n-\n-        $imageData2['id'] = 2;\n-        $imageData2['image'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n-        $imageData2['thumbnail'] = env('APP_URL').'/storage/app/public/posts/image1.jpeg';\n-        $imageDataArray = array(0 =>$imageData1, 1 => $imageData2);\n-\n-        $videoData['id'] = 1;\n-        $videoData['video'] = env('APP_URL').'/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n-        $videoDataArray = array(0 =>$videoData);\n-        \n-        $dataRow['id'] = 1;\n-        $dataRow['type'] = 'image';\n-        $dataRow['image_array'] = $imageDataArray;\n-        $dataRow['name'] = 'Praveen Singh';\n-        $dataRow['nick_name'] = '@praveen_singh';\n-        $dataRow['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $dataRow['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $dataRow['is_like'] = true;\n-        $dataRow['comments_count'] = '26M';\n-        $dataRow['share_post'] = '';\n-        $dataRow['is_follow'] = true;\n-\n-        $dataRow2['id'] = 2;\n-        $dataRow2['type'] = 'video';\n-        $dataRow2['image_array'] = $videoDataArray;\n-        $dataRow2['name'] = 'Praveen Singh';\n-        $dataRow2['nick_name'] = '@praveen_singh';\n-        $dataRow2['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $dataRow2['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $dataRow2['is_like'] = true;\n-        $dataRow2['comments_count'] = '26M';\n-        $dataRow2['share_post'] = '';\n-        $dataRow2['is_follow'] = true;\n-\n-        $dataArray = array(0 =>$dataRow, 1 => $dataRow2);\n-        $resp = [\n-            'status' => true,\n-            'data' => $dataArray,\n-            'message' => 'success',\n-            'error' => false,\n-            'errors' => '',\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-    }\n-\n-\n-    public function getReelsList(Request $request){\n-\n-        $data =  array();\n-        $data['id'] = 1;\n-        $data['type'] = 'video';\n-        $data['video_url'] = env('APP_URL').'/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n-        $data['name'] = 'Praveen Singh';\n-        $data['nick_name'] = '@praveen_singh';\n-        $data['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $data['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $data['is_like'] = true;\n-        $data['comments_count'] = '26M';\n-        $data['share_post'] = '';\n-        $data['is_follow'] = true;\n-\n-        $data2['id'] = 2;\n-        $data2['type'] = 'video';\n-        $data2['video_url'] = env('APP_URL').'/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n-        $data2['name'] = 'Praveen Singh';\n-        $data2['nick_name'] = '@praveen_singh';\n-        $data2['full_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $data2['thumb_image'] = env('APP_URL').'/storage/app/public/users/July2021/PDT21Q1IZ8Gnxv1rb5L3.jpeg';\n-        $data2['is_like'] = true;\n-        $data2['comments_count'] = '26M';\n-        $data2['share_post'] = '';\n-        $data2['is_follow'] = true;\n-\n-        $dataArray = array(0 =>$data, 1 => $data2);\n-        $resp = [\n-            'status' => true,\n-            'data' => $dataArray,\n-            'message' => 'success',\n-            'error' => false,\n-            'errors' => '',\n-        ];\n-        return response()->json($resp, $this->statusCode);\n-    }\n-    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628079061726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -967,8 +967,9 @@\n         ];\n         return response()->json($resp, $this->statusCode);\n     }\n     \n-    public function VoxoMedias(Request $request){\n-\n+    public function getMyMedia(Request $request){\n+        $user = Auth::user();\n+        $getData = VoxoMedias::where('user_id', $user->id)->first();\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628079157989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -969,7 +969,36 @@\n     }\n     \n     public function getMyMedia(Request $request){\n         $user = Auth::user();\n-        $getData = VoxoMedias::where('user_id', $user->id)->first();\n+        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $user->id)->first();\n+        if(!$getVoxoMedia->Empty()){\n+            $data['id'] = $getVoxoMedia->id;\n+            $data['user_id'] = $getVoxoMedia->user_id;\n+            $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n+            $data['description'] = $getVoxoMedia->description;\n+            $data['audio_name'] = $getVoxoMedia->audio_name;\n+            $data['comments'] = $getVoxoMedia->comments;\n+            $data['likes'] = $getVoxoMedia->likes;\n+            $data['total_comments'] = count($getVoxoMedia->comments);\n+            $data['total_likes'] = count($getVoxoMedia->likes);\n+\n+            $resp = [\n+                'status' => true,\n+                'data' => $data,\n+                'message' => 'Upload Successfully.',\n+                'error' => false,\n+                'errors' => '',\n+            ];\n+\n+        }else{\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => 'Please upload video.',\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+        }\n+        return response()->json($resp, $this->statusCode);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628079208034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -984,18 +984,18 @@\n \n             $resp = [\n                 'status' => true,\n                 'data' => $data,\n-                'message' => 'Upload Successfully.',\n+                'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n             ];\n \n         }else{\n             $resp = [\n                 'status' => false,\n                 'data' => '',\n-                'message' => 'Please upload video.',\n+                'message' => 'No reels data found',\n                 'error' => true,\n                 'errors' => '',\n             ];\n         }\n"
                },
                {
                    "date": 1628079296280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -970,9 +970,9 @@\n     \n     public function getMyMedia(Request $request){\n         $user = Auth::user();\n         $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $user->id)->first();\n-        if(!$getVoxoMedia->Empty()){\n+        if(!$getVoxoMedia->IsEmpty()){\n             $data['id'] = $getVoxoMedia->id;\n             $data['user_id'] = $getVoxoMedia->user_id;\n             $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n             $data['description'] = $getVoxoMedia->description;\n"
                },
                {
                    "date": 1628079309331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -970,9 +970,9 @@\n     \n     public function getMyMedia(Request $request){\n         $user = Auth::user();\n         $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $user->id)->first();\n-        if(!$getVoxoMedia->IsEmpty()){\n+        if($getVoxoMedia){\n             $data['id'] = $getVoxoMedia->id;\n             $data['user_id'] = $getVoxoMedia->user_id;\n             $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n             $data['description'] = $getVoxoMedia->description;\n"
                },
                {
                    "date": 1628079332893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -969,10 +969,10 @@\n     }\n     \n     public function getMyMedia(Request $request){\n         $user = Auth::user();\n-        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $user->id)->first();\n-        if($getVoxoMedia){\n+        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $user->id)->all();\n+        if(!$getVoxoMedia->IsEmpty()){\n             $data['id'] = $getVoxoMedia->id;\n             $data['user_id'] = $getVoxoMedia->user_id;\n             $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n             $data['description'] = $getVoxoMedia->description;\n"
                },
                {
                    "date": 1628079340809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -969,9 +969,9 @@\n     }\n     \n     public function getMyMedia(Request $request){\n         $user = Auth::user();\n-        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $user->id)->all();\n+        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $user->id)->get();\n         if(!$getVoxoMedia->IsEmpty()){\n             $data['id'] = $getVoxoMedia->id;\n             $data['user_id'] = $getVoxoMedia->user_id;\n             $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n"
                },
                {
                    "date": 1628079401933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -971,18 +971,21 @@\n     public function getMyMedia(Request $request){\n         $user = Auth::user();\n         $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $user->id)->get();\n         if(!$getVoxoMedia->IsEmpty()){\n-            $data['id'] = $getVoxoMedia->id;\n-            $data['user_id'] = $getVoxoMedia->user_id;\n-            $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n-            $data['description'] = $getVoxoMedia->description;\n-            $data['audio_name'] = $getVoxoMedia->audio_name;\n-            $data['comments'] = $getVoxoMedia->comments;\n-            $data['likes'] = $getVoxoMedia->likes;\n-            $data['total_comments'] = count($getVoxoMedia->comments);\n-            $data['total_likes'] = count($getVoxoMedia->likes);\n-\n+            $mediaDataArray = array();\n+            foreach($getVoxoMedia as $mediaData){\n+                $data['id'] = $getVoxoMedia->id;\n+                $data['user_id'] = $getVoxoMedia->user_id;\n+                $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n+                $data['description'] = $getVoxoMedia->description;\n+                $data['audio_name'] = $getVoxoMedia->audio_name;\n+                $data['comments'] = $getVoxoMedia->comments;\n+                $data['likes'] = $getVoxoMedia->likes;\n+                $data['total_comments'] = count($getVoxoMedia->comments);\n+                $data['total_likes'] = count($getVoxoMedia->likes);\n+                $mediaDataArray[] = $data;\n+            }\n             $resp = [\n                 'status' => true,\n                 'data' => $data,\n                 'message' => 'success.',\n"
                },
                {
                    "date": 1628079421501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -973,22 +973,22 @@\n         $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $user->id)->get();\n         if(!$getVoxoMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getVoxoMedia as $mediaData){\n-                $data['id'] = $getVoxoMedia->id;\n-                $data['user_id'] = $getVoxoMedia->user_id;\n-                $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n-                $data['description'] = $getVoxoMedia->description;\n-                $data['audio_name'] = $getVoxoMedia->audio_name;\n-                $data['comments'] = $getVoxoMedia->comments;\n-                $data['likes'] = $getVoxoMedia->likes;\n-                $data['total_comments'] = count($getVoxoMedia->comments);\n-                $data['total_likes'] = count($getVoxoMedia->likes);\n+                $data['id'] = $mediaData->id;\n+                $data['user_id'] = $mediaData->user_id;\n+                $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$mediaData->video;\n+                $data['description'] = $mediaData->description;\n+                $data['audio_name'] = $mediaData->audio_name;\n+                $data['comments'] = $mediaData->comments;\n+                $data['likes'] = $mediaData->likes;\n+                $data['total_comments'] = count($mediaData->comments);\n+                $data['total_likes'] = count($mediaData->likes);\n                 $mediaDataArray[] = $data;\n             }\n             $resp = [\n                 'status' => true,\n-                'data' => $data,\n+                'data' => $mediaDataArray,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n             ];\n"
                },
                {
                    "date": 1628080067068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n use App\\Models\\UserFollower;\n use App\\Models\\ApiLogs;\n use TCG\\Voyager\\Facades\\Voyager;\n use App\\Models\\VoxoMedias;\n-\n+use App\\Models\\UserSaveMedias;\n /**\n  * @group Authentication\n  *\n  * Class AuthController\n@@ -969,9 +969,15 @@\n     }\n     \n     public function getMyMedia(Request $request){\n         $user = Auth::user();\n-        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $user->id)->get();\n+        if($request->get('type') != null && $request->get('type') == 'myvideo'){\n+            $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $user->id)->get();\n+        }elseif($request->get('type') != null && $request->get('type') == 'savereels'){\n+            $getVoxoMedia = UserSaveMedias::where(['user_id' => $user->id, 'type' => 'video'])->get();\n+        }elseif($request->get('type') != null && $request->get('type') == 'savewall'){\n+            $getVoxoMedia = UserSaveMedias::where(['user_id' => $user->id, 'type' => 'wall'])->get();\n+        }\n         if(!$getVoxoMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getVoxoMedia as $mediaData){\n                 $data['id'] = $mediaData->id;\n"
                },
                {
                    "date": 1628082513802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -970,14 +970,21 @@\n     \n     public function getMyMedia(Request $request){\n         $user = Auth::user();\n         if($request->get('type') != null && $request->get('type') == 'myvideo'){\n-            $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $user->id)->get();\n+            $getVoxoMedia = $this->getMyVideo($user->id);\n         }elseif($request->get('type') != null && $request->get('type') == 'savereels'){\n-            $getVoxoMedia = UserSaveMedias::where(['user_id' => $user->id, 'type' => 'video'])->get();\n+            $getVoxoMedia = $this->getSaveVideo($user->id);\n+            \n         }elseif($request->get('type') != null && $request->get('type') == 'savewall'){\n             $getVoxoMedia = UserSaveMedias::where(['user_id' => $user->id, 'type' => 'wall'])->get();\n         }\n+        \n+        return response()->json($getVoxoMedia, $this->statusCode);\n+    }\n+\n+    function getMyVideo($userId){\n+        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->get();\n         if(!$getVoxoMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getVoxoMedia as $mediaData){\n                 $data['id'] = $mediaData->id;\n@@ -1007,7 +1014,46 @@\n                 'error' => true,\n                 'errors' => '',\n             ];\n         }\n-        return response()->json($resp, $this->statusCode);\n+\n+        return $resp;\n     }\n+\n+    function getSaveVideo($userId){\n+        $getVoxoMedia = UserSaveMedias::where(['user_id' => $user->id, 'type' => 'video'])->get();\n+        if(!$getVoxoMedia->IsEmpty()){\n+            $mediaDataArray = array();\n+            foreach($getVoxoMedia as $mediaData){\n+                $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->id)->first();\n+                $data['id'] = $mediaData->id;\n+                $data['user_id'] = $mediaData->user_id;\n+                $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$mediaData->video;\n+                $data['description'] = $mediaData->description;\n+                $data['audio_name'] = $mediaData->audio_name;\n+                $data['comments'] = $mediaData->comments;\n+                $data['likes'] = $mediaData->likes;\n+                $data['total_comments'] = count($mediaData->comments);\n+                $data['total_likes'] = count($mediaData->likes);\n+                $mediaDataArray[] = $data;\n+            }\n+            $resp = [\n+                'status' => true,\n+                'data' => $mediaDataArray,\n+                'message' => 'success.',\n+                'error' => false,\n+                'errors' => '',\n+            ];\n+\n+        }else{\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => 'No reels data found',\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+        }\n+\n+        return $resp;\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628082556881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1019,22 +1019,22 @@\n         return $resp;\n     }\n \n     function getSaveVideo($userId){\n-        $getVoxoMedia = UserSaveMedias::where(['user_id' => $user->id, 'type' => 'video'])->get();\n-        if(!$getVoxoMedia->IsEmpty()){\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $user->id, 'type' => 'video'])->get();\n+        if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n-            foreach($getVoxoMedia as $mediaData){\n+            foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->id)->first();\n-                $data['id'] = $mediaData->id;\n-                $data['user_id'] = $mediaData->user_id;\n-                $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$mediaData->video;\n-                $data['description'] = $mediaData->description;\n-                $data['audio_name'] = $mediaData->audio_name;\n-                $data['comments'] = $mediaData->comments;\n-                $data['likes'] = $mediaData->likes;\n-                $data['total_comments'] = count($mediaData->comments);\n-                $data['total_likes'] = count($mediaData->likes);\n+                $data['id'] = $getVoxoMedia->id;\n+                $data['user_id'] = $getVoxoMedia->user_id;\n+                $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n+                $data['description'] = $getVoxoMedia->description;\n+                $data['audio_name'] = $getVoxoMedia->audio_name;\n+                $data['comments'] = $getVoxoMedia->comments;\n+                $data['likes'] = $getVoxoMedia->likes;\n+                $data['total_comments'] = count($getVoxoMedia->comments);\n+                $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n             $resp = [\n                 'status' => true,\n"
                },
                {
                    "date": 1628082566623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -973,9 +973,8 @@\n         if($request->get('type') != null && $request->get('type') == 'myvideo'){\n             $getVoxoMedia = $this->getMyVideo($user->id);\n         }elseif($request->get('type') != null && $request->get('type') == 'savereels'){\n             $getVoxoMedia = $this->getSaveVideo($user->id);\n-            \n         }elseif($request->get('type') != null && $request->get('type') == 'savewall'){\n             $getVoxoMedia = UserSaveMedias::where(['user_id' => $user->id, 'type' => 'wall'])->get();\n         }\n         \n"
                },
                {
                    "date": 1628082634615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1018,9 +1018,9 @@\n         return $resp;\n     }\n \n     function getSaveVideo($userId){\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $user->id, 'type' => 'video'])->get();\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => 'video'])->get();\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->id)->first();\n"
                },
                {
                    "date": 1628082718469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1022,9 +1022,9 @@\n         $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => 'video'])->get();\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n-                $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->id)->first();\n+                $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('voxo_media_id', $mediaData->id)->first();\n                 $data['id'] = $getVoxoMedia->id;\n                 $data['user_id'] = $getVoxoMedia->user_id;\n                 $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n                 $data['description'] = $getVoxoMedia->description;\n"
                },
                {
                    "date": 1628082767486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1018,13 +1018,13 @@\n         return $resp;\n     }\n \n     function getSaveVideo($userId){\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => 'video'])->get();\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => 'video'])->orderBy('id', 'DESC')->get();\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n-                $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('voxo_media_id', $mediaData->id)->first();\n+                $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n                 $data['id'] = $getVoxoMedia->id;\n                 $data['user_id'] = $getVoxoMedia->user_id;\n                 $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n                 $data['description'] = $getVoxoMedia->description;\n"
                },
                {
                    "date": 1628082786378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -981,9 +981,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->get();\n+        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->get();\n         if(!$getVoxoMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getVoxoMedia as $mediaData){\n                 $data['id'] = $mediaData->id;\n"
                },
                {
                    "date": 1628082868082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -972,11 +972,11 @@\n         $user = Auth::user();\n         if($request->get('type') != null && $request->get('type') == 'myvideo'){\n             $getVoxoMedia = $this->getMyVideo($user->id);\n         }elseif($request->get('type') != null && $request->get('type') == 'savereels'){\n-            $getVoxoMedia = $this->getSaveVideo($user->id);\n+            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'video');\n         }elseif($request->get('type') != null && $request->get('type') == 'savewall'){\n-            $getVoxoMedia = UserSaveMedias::where(['user_id' => $user->id, 'type' => 'wall'])->get();\n+            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'wall');\n         }\n         \n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n@@ -1017,10 +1017,10 @@\n \n         return $resp;\n     }\n \n-    function getSaveVideo($userId){\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => 'video'])->orderBy('id', 'DESC')->get();\n+    function getSaveWallVideo($userId, $type){\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->get();\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628082892228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1046,9 +1046,9 @@\n         }else{\n             $resp = [\n                 'status' => false,\n                 'data' => '',\n-                'message' => 'No reels data found',\n+                'message' => 'No save data found',\n                 'error' => true,\n                 'errors' => '',\n             ];\n         }\n"
                },
                {
                    "date": 1628087588805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -975,8 +975,10 @@\n         }elseif($request->get('type') != null && $request->get('type') == 'savereels'){\n             $getVoxoMedia = $this->getSaveWallVideo($user->id, 'video');\n         }elseif($request->get('type') != null && $request->get('type') == 'savewall'){\n             $getVoxoMedia = $this->getSaveWallVideo($user->id, 'wall');\n+        }else{\n+            $getVoxoMedia = $this->getMyVideo($user->id);\n         }\n         \n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n"
                },
                {
                    "date": 1628096370965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1056,5 +1056,9 @@\n         }\n \n         return $resp;\n     }\n+\n+    public function following(Request $request){\n+\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628096387120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1057,8 +1057,8 @@\n \n         return $resp;\n     }\n \n-    public function following(Request $request){\n+    public function followUnfollow(Request $request){\n \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628096511350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1058,7 +1058,21 @@\n         return $resp;\n     }\n \n     public function followUnfollow(Request $request){\n-\n+        $validation = Validator::make($request->all(), [\n+            'user_id' => 'required',\n+        ]);\n+        $data = $request->all();\n+        if ($validation->fails()) {\n+            //return $this->throwValidation($validation->messages()->first());\n+            $resp = [\n+                'status' => false,\n+                'data' => '',\n+                'message' => $validation->messages()->first(),\n+                'error' => true,\n+                'errors' => '',\n+            ];\n+            return response()->json($resp, $this->statusCode);\n+        }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628096529507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1060,8 +1060,9 @@\n \n     public function followUnfollow(Request $request){\n         $validation = Validator::make($request->all(), [\n             'user_id' => 'required',\n+            'is_follow' => 'required',\n         ]);\n         $data = $request->all();\n         if ($validation->fails()) {\n             //return $this->throwValidation($validation->messages()->first());\n"
                },
                {
                    "date": 1628096541471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1058,8 +1058,10 @@\n         return $resp;\n     }\n \n     public function followUnfollow(Request $request){\n+        $user = Auth::user();\n+        \n         $validation = Validator::make($request->all(), [\n             'user_id' => 'required',\n             'is_follow' => 'required',\n         ]);\n"
                },
                {
                    "date": 1628096655073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n use App\\Models\\ApiLogs;\n use TCG\\Voyager\\Facades\\Voyager;\n use App\\Models\\VoxoMedias;\n use App\\Models\\UserSaveMedias;\n+use App\\Models\\UserFollower;\n /**\n  * @group Authentication\n  *\n  * Class AuthController\n@@ -1059,9 +1060,9 @@\n     }\n \n     public function followUnfollow(Request $request){\n         $user = Auth::user();\n-        \n+\n         $validation = Validator::make($request->all(), [\n             'user_id' => 'required',\n             'is_follow' => 'required',\n         ]);\n"
                },
                {
                    "date": 1628096678845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,10 @@\n use App\\Models\\ApiLogs;\n use TCG\\Voyager\\Facades\\Voyager;\n use App\\Models\\VoxoMedias;\n use App\\Models\\UserSaveMedias;\n-use App\\Models\\UserFollower;\n+\n+\n /**\n  * @group Authentication\n  *\n  * Class AuthController\n"
                },
                {
                    "date": 1628096773834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1078,6 +1078,12 @@\n                 'errors' => '',\n             ];\n             return response()->json($resp, $this->statusCode);\n         }\n+\n+        if($data['is_follow'] == 1){\n+            UserFollower::insert(['following_id' => $data['user_id'], 'follower_id' => $user->id]);\n+        }else{\n+\n+        }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628096804219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1082,8 +1082,8 @@\n \n         if($data['is_follow'] == 1){\n             UserFollower::insert(['following_id' => $data['user_id'], 'follower_id' => $user->id]);\n         }else{\n-\n+            UserFollower::where(['following_id' => $data['user_id'], 'follower_id' => $user->id])->delete();\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628096848215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1081,9 +1081,20 @@\n         }\n \n         if($data['is_follow'] == 1){\n             UserFollower::insert(['following_id' => $data['user_id'], 'follower_id' => $user->id]);\n+            $message = 'Follow successfully.';\n         }else{\n             UserFollower::where(['following_id' => $data['user_id'], 'follower_id' => $user->id])->delete();\n+            $message = 'Unfollow successfully.';\n         }\n+        return $this->respond([\n+            'status' => true,\n+            'message' => $message,\n+            'data' => '',\n+            'is_like' => $data['is_follow'],\n+            'error' => false,\n+            'errors' => '',\n+        ]);\n+\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628096890409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1096,5 +1096,8 @@\n             'errors' => '',\n         ]);\n \n     }\n+\n+    public function followingFollowerList(Request $request){\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628096931348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1098,6 +1098,7 @@\n \n     }\n \n     public function followingFollowerList(Request $request){\n+        $user = Auth::user();\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628097172721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1080,12 +1080,12 @@\n             return response()->json($resp, $this->statusCode);\n         }\n \n         if($data['is_follow'] == 1){\n-            UserFollower::insert(['following_id' => $data['user_id'], 'follower_id' => $user->id]);\n+            UserFollower::insert(['user_id' => $data['user_id'], 'follower_id' => $user->id]);\n             $message = 'Follow successfully.';\n         }else{\n-            UserFollower::where(['following_id' => $data['user_id'], 'follower_id' => $user->id])->delete();\n+            UserFollower::where(['user_id' => $data['user_id'], 'follower_id' => $user->id])->delete();\n             $message = 'Unfollow successfully.';\n         }\n         return $this->respond([\n             'status' => true,\n@@ -1099,6 +1099,8 @@\n     }\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n+\n+\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628097202262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1080,12 +1080,12 @@\n             return response()->json($resp, $this->statusCode);\n         }\n \n         if($data['is_follow'] == 1){\n-            UserFollower::insert(['user_id' => $data['user_id'], 'follower_id' => $user->id]);\n+            UserFollower::insert(['user_id' => $user->id, 'follower_id' => $data['user_id']]);\n             $message = 'Follow successfully.';\n         }else{\n-            UserFollower::where(['user_id' => $data['user_id'], 'follower_id' => $user->id])->delete();\n+            UserFollower::where(['user_id' => $user->id, 'follower_id' => $data['user_id']])->delete();\n             $message = 'Unfollow successfully.';\n         }\n         return $this->respond([\n             'status' => true,\n"
                },
                {
                    "date": 1628097859302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1100,7 +1100,9 @@\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n \n+        $getFollowerList = UserFollower::where('follower_id', $user->id)->get();\n+        print_r($getFollowerList);die;\n \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628097987007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1100,9 +1100,9 @@\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n \n-        $getFollowerList = UserFollower::where('follower_id', $user->id)->get();\n+        $getFollowerList = UserFollower::with('users')->where('follower_id', $user->id)->get();\n         print_r($getFollowerList);die;\n \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628098207417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1100,9 +1100,17 @@\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n \n-        $getFollowerList = UserFollower::with('users')->where('follower_id', $user->id)->get();\n-        print_r($getFollowerList);die;\n+        $getFollowerList = UserFollower::where('follower_id', $user->id)->get();\n+        if(!$getFollowerList->IsEmpty()){\n+            foreach($getFollowerList as $followerData){\n+                $getUserData = User::where('id', $followerData->user_id)->first();\n+                $row['id'] = $getUserData->id;\n+                $row['name'] = $getUserData->name;\n+                $row['nick_name'] = $getUserData->user_name;\n+                $row['thumb_image'] = env('APP_URL').'/storage/app/public/'.$getUserData->thumb_avatar;\n+            }\n+        }\n \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628098307616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1102,15 +1102,27 @@\n         $user = Auth::user();\n \n         $getFollowerList = UserFollower::where('follower_id', $user->id)->get();\n         if(!$getFollowerList->IsEmpty()){\n+            $followerArray = array();\n             foreach($getFollowerList as $followerData){\n                 $getUserData = User::where('id', $followerData->user_id)->first();\n                 $row['id'] = $getUserData->id;\n                 $row['name'] = $getUserData->name;\n                 $row['nick_name'] = $getUserData->user_name;\n                 $row['thumb_image'] = env('APP_URL').'/storage/app/public/'.$getUserData->thumb_avatar;\n+                $followerArray[] = $row;\n             }\n+\n+            $data['followers'] = $followerArray;\n         }\n \n+        return $this->respond([\n+            'status' => true,\n+            'message' => 'Follower Following List',\n+            'data' => $data,\n+            'error' => false,\n+            'errors' => '',\n+        ]);\n+\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628098369757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1101,10 +1101,10 @@\n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n \n         $getFollowerList = UserFollower::where('follower_id', $user->id)->get();\n+        $followerArray = array();\n         if(!$getFollowerList->IsEmpty()){\n-            $followerArray = array();\n             foreach($getFollowerList as $followerData){\n                 $getUserData = User::where('id', $followerData->user_id)->first();\n                 $row['id'] = $getUserData->id;\n                 $row['name'] = $getUserData->name;\n@@ -1113,8 +1113,10 @@\n                 $followerArray[] = $row;\n             }\n \n             $data['followers'] = $followerArray;\n+        }else{\n+            $data['followers'] = $followerArray;\n         }\n \n         return $this->respond([\n             'status' => true,\n"
                },
                {
                    "date": 1628098390280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1101,9 +1101,9 @@\n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n \n         $getFollowerList = UserFollower::where('follower_id', $user->id)->get();\n-        $followerArray = array();\n+        $followerArray = $followingArray = array();\n         if(!$getFollowerList->IsEmpty()){\n             foreach($getFollowerList as $followerData){\n                 $getUserData = User::where('id', $followerData->user_id)->first();\n                 $row['id'] = $getUserData->id;\n"
                },
                {
                    "date": 1628098408249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1101,8 +1101,11 @@\n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n \n         $getFollowerList = UserFollower::where('follower_id', $user->id)->get();\n+\n+        $getFollowingList = UserFollower::where('user_id', $user->id)->get();\n+\n         $followerArray = $followingArray = array();\n         if(!$getFollowerList->IsEmpty()){\n             foreach($getFollowerList as $followerData){\n                 $getUserData = User::where('id', $followerData->user_id)->first();\n"
                },
                {
                    "date": 1628098456788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1120,8 +1120,24 @@\n         }else{\n             $data['followers'] = $followerArray;\n         }\n \n+\n+        if(!$getFollowingList->IsEmpty()){\n+            foreach($getFollowingList as $followingData){\n+                $getUserData = User::where('id', $followingData->user_id)->first();\n+                $row['id'] = $getUserData->id;\n+                $row['name'] = $getUserData->name;\n+                $row['nick_name'] = $getUserData->user_name;\n+                $row['thumb_image'] = env('APP_URL').'/storage/app/public/'.$getUserData->thumb_avatar;\n+                $followingArray[] = $row;\n+            }\n+\n+            $data['followings'] = $followingArray;\n+        }else{\n+            $data['followings'] = $followingArray;\n+        }\n+\n         return $this->respond([\n             'status' => true,\n             'message' => 'Follower Following List',\n             'data' => $data,\n"
                },
                {
                    "date": 1628098483641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1123,9 +1123,9 @@\n \n \n         if(!$getFollowingList->IsEmpty()){\n             foreach($getFollowingList as $followingData){\n-                $getUserData = User::where('id', $followingData->user_id)->first();\n+                $getUserData = User::where('id', $followingData->follower_id)->first();\n                 $row['id'] = $getUserData->id;\n                 $row['name'] = $getUserData->name;\n                 $row['nick_name'] = $getUserData->user_name;\n                 $row['thumb_image'] = env('APP_URL').'/storage/app/public/'.$getUserData->thumb_avatar;\n"
                },
                {
                    "date": 1628098630535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1090,9 +1090,9 @@\n         return $this->respond([\n             'status' => true,\n             'message' => $message,\n             'data' => '',\n-            'is_like' => $data['is_follow'],\n+            'is_follow' => $data['is_follow'],\n             'error' => false,\n             'errors' => '',\n         ]);\n \n"
                },
                {
                    "date": 1628775323183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -930,9 +930,8 @@\n         ];\n         return response()->json($resp, $this->statusCode);\n     }\n \n-\n     public function getReelsList(Request $request){\n \n         $data =  array();\n         $data['id'] = 1;\n"
                },
                {
                    "date": 1628775640980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -984,9 +984,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->get();\n+        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getVoxoMedia as $mediaData){\n                 $data['id'] = $mediaData->id;\n"
                },
                {
                    "date": 1628775839296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1001,9 +1001,9 @@\n                 $mediaDataArray[] = $data;\n             }\n             $resp = [\n                 'status' => true,\n-                'data' => $mediaDataArray,\n+                'data' => $getVoxoMedia,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n             ];\n"
                },
                {
                    "date": 1628775888624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -984,9 +984,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(2);\n         if(!$getVoxoMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getVoxoMedia as $mediaData){\n                 $data['id'] = $mediaData->id;\n"
                },
                {
                    "date": 1628775926034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -984,9 +984,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(2);\n+        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(5);\n         if(!$getVoxoMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getVoxoMedia as $mediaData){\n                 $data['id'] = $mediaData->id;\n"
                },
                {
                    "date": 1628775981407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -984,9 +984,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(5);\n+        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(15);\n         if(!$getVoxoMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getVoxoMedia as $mediaData){\n                 $data['id'] = $mediaData->id;\n"
                },
                {
                    "date": 1628776019741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,9 +1021,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->get();\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(15);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n@@ -1039,9 +1039,9 @@\n                 $mediaDataArray[] = $data;\n             }\n             $resp = [\n                 'status' => true,\n-                'data' => $mediaDataArray,\n+                'data' => $getSaveMedia,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n             ];\n"
                },
                {
                    "date": 1628776208298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -971,22 +971,22 @@\n     \n     public function getMyMedia(Request $request){\n         $user = Auth::user();\n         if($request->get('type') != null && $request->get('type') == 'myvideo'){\n-            $getVoxoMedia = $this->getMyVideo($user->id);\n+            $getVoxoMedia = $this->getMyVideo($user->id, '', $request->get('limit'));\n         }elseif($request->get('type') != null && $request->get('type') == 'savereels'){\n-            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'video');\n+            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'video', $request->get('limit'));\n         }elseif($request->get('type') != null && $request->get('type') == 'savewall'){\n-            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'wall');\n+            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'wall', $request->get('limit'));\n         }else{\n             $getVoxoMedia = $this->getMyVideo($user->id);\n         }\n         \n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(15);\n+        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->get();\n         if(!$getVoxoMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getVoxoMedia as $mediaData){\n                 $data['id'] = $mediaData->id;\n@@ -1001,9 +1001,9 @@\n                 $mediaDataArray[] = $data;\n             }\n             $resp = [\n                 'status' => true,\n-                'data' => $getVoxoMedia,\n+                'data' => $mediaDataArray,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n             ];\n@@ -1021,9 +1021,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(15);\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->get();\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n@@ -1039,9 +1039,9 @@\n                 $mediaDataArray[] = $data;\n             }\n             $resp = [\n                 'status' => true,\n-                'data' => $getSaveMedia,\n+                'data' => $mediaDataArray,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n             ];\n"
                },
                {
                    "date": 1628776341412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -971,13 +971,13 @@\n     \n     public function getMyMedia(Request $request){\n         $user = Auth::user();\n         if($request->get('type') != null && $request->get('type') == 'myvideo'){\n-            $getVoxoMedia = $this->getMyVideo($user->id, '', $request->get('limit'));\n+            $getVoxoMedia = $this->getMyVideo($user->id);\n         }elseif($request->get('type') != null && $request->get('type') == 'savereels'){\n-            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'video', $request->get('limit'));\n+            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'video');\n         }elseif($request->get('type') != null && $request->get('type') == 'savewall'){\n-            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'wall', $request->get('limit'));\n+            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'wall');\n         }else{\n             $getVoxoMedia = $this->getMyVideo($user->id);\n         }\n         \n"
                },
                {
                    "date": 1628776365183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -984,9 +984,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->get();\n+        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(5);\n         if(!$getVoxoMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getVoxoMedia as $mediaData){\n                 $data['id'] = $mediaData->id;\n@@ -1001,9 +1001,9 @@\n                 $mediaDataArray[] = $data;\n             }\n             $resp = [\n                 'status' => true,\n-                'data' => $mediaDataArray,\n+                'data' => $getVoxoMedia,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n             ];\n"
                },
                {
                    "date": 1628777140497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,9 +1021,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->get();\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628777227200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,9 +1021,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n+        $getSaveMedia = UserSaveMedias::with('vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628777355189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,9 +1021,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->get();\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628777438011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,9 +1021,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->get();\n+        $getSaveMedia = UserSaveMedias::with('vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628777450427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1039,9 +1039,9 @@\n                 $mediaDataArray[] = $data;\n             }\n             $resp = [\n                 'status' => true,\n-                'data' => $mediaDataArray,\n+                'data' => $getSaveMedia,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n             ];\n"
                },
                {
                    "date": 1628777504382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1039,9 +1039,9 @@\n                 $mediaDataArray[] = $data;\n             }\n             $resp = [\n                 'status' => true,\n-                'data' => $getSaveMedia,\n+                'data' => $getSaveMedia->v_media,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n             ];\n"
                },
                {
                    "date": 1628777529889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1022,8 +1022,9 @@\n     }\n \n     function getSaveWallVideo($userId, $type){\n         $getSaveMedia = UserSaveMedias::with('vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n+        print_r($getSaveMedia);die;\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628777555515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1022,9 +1022,9 @@\n     }\n \n     function getSaveWallVideo($userId, $type){\n         $getSaveMedia = UserSaveMedias::with('vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n-        print_r($getSaveMedia);die;\n+        print_r($getSaveMedia->vMedia);die;\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628777564496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1022,9 +1022,9 @@\n     }\n \n     function getSaveWallVideo($userId, $type){\n         $getSaveMedia = UserSaveMedias::with('vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n-        print_r($getSaveMedia->vMedia);die;\n+        print_r($getSaveMedia);die;\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628777628253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1022,9 +1022,8 @@\n     }\n \n     function getSaveWallVideo($userId, $type){\n         $getSaveMedia = UserSaveMedias::with('vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n-        print_r($getSaveMedia);die;\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628777696881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,9 +1021,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n+        $getSaveMedia = UserSaveMedias::with('vMedia', 'comments', 'likes')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n@@ -1039,9 +1039,9 @@\n                 $mediaDataArray[] = $data;\n             }\n             $resp = [\n                 'status' => true,\n-                'data' => $getSaveMedia->v_media,\n+                'data' => $getSaveMedia,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n             ];\n"
                },
                {
                    "date": 1628777709433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,9 +1021,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('vMedia', 'comments', 'likes')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n+        $getSaveMedia = UserSaveMedias::with('vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628777787116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,9 +1021,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n+        $getSaveMedia = UserSaveMedias::with('vMedia','comments', 'likes')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628778580540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,9 +1021,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('vMedia','comments', 'likes')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n+        $getSaveMedia = UserSaveMedias::with('vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628778602283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,9 +1021,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628778810591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1037,8 +1037,9 @@\n                 $data['total_comments'] = count($getVoxoMedia->comments);\n                 $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n+            $getSaveMedia = $mediaDataArray;\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n                 'message' => 'success.',\n"
                },
                {
                    "date": 1628778825949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1037,9 +1037,9 @@\n                 $data['total_comments'] = count($getVoxoMedia->comments);\n                 $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n-            $getSaveMedia = $mediaDataArray;\n+            $getSaveMedia['data'] = $mediaDataArray;\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n                 'message' => 'success.',\n"
                },
                {
                    "date": 1628778861447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1037,8 +1037,9 @@\n                 $data['total_comments'] = count($getVoxoMedia->comments);\n                 $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n+            unset($getSaveMedia['data']);\n             $getSaveMedia['data'] = $mediaDataArray;\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n"
                },
                {
                    "date": 1628778877920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1038,9 +1038,9 @@\n                 $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n             unset($getSaveMedia['data']);\n-            $getSaveMedia['data'] = $mediaDataArray;\n+            $getSaveMedia['datass'] = $mediaDataArray;\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n                 'message' => 'success.',\n"
                },
                {
                    "date": 1628778892358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1028,9 +1028,9 @@\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n                 $data['id'] = $getVoxoMedia->id;\n                 $data['user_id'] = $getVoxoMedia->user_id;\n-                $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n+                $data['video'] = $getVoxoMedia->video;\n                 $data['description'] = $getVoxoMedia->description;\n                 $data['audio_name'] = $getVoxoMedia->audio_name;\n                 $data['comments'] = $getVoxoMedia->comments;\n                 $data['likes'] = $getVoxoMedia->likes;\n"
                },
                {
                    "date": 1628778907987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1037,9 +1037,9 @@\n                 $data['total_comments'] = count($getVoxoMedia->comments);\n                 $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n-            unset($getSaveMedia['data']);\n+            unset($mediaDataArray['data']);\n             $getSaveMedia['datass'] = $mediaDataArray;\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n"
                },
                {
                    "date": 1628778914963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1037,9 +1037,9 @@\n                 $data['total_comments'] = count($getVoxoMedia->comments);\n                 $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n-            unset($mediaDataArray['data']);\n+            unset($getSaveMedia['data']);\n             $getSaveMedia['datass'] = $mediaDataArray;\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n"
                },
                {
                    "date": 1628778972767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1038,9 +1038,9 @@\n                 $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n             unset($getSaveMedia['data']);\n-            $getSaveMedia['datass'] = $mediaDataArray;\n+            $getSaveMedia = $mediaDataArray;\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n                 'message' => 'success.',\n"
                },
                {
                    "date": 1628778987141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1037,9 +1037,9 @@\n                 $data['total_comments'] = count($getVoxoMedia->comments);\n                 $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n-            unset($getSaveMedia['data']);\n+            //unset($getSaveMedia['data']);\n             $getSaveMedia = $mediaDataArray;\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n"
                },
                {
                    "date": 1628779002967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1038,9 +1038,9 @@\n                 $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n             //unset($getSaveMedia['data']);\n-            $getSaveMedia = $mediaDataArray;\n+            $getSaveMedia['data'] = $mediaDataArray;\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n                 'message' => 'success.',\n"
                },
                {
                    "date": 1628779046618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1037,9 +1037,9 @@\n                 $data['total_comments'] = count($getVoxoMedia->comments);\n                 $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n-            //unset($getSaveMedia['data']);\n+            print_r($getSaveMedia['data']);die;\n             $getSaveMedia['data'] = $mediaDataArray;\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n"
                },
                {
                    "date": 1628779057495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1037,9 +1037,9 @@\n                 $data['total_comments'] = count($getVoxoMedia->comments);\n                 $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n-            print_r($getSaveMedia['data']);die;\n+            print_r($getSaveMedia);die;\n             $getSaveMedia['data'] = $mediaDataArray;\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n"
                },
                {
                    "date": 1628779137803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1037,9 +1037,9 @@\n                 $data['total_comments'] = count($getVoxoMedia->comments);\n                 $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n-            print_r($getSaveMedia);die;\n+            //print_r($getSaveMedia);die;\n             $getSaveMedia['data'] = $mediaDataArray;\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n"
                },
                {
                    "date": 1628779156619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1038,9 +1038,9 @@\n                 $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n             //print_r($getSaveMedia);die;\n-            $getSaveMedia['data'] = $mediaDataArray;\n+            //$getSaveMedia['data'] = $mediaDataArray;\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n                 'message' => 'success.',\n"
                },
                {
                    "date": 1628779647511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,29 +1021,30 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(5);\n+        $limit = $request->limit ? $request->limit : 20;\n+        $page = $request->page && $request->page > 0 ? $request->page : 1;\n+        $skip = ($page - 1) * $limit;\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->slice($skip, $limit);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n                 $data['id'] = $getVoxoMedia->id;\n                 $data['user_id'] = $getVoxoMedia->user_id;\n-                $data['video'] = $getVoxoMedia->video;\n+                $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n                 $data['description'] = $getVoxoMedia->description;\n                 $data['audio_name'] = $getVoxoMedia->audio_name;\n                 $data['comments'] = $getVoxoMedia->comments;\n                 $data['likes'] = $getVoxoMedia->likes;\n                 $data['total_comments'] = count($getVoxoMedia->comments);\n                 $data['total_likes'] = count($getVoxoMedia->likes);\n                 $mediaDataArray[] = $data;\n             }\n-            //print_r($getSaveMedia);die;\n-            //$getSaveMedia['data'] = $mediaDataArray;\n             $resp = [\n                 'status' => true,\n-                'data' => $getSaveMedia,\n+                'data' => $mediaDataArray,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n             ];\n"
                },
                {
                    "date": 1628779691083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -973,9 +973,9 @@\n         $user = Auth::user();\n         if($request->get('type') != null && $request->get('type') == 'myvideo'){\n             $getVoxoMedia = $this->getMyVideo($user->id);\n         }elseif($request->get('type') != null && $request->get('type') == 'savereels'){\n-            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'video');\n+            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'video', $request->limit, $request->page);\n         }elseif($request->get('type') != null && $request->get('type') == 'savewall'){\n             $getVoxoMedia = $this->getSaveWallVideo($user->id, 'wall');\n         }else{\n             $getVoxoMedia = $this->getMyVideo($user->id);\n@@ -1020,11 +1020,11 @@\n \n         return $resp;\n     }\n \n-    function getSaveWallVideo($userId, $type){\n-        $limit = $request->limit ? $request->limit : 20;\n-        $page = $request->page && $request->page > 0 ? $request->page : 1;\n+    function getSaveWallVideo($userId, $type, $limit, $page){\n+        $limit = $limit ? $limit : 20;\n+        $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n         $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->slice($skip, $limit);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n"
                },
                {
                    "date": 1628779950825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,12 +1021,12 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type, $limit, $page){\n-        $limit = $limit ? $limit : 20;\n+        $limit = $limit ? $limit : 2;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->slice($skip, $limit);\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->skip($skip)->take($limit);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628779962299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1025,9 +1025,9 @@\n         $limit = $limit ? $limit : 2;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n         $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->skip($skip)->take($limit);\n-        if(!$getSaveMedia->IsEmpty()){\n+        if($getSaveMedia){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n                 $data['id'] = $getVoxoMedia->id;\n"
                },
                {
                    "date": 1628780002435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1024,9 +1024,9 @@\n     function getSaveWallVideo($userId, $type, $limit, $page){\n         $limit = $limit ? $limit : 2;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->skip($skip)->take($limit);\n+        $getSaveMedia = UserSaveMedias::where(['user_ids' => $userId, 'type' => $type])->orderBy('id', 'DESC')->skip($skip)->take($limit);\n         if($getSaveMedia){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628780014533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1025,8 +1025,9 @@\n         $limit = $limit ? $limit : 2;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n         $getSaveMedia = UserSaveMedias::where(['user_ids' => $userId, 'type' => $type])->orderBy('id', 'DESC')->skip($skip)->take($limit);\n+        die;\n         if($getSaveMedia){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628780044410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -973,9 +973,9 @@\n         $user = Auth::user();\n         if($request->get('type') != null && $request->get('type') == 'myvideo'){\n             $getVoxoMedia = $this->getMyVideo($user->id);\n         }elseif($request->get('type') != null && $request->get('type') == 'savereels'){\n-            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'video', $request->limit, $request->page);\n+            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'video', $request->get('limit'), $request->get('page'));\n         }elseif($request->get('type') != null && $request->get('type') == 'savewall'){\n             $getVoxoMedia = $this->getSaveWallVideo($user->id, 'wall');\n         }else{\n             $getVoxoMedia = $this->getMyVideo($user->id);\n"
                },
                {
                    "date": 1628780078763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1024,9 +1024,9 @@\n     function getSaveWallVideo($userId, $type, $limit, $page){\n         $limit = $limit ? $limit : 2;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n-        $getSaveMedia = UserSaveMedias::where(['user_ids' => $userId, 'type' => $type])->orderBy('id', 'DESC')->skip($skip)->take($limit);\n+        $getSaveMedia = UserSaveMedias::where(['user_ids' => $userId, 'types' => $type])->orderBy('id', 'DESC')->skip($skip)->take($limit);\n         die;\n         if($getSaveMedia){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n"
                },
                {
                    "date": 1628780099762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -973,9 +973,9 @@\n         $user = Auth::user();\n         if($request->get('type') != null && $request->get('type') == 'myvideo'){\n             $getVoxoMedia = $this->getMyVideo($user->id);\n         }elseif($request->get('type') != null && $request->get('type') == 'savereels'){\n-            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'video', $request->get('limit'), $request->get('page'));\n+            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'video', $request->limit, $request->page);\n         }elseif($request->get('type') != null && $request->get('type') == 'savewall'){\n             $getVoxoMedia = $this->getSaveWallVideo($user->id, 'wall');\n         }else{\n             $getVoxoMedia = $this->getMyVideo($user->id);\n@@ -1024,11 +1024,10 @@\n     function getSaveWallVideo($userId, $type, $limit, $page){\n         $limit = $limit ? $limit : 2;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n-        $getSaveMedia = UserSaveMedias::where(['user_ids' => $userId, 'types' => $type])->orderBy('id', 'DESC')->skip($skip)->take($limit);\n-        die;\n-        if($getSaveMedia){\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->get();\n+        if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n                 $data['id'] = $getVoxoMedia->id;\n"
                },
                {
                    "date": 1628780125286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1024,9 +1024,9 @@\n     function getSaveWallVideo($userId, $type, $limit, $page){\n         $limit = $limit ? $limit : 2;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->get();\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->take($limit);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628780149833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1024,9 +1024,9 @@\n     function getSaveWallVideo($userId, $type, $limit, $page){\n         $limit = $limit ? $limit : 2;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->take($limit);\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->skip($skip)->take($limit)->get();\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628780181296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1046,8 +1046,9 @@\n                 'data' => $mediaDataArray,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n+                'page' => $page\n             ];\n \n         }else{\n             $resp = [\n"
                },
                {
                    "date": 1628780209459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,9 +1021,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type, $limit, $page){\n-        $limit = $limit ? $limit : 2;\n+        $limit = $limit ? $limit : 1;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n         $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->skip($skip)->take($limit)->get();\n         if(!$getSaveMedia->IsEmpty()){\n"
                },
                {
                    "date": 1628780225727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,9 +1021,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type, $limit, $page){\n-        $limit = $limit ? $limit : 1;\n+        $limit = $limit ? $limit : 2;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n         $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->skip($skip)->take($limit)->get();\n         if(!$getSaveMedia->IsEmpty()){\n"
                },
                {
                    "date": 1628780245752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1021,9 +1021,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type, $limit, $page){\n-        $limit = $limit ? $limit : 2;\n+        $limit = $limit ? $limit : 1;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n         $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->skip($skip)->take($limit)->get();\n         if(!$getSaveMedia->IsEmpty()){\n"
                },
                {
                    "date": 1628780275255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1046,9 +1046,9 @@\n                 'data' => $mediaDataArray,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n-                'page' => $page\n+                'page' => $page+1\n             ];\n \n         }else{\n             $resp = [\n"
                },
                {
                    "date": 1628780334763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -984,9 +984,12 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(5);\n+        $limit = $limit ? $limit : 1;\n+        $page = $page && $page > 0 ? $page : 1;\n+        $skip = ($page - 1) * $limit;\n+        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->skip($skip)->take($limit)->get();\n         if(!$getVoxoMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getVoxoMedia as $mediaData){\n                 $data['id'] = $mediaData->id;\n@@ -1001,9 +1004,9 @@\n                 $mediaDataArray[] = $data;\n             }\n             $resp = [\n                 'status' => true,\n-                'data' => $getVoxoMedia,\n+                'data' => $mediaDataArray,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n             ];\n"
                },
                {
                    "date": 1628780345434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1008,8 +1008,9 @@\n                 'data' => $mediaDataArray,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n+                'page' => $page+1\n             ];\n \n         }else{\n             $resp = [\n"
                },
                {
                    "date": 1628780382024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1008,9 +1008,10 @@\n                 'data' => $mediaDataArray,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n-                'page' => $page+1\n+                'next_page' => $page+1,\n+                'prev_page' => $page-1\n             ];\n \n         }else{\n             $resp = [\n@@ -1050,9 +1051,10 @@\n                 'data' => $mediaDataArray,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n-                'page' => $page+1\n+                'next_page' => $page+1,\n+                'prev_page' => $page-1\n             ];\n \n         }else{\n             $resp = [\n"
                },
                {
                    "date": 1628841418963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1029,9 +1029,9 @@\n     function getSaveWallVideo($userId, $type, $limit, $page){\n         $limit = $limit ? $limit : 1;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->skip($skip)->take($limit)->get();\n+        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628841431065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1034,18 +1034,18 @@\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n-                $data['id'] = $getVoxoMedia->id;\n-                $data['user_id'] = $getVoxoMedia->user_id;\n-                $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n-                $data['description'] = $getVoxoMedia->description;\n-                $data['audio_name'] = $getVoxoMedia->audio_name;\n-                $data['comments'] = $getVoxoMedia->comments;\n-                $data['likes'] = $getVoxoMedia->likes;\n-                $data['total_comments'] = count($getVoxoMedia->comments);\n-                $data['total_likes'] = count($getVoxoMedia->likes);\n-                $mediaDataArray[] = $data;\n+                $getSaveMedia['id'] = $getVoxoMedia->id;\n+                $getSaveMedia['user_id'] = $getVoxoMedia->user_id;\n+                $getSaveMedia['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n+                $getSaveMedia['description'] = $getVoxoMedia->description;\n+                $getSaveMedia['audio_name'] = $getVoxoMedia->audio_name;\n+                $getSaveMedia['comments'] = $getVoxoMedia->comments;\n+                $getSaveMedia['likes'] = $getVoxoMedia->likes;\n+                $getSaveMedia['total_comments'] = count($getVoxoMedia->comments);\n+                $getSaveMedia['total_likes'] = count($getVoxoMedia->likes);\n+                $mediaDataArray[] = $getSaveMedia;\n             }\n             $resp = [\n                 'status' => true,\n                 'data' => $mediaDataArray,\n"
                },
                {
                    "date": 1628843782024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1029,9 +1029,9 @@\n     function getSaveWallVideo($userId, $type, $limit, $page){\n         $limit = $limit ? $limit : 1;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n-        $getSaveMedia = UserSaveMedias::where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(1);\n+        $getSaveMedia = UserSaveMedias::with('comments', 'likes', 'users')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628843843524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1029,9 +1029,9 @@\n     function getSaveWallVideo($userId, $type, $limit, $page){\n         $limit = $limit ? $limit : 1;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n-        $getSaveMedia = UserSaveMedias::with('comments', 'likes', 'users')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(1);\n+        $getSaveMedia = UserSaveMedias::with('voxo_medias.comments', 'voxo_medias.likes', '.voxo_mediasusers', 'vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628843911254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1029,9 +1029,9 @@\n     function getSaveWallVideo($userId, $type, $limit, $page){\n         $limit = $limit ? $limit : 1;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n-        $getSaveMedia = UserSaveMedias::with('voxo_medias.comments', 'voxo_medias.likes', '.voxo_mediasusers', 'vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(1);\n+        $getSaveMedia = UserSaveMedias::with('vMedia.comments', 'vMedia.likes', 'vMedia.users', 'vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628843947583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1029,9 +1029,9 @@\n     function getSaveWallVideo($userId, $type, $limit, $page){\n         $limit = $limit ? $limit : 1;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n-        $getSaveMedia = UserSaveMedias::with('vMedia.comments', 'vMedia.likes', 'vMedia.users', 'vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(1);\n+        $getSaveMedia = UserSaveMedias::with('vMedia.comments', 'vMedia.likes', 'vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628843960589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1047,9 +1047,9 @@\n                 $mediaDataArray[] = $getSaveMedia;\n             }\n             $resp = [\n                 'status' => true,\n-                'data' => $mediaDataArray,\n+                'data' => $getSaveMedia,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n                 'next_page' => $page+1,\n"
                },
                {
                    "date": 1628844334126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1029,9 +1029,12 @@\n     function getSaveWallVideo($userId, $type, $limit, $page){\n         $limit = $limit ? $limit : 1;\n         $page = $page && $page > 0 ? $page : 1;\n         $skip = ($page - 1) * $limit;\n-        $getSaveMedia = UserSaveMedias::with('vMedia.comments', 'vMedia.likes', 'vMedia')->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(1);\n+        $getSaveMedia = UserSaveMedias::leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n+        ->leftJoin('voxo_media_comments', 'voxo_media_comments.voxo_media_id', '=','voxo_medias.id')\n+        ->leftJoin('voxo_media_likes', 'voxo_media_likes.voxo_media_id', '=','voxo_medias.id')\n+        ->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628844413773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1032,9 +1032,9 @@\n         $skip = ($page - 1) * $limit;\n         $getSaveMedia = UserSaveMedias::leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n         ->leftJoin('voxo_media_comments', 'voxo_media_comments.voxo_media_id', '=','voxo_medias.id')\n         ->leftJoin('voxo_media_likes', 'voxo_media_likes.voxo_media_id', '=','voxo_medias.id')\n-        ->where(['user_id' => $userId, 'type' => $type])->orderBy('id', 'DESC')->paginate(1);\n+        ->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628844432501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1032,9 +1032,9 @@\n         $skip = ($page - 1) * $limit;\n         $getSaveMedia = UserSaveMedias::leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n         ->leftJoin('voxo_media_comments', 'voxo_media_comments.voxo_media_id', '=','voxo_medias.id')\n         ->leftJoin('voxo_media_likes', 'voxo_media_likes.voxo_media_id', '=','voxo_medias.id')\n-        ->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('id', 'DESC')->paginate(1);\n+        ->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getSaveMedia as $mediaData){\n                 $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n"
                },
                {
                    "date": 1628844446326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1034,22 +1034,9 @@\n         ->leftJoin('voxo_media_comments', 'voxo_media_comments.voxo_media_id', '=','voxo_medias.id')\n         ->leftJoin('voxo_media_likes', 'voxo_media_likes.voxo_media_id', '=','voxo_medias.id')\n         ->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n-            $mediaDataArray = array();\n-            foreach($getSaveMedia as $mediaData){\n-                $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('id', $mediaData->voxo_media_id)->first();\n-                $getSaveMedia['id'] = $getVoxoMedia->id;\n-                $getSaveMedia['user_id'] = $getVoxoMedia->user_id;\n-                $getSaveMedia['video'] = env('APP_URL').'/storage/app/public/voxo/'.$getVoxoMedia->video;\n-                $getSaveMedia['description'] = $getVoxoMedia->description;\n-                $getSaveMedia['audio_name'] = $getVoxoMedia->audio_name;\n-                $getSaveMedia['comments'] = $getVoxoMedia->comments;\n-                $getSaveMedia['likes'] = $getVoxoMedia->likes;\n-                $getSaveMedia['total_comments'] = count($getVoxoMedia->comments);\n-                $getSaveMedia['total_likes'] = count($getVoxoMedia->likes);\n-                $mediaDataArray[] = $getSaveMedia;\n-            }\n+            \n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n                 'message' => 'success.',\n"
                },
                {
                    "date": 1628844475180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1041,10 +1041,8 @@\n                 'data' => $getSaveMedia,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n-                'next_page' => $page+1,\n-                'prev_page' => $page-1\n             ];\n \n         }else{\n             $resp = [\n"
                },
                {
                    "date": 1628844524410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -973,9 +973,9 @@\n         $user = Auth::user();\n         if($request->get('type') != null && $request->get('type') == 'myvideo'){\n             $getVoxoMedia = $this->getMyVideo($user->id);\n         }elseif($request->get('type') != null && $request->get('type') == 'savereels'){\n-            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'video', $request->limit, $request->page);\n+            $getVoxoMedia = $this->getSaveWallVideo($user->id, 'video');\n         }elseif($request->get('type') != null && $request->get('type') == 'savewall'){\n             $getVoxoMedia = $this->getSaveWallVideo($user->id, 'wall');\n         }else{\n             $getVoxoMedia = $this->getMyVideo($user->id);\n@@ -1025,12 +1025,9 @@\n \n         return $resp;\n     }\n \n-    function getSaveWallVideo($userId, $type, $limit, $page){\n-        $limit = $limit ? $limit : 1;\n-        $page = $page && $page > 0 ? $page : 1;\n-        $skip = ($page - 1) * $limit;\n+    function getSaveWallVideo($userId, $type){\n         $getSaveMedia = UserSaveMedias::leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n         ->leftJoin('voxo_media_comments', 'voxo_media_comments.voxo_media_id', '=','voxo_medias.id')\n         ->leftJoin('voxo_media_likes', 'voxo_media_likes.voxo_media_id', '=','voxo_medias.id')\n         ->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(1);\n"
                },
                {
                    "date": 1628844584170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1026,9 +1026,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n+        $getSaveMedia = UserSaveMedias::select('voxo_medias.id', 'voxo_medias.user_id')->leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n         ->leftJoin('voxo_media_comments', 'voxo_media_comments.voxo_media_id', '=','voxo_medias.id')\n         ->leftJoin('voxo_media_likes', 'voxo_media_likes.voxo_media_id', '=','voxo_medias.id')\n         ->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n"
                },
                {
                    "date": 1628844594228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1026,9 +1026,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::select('voxo_medias.id', 'voxo_medias.user_id')->leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n+        $getSaveMedia = UserSaveMedias::select('voxo_medias.id', 'voxo_medias.user_id', 'voxo_medias.video')->leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n         ->leftJoin('voxo_media_comments', 'voxo_media_comments.voxo_media_id', '=','voxo_medias.id')\n         ->leftJoin('voxo_media_likes', 'voxo_media_likes.voxo_media_id', '=','voxo_medias.id')\n         ->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n"
                },
                {
                    "date": 1628844625914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1026,9 +1026,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::select('voxo_medias.id', 'voxo_medias.user_id', 'voxo_medias.video')->leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n+        $getSaveMedia = UserSaveMedias::select('voxo_medias.id', 'voxo_medias.user_id', 'voxo_medias.video', 'voxo_media_comments.comment')->leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n         ->leftJoin('voxo_media_comments', 'voxo_media_comments.voxo_media_id', '=','voxo_medias.id')\n         ->leftJoin('voxo_media_likes', 'voxo_media_likes.voxo_media_id', '=','voxo_medias.id')\n         ->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n"
                },
                {
                    "date": 1628844702868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1026,9 +1026,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::select('voxo_medias.id', 'voxo_medias.user_id', 'voxo_medias.video', 'voxo_media_comments.comment')->leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n+        $getSaveMedia = UserSaveMedias::with('voxo_medias.comments')->select('voxo_medias.id', 'voxo_medias.user_id', 'voxo_medias.video', 'voxo_media_comments.comment')->leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n         ->leftJoin('voxo_media_comments', 'voxo_media_comments.voxo_media_id', '=','voxo_medias.id')\n         ->leftJoin('voxo_media_likes', 'voxo_media_likes.voxo_media_id', '=','voxo_medias.id')\n         ->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n"
                },
                {
                    "date": 1628844753576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1026,9 +1026,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('voxo_medias.comments')->select('voxo_medias.id', 'voxo_medias.user_id', 'voxo_medias.video', 'voxo_media_comments.comment')->leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n+        $getSaveMedia = UserSaveMedias::with('vMedia.comments')->select('voxo_medias.id', 'voxo_medias.user_id', 'voxo_medias.video', 'voxo_media_comments.comment')->leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n         ->leftJoin('voxo_media_comments', 'voxo_media_comments.voxo_media_id', '=','voxo_medias.id')\n         ->leftJoin('voxo_media_likes', 'voxo_media_likes.voxo_media_id', '=','voxo_medias.id')\n         ->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n"
                },
                {
                    "date": 1628844834796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1026,9 +1026,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('vMedia.comments')->select('voxo_medias.id', 'voxo_medias.user_id', 'voxo_medias.video', 'voxo_media_comments.comment')->leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n+        $getSaveMedia = UserSaveMedias::with('vMedia.comments')->select('voxo_medias.id', 'voxo_medias.user_id', 'voxo_medias.video')->leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n         ->leftJoin('voxo_media_comments', 'voxo_media_comments.voxo_media_id', '=','voxo_medias.id')\n         ->leftJoin('voxo_media_likes', 'voxo_media_likes.voxo_media_id', '=','voxo_medias.id')\n         ->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n"
                },
                {
                    "date": 1628844860734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1026,9 +1026,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('vMedia.comments')->select('voxo_medias.id', 'voxo_medias.user_id', 'voxo_medias.video')->leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n+        $getSaveMedia = UserSaveMedias::with('vMedia.comments')->leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n         ->leftJoin('voxo_media_comments', 'voxo_media_comments.voxo_media_id', '=','voxo_medias.id')\n         ->leftJoin('voxo_media_likes', 'voxo_media_likes.voxo_media_id', '=','voxo_medias.id')\n         ->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n"
                },
                {
                    "date": 1628844924122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1026,11 +1026,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('vMedia.comments')->leftJoin('voxo_medias', 'voxo_medias.id', '=','user_save_medias.voxo_media_id')\n-        ->leftJoin('voxo_media_comments', 'voxo_media_comments.voxo_media_id', '=','voxo_medias.id')\n-        ->leftJoin('voxo_media_likes', 'voxo_media_likes.voxo_media_id', '=','voxo_medias.id')\n+        $getSaveMedia = UserSaveMedias::with('vMedia.comments')\n         ->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n             \n             $resp = [\n"
                },
                {
                    "date": 1628844995289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1026,10 +1026,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('vMedia.comments')\n-        ->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(1);\n+        $getSaveMedia = UserSaveMedias::with('vMedia.comments')->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(1);\n         if(!$getSaveMedia->IsEmpty()){\n             \n             $resp = [\n                 'status' => true,\n"
                },
                {
                    "date": 1628845022161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1026,9 +1026,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('vMedia.comments')->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(1);\n+        $getSaveMedia = UserSaveMedias::with('vMedia.comments','vMedia.likes')->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(10);\n         if(!$getSaveMedia->IsEmpty()){\n             \n             $resp = [\n                 'status' => true,\n"
                },
                {
                    "date": 1628845166682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1028,9 +1028,9 @@\n \n     function getSaveWallVideo($userId, $type){\n         $getSaveMedia = UserSaveMedias::with('vMedia.comments','vMedia.likes')->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(10);\n         if(!$getSaveMedia->IsEmpty()){\n-            \n+            $getSaveMedia['comment_count'] = count($getSaveMedia->v_media->comments)\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n                 'message' => 'success.',\n"
                },
                {
                    "date": 1628845174645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1028,9 +1028,10 @@\n \n     function getSaveWallVideo($userId, $type){\n         $getSaveMedia = UserSaveMedias::with('vMedia.comments','vMedia.likes')->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(10);\n         if(!$getSaveMedia->IsEmpty()){\n-            $getSaveMedia['comment_count'] = count($getSaveMedia->v_media->comments)\n+            $getSaveMedia['comment_count'] = count($getSaveMedia->v_media->comments);\n+            $getSaveMedia['comment_count'] = count($getSaveMedia->v_media->comments);\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n                 'message' => 'success.',\n"
                },
                {
                    "date": 1628845182532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1029,9 +1029,9 @@\n     function getSaveWallVideo($userId, $type){\n         $getSaveMedia = UserSaveMedias::with('vMedia.comments','vMedia.likes')->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(10);\n         if(!$getSaveMedia->IsEmpty()){\n             $getSaveMedia['comment_count'] = count($getSaveMedia->v_media->comments);\n-            $getSaveMedia['comment_count'] = count($getSaveMedia->v_media->comments);\n+            $getSaveMedia['like_count'] = count($getSaveMedia->v_media->likes);\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n                 'message' => 'success.',\n"
                },
                {
                    "date": 1628845201053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1028,10 +1028,10 @@\n \n     function getSaveWallVideo($userId, $type){\n         $getSaveMedia = UserSaveMedias::with('vMedia.comments','vMedia.likes')->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(10);\n         if(!$getSaveMedia->IsEmpty()){\n-            $getSaveMedia['comment_count'] = count($getSaveMedia->v_media->comments);\n-            $getSaveMedia['like_count'] = count($getSaveMedia->v_media->likes);\n+            $getSaveMedia['comment_count'] = count($getSaveMedia->comments);\n+            $getSaveMedia['like_count'] = count($getSaveMedia->likes);\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n                 'message' => 'success.',\n"
                },
                {
                    "date": 1628845214893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1028,10 +1028,8 @@\n \n     function getSaveWallVideo($userId, $type){\n         $getSaveMedia = UserSaveMedias::with('vMedia.comments','vMedia.likes')->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(10);\n         if(!$getSaveMedia->IsEmpty()){\n-            $getSaveMedia['comment_count'] = count($getSaveMedia->comments);\n-            $getSaveMedia['like_count'] = count($getSaveMedia->likes);\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n                 'message' => 'success.',\n"
                },
                {
                    "date": 1628845233080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -984,11 +984,8 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $limit = $limit ? $limit : 1;\n-        $page = $page && $page > 0 ? $page : 1;\n-        $skip = ($page - 1) * $limit;\n         $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->skip($skip)->take($limit)->get();\n         if(!$getVoxoMedia->IsEmpty()){\n             $mediaDataArray = array();\n             foreach($getVoxoMedia as $mediaData){\n"
                },
                {
                    "date": 1628845240228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -986,21 +986,8 @@\n \n     function getMyVideo($userId){\n         $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->skip($skip)->take($limit)->get();\n         if(!$getVoxoMedia->IsEmpty()){\n-            $mediaDataArray = array();\n-            foreach($getVoxoMedia as $mediaData){\n-                $data['id'] = $mediaData->id;\n-                $data['user_id'] = $mediaData->user_id;\n-                $data['video'] = env('APP_URL').'/storage/app/public/voxo/'.$mediaData->video;\n-                $data['description'] = $mediaData->description;\n-                $data['audio_name'] = $mediaData->audio_name;\n-                $data['comments'] = $mediaData->comments;\n-                $data['likes'] = $mediaData->likes;\n-                $data['total_comments'] = count($mediaData->comments);\n-                $data['total_likes'] = count($mediaData->likes);\n-                $mediaDataArray[] = $data;\n-            }\n             $resp = [\n                 'status' => true,\n                 'data' => $mediaDataArray,\n                 'message' => 'success.',\n"
                },
                {
                    "date": 1628845257848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -984,13 +984,13 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->skip($skip)->take($limit)->get();\n+        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n-                'data' => $mediaDataArray,\n+                'data' => $getVoxoMedia,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n                 'next_page' => $page+1,\n"
                },
                {
                    "date": 1628845273326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -992,10 +992,8 @@\n                 'data' => $getVoxoMedia,\n                 'message' => 'success.',\n                 'error' => false,\n                 'errors' => '',\n-                'next_page' => $page+1,\n-                'prev_page' => $page-1\n             ];\n \n         }else{\n             $resp = [\n"
                },
                {
                    "date": 1628845292485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -984,9 +984,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = VoxoMedias::with('comments', 'likes', 'users')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = VoxoMedias::with('comments', 'likes')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getVoxoMedia,\n"
                },
                {
                    "date": 1628845574760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1072,11 +1072,11 @@\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n \n-        $getFollowerList = UserFollower::where('follower_id', $user->id)->get();\n+        $getFollowerList = UserFollower::where('follower_id', $user->id)->paginate(10);\n \n-        $getFollowingList = UserFollower::where('user_id', $user->id)->get();\n+        $getFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n \n         $followerArray = $followingArray = array();\n         if(!$getFollowerList->IsEmpty()){\n             foreach($getFollowerList as $followerData){\n@@ -1107,9 +1107,10 @@\n             $data['followings'] = $followingArray;\n         }else{\n             $data['followings'] = $followingArray;\n         }\n-\n+        $data['followers'] = $getFollowerList;\n+        $data['followings'] = $getFollowingList;\n         return $this->respond([\n             'status' => true,\n             'message' => 'Follower Following List',\n             'data' => $data,\n"
                },
                {
                    "date": 1628845610426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1072,11 +1072,11 @@\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n \n-        $getFollowerList = UserFollower::where('follower_id', $user->id)->paginate(10);\n+        $getFollowerList = UserFollower::where('follower_id', $user->id)->get();\n \n-        $getFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n+        $getFollowingList = UserFollower::where('user_id', $user->id)->get();\n \n         $followerArray = $followingArray = array();\n         if(!$getFollowerList->IsEmpty()){\n             foreach($getFollowerList as $followerData){\n@@ -1107,10 +1107,9 @@\n             $data['followings'] = $followingArray;\n         }else{\n             $data['followings'] = $followingArray;\n         }\n-        $data['followers'] = $getFollowerList;\n-        $data['followings'] = $getFollowingList;\n+\n         return $this->respond([\n             'status' => true,\n             'message' => 'Follower Following List',\n             'data' => $data,\n"
                },
                {
                    "date": 1628845625664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1072,44 +1072,14 @@\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n \n-        $getFollowerList = UserFollower::where('follower_id', $user->id)->get();\n+        $getFollowerList = UserFollower::where('follower_id', $user->id)->paginate(10);\n \n-        $getFollowingList = UserFollower::where('user_id', $user->id)->get();\n-\n-        $followerArray = $followingArray = array();\n-        if(!$getFollowerList->IsEmpty()){\n-            foreach($getFollowerList as $followerData){\n-                $getUserData = User::where('id', $followerData->user_id)->first();\n-                $row['id'] = $getUserData->id;\n-                $row['name'] = $getUserData->name;\n-                $row['nick_name'] = $getUserData->user_name;\n-                $row['thumb_image'] = env('APP_URL').'/storage/app/public/'.$getUserData->thumb_avatar;\n-                $followerArray[] = $row;\n-            }\n-\n-            $data['followers'] = $followerArray;\n-        }else{\n-            $data['followers'] = $followerArray;\n-        }\n-\n-\n-        if(!$getFollowingList->IsEmpty()){\n-            foreach($getFollowingList as $followingData){\n-                $getUserData = User::where('id', $followingData->follower_id)->first();\n-                $row['id'] = $getUserData->id;\n-                $row['name'] = $getUserData->name;\n-                $row['nick_name'] = $getUserData->user_name;\n-                $row['thumb_image'] = env('APP_URL').'/storage/app/public/'.$getUserData->thumb_avatar;\n-                $followingArray[] = $row;\n-            }\n-\n-            $data['followings'] = $followingArray;\n-        }else{\n-            $data['followings'] = $followingArray;\n-        }\n-\n+        $getFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n+        \n+        $data['followers'] = $getFollowerList;\n+        $data['followings'] = $getFollowingList;\n         return $this->respond([\n             'status' => true,\n             'message' => 'Follower Following List',\n             'data' => $data,\n"
                },
                {
                    "date": 1629120917963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,8 +171,9 @@\n         if($checkuser == 0){\n             $arr = [\n                 'role_id' => USER_ROLE,\n                 'mobile_number' => $request->get('mobile_number'),\n+                'user_name' => '@'.$request->get('mobile_number'),\n                 'password' => Hash::make('123456'),\n                 'status' => 0,\n                 'device_token' => $request->get('device_token'),\n                 'device_type' => $request->get('device_type'),\n"
                },
                {
                    "date": 1629121037521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -426,9 +426,9 @@\n      */\n     public function me()\n     {\n         $userID = Auth::user();\n-        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio', 'avatar', 'thumb_avatar')->where('users.id', $userID->id)->first();\n+        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio', 'avatar', 'thumb_avatar', 'gender')->where('users.id', $userID->id)->first();\n \n         $dataRow['id'] = $user->id;\n         $dataRow['nick_name'] = $user->nick_name;\n         $dataRow['name'] = $user->name;\n"
                },
                {
                    "date": 1629121055692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -433,8 +433,9 @@\n         $dataRow['nick_name'] = $user->nick_name;\n         $dataRow['name'] = $user->name;\n         $dataRow['email'] = $user->email;\n         $dataRow['mobile_number'] = $user->mobile_number;\n+        $dataRow['gender'] = $user->gender;\n         $dataRow['followers'] = 0;\n         $dataRow['following'] = 0;\n         $dataRow['likes'] = 0;\n         $dataRow['user_bio'] = $user->user_bio;\n"
                },
                {
                    "date": 1629121072922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,12 +230,12 @@\n             DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n             $passportToken->token->save();\n             $token = $passportToken->accessToken;\n-            $dataArray[] = $user;\n+            /$dataArray[] = $user;\n             $resp = [\n                 'status' => true,\n-                'data' => $dataArray,\n+                'data' => $user,\n                 'is_register' => 1,\n                 'token' => $token,\n                 'message' => 'success',\n                 'error' => false,\n"
                },
                {
                    "date": 1629121089346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,9 +230,9 @@\n             DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n             $passportToken = $user->createToken('API Access Token');\n             $passportToken->token->save();\n             $token = $passportToken->accessToken;\n-            /$dataArray[] = $user;\n+            //$dataArray[] = $user;\n             $resp = [\n                 'status' => true,\n                 'data' => $user,\n                 'is_register' => 1,\n"
                },
                {
                    "date": 1629287154366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -665,10 +665,10 @@\n             'mobile_number' => isset($data['mobile_number']) && $data['mobile_number'] != '' ? $data['mobile_number'] : $user->mobile_number,\n             //'email' => isset($data['email']) && $data['email'] != '' ? $data['email'] : $user->email,\n             'gender' => isset($data['gender']) && $data['gender'] != '' ? $data['gender'] : $user->gender,\n             'dob' => isset($data['dob']) && $data['dob'] != '' ? $data['dob'] : $user->dob,\n-            'avatar' => 'users/'.$avatarImage,\n-            'thumb_avatar' => 'users/'.$avatarThumbImage,\n+            'avatar' => $avatarImage,\n+            'thumb_avatar' => $avatarThumbImage,\n             'updated_at' => date('Y-m-d H:i:s'),\n         );\n \n         DB::table('users')->where('id', $user->id)->update($userProfileArr);\n"
                },
                {
                    "date": 1629287210184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -648,8 +648,11 @@\n             //create medium thumbnail\n             $avatarThumbImagepath = public_path('storage/users/'.$avatarThumbImage);\n             //$img = Image::make($path)->resize(300, 185)->save($path);\n             $this->createThumbnail($avatarThumbImagepath, 300, 185);\n+\n+            $saveavatarThumbImage = 'users/'.$avatarThumbImage;\n+            $saveavatarImage = 'users/'.$avatarImage;\n         }\n \n         // if (isset($data['image']) && $data['image']!= null ) {\n         //     $name = 'img_' . time() . $request->file('image')->getClientOriginalName();\n@@ -665,10 +668,10 @@\n             'mobile_number' => isset($data['mobile_number']) && $data['mobile_number'] != '' ? $data['mobile_number'] : $user->mobile_number,\n             //'email' => isset($data['email']) && $data['email'] != '' ? $data['email'] : $user->email,\n             'gender' => isset($data['gender']) && $data['gender'] != '' ? $data['gender'] : $user->gender,\n             'dob' => isset($data['dob']) && $data['dob'] != '' ? $data['dob'] : $user->dob,\n-            'avatar' => $avatarImage,\n-            'thumb_avatar' => $avatarThumbImage,\n+            'avatar' => $saveavatarImage,\n+            'thumb_avatar' => $saveavatarThumbImage,\n             'updated_at' => date('Y-m-d H:i:s'),\n         );\n \n         DB::table('users')->where('id', $user->id)->update($userProfileArr);\n"
                },
                {
                    "date": 1629287218242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -620,10 +620,10 @@\n \n     public function updateProfile(Request $request)\n     {\n         $user = Auth::user();\n-        $avatarImage = $user->avatar;\n-        $avatarThumbImage = $user->thumb_avatar;\n+        $saveavatarImage = $user->avatar;\n+        $saveavatarThumbImage = $user->thumb_avatar;\n         $data = $request->all();\n         \n         if($request->hasFile('image')) {\n             //get filename with extension\n"
                },
                {
                    "date": 1629287245240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -683,8 +683,9 @@\n         $dataRow['nick_name'] = $user->nick_name;\n         $dataRow['name'] = $user->name;\n         $dataRow['email'] = $user->email;\n         $dataRow['mobile_number'] = $user->mobile_number;\n+        $dataRow['dob'] = $user->bod;\n         $dataRow['followers'] = 0;\n         $dataRow['following'] = 0;\n         $dataRow['likes'] = 0;\n         $dataRow['user_bio'] = $user->user_bio;\n"
                },
                {
                    "date": 1629287256290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -683,9 +683,9 @@\n         $dataRow['nick_name'] = $user->nick_name;\n         $dataRow['name'] = $user->name;\n         $dataRow['email'] = $user->email;\n         $dataRow['mobile_number'] = $user->mobile_number;\n-        $dataRow['dob'] = $user->bod;\n+        $dataRow['dob'] = $user->dob;\n         $dataRow['followers'] = 0;\n         $dataRow['following'] = 0;\n         $dataRow['likes'] = 0;\n         $dataRow['user_bio'] = $user->user_bio;\n"
                },
                {
                    "date": 1629287264421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -676,9 +676,9 @@\n \n         DB::table('users')->where('id', $user->id)->update($userProfileArr);\n \n \n-        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio', 'avatar', 'thumb_avatar')->where('users.id', $user->id)->first();\n+        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio', 'avatar', 'thumb_avatar', 'dob')->where('users.id', $user->id)->first();\n \n         $dataRow['id'] = $user->id;\n         $dataRow['nick_name'] = $user->nick_name;\n         $dataRow['name'] = $user->name;\n"
                },
                {
                    "date": 1629469976199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1093,5 +1093,44 @@\n             'errors' => '',\n         ]);\n \n     }\n+\n+    /**\n+     * Get the authenticated User.\n+     *\n+     * @responseFile status=401 scenario=\"api_key not provided\" responses/unauthenticated.json\n+     * @responseFile responses/auth/me.json\n+     *\n+     * @param  \\Illuminate\\Http\\Request  $request\n+     * @return \\Illuminate\\Http\\JsonResponse\n+     */\n+    public function getProfile(Request $request)\n+    {\n+        $userID = $request->get('user_id');\n+        $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio', 'avatar', 'thumb_avatar', 'gender')->where('users.id', $userID)->first();\n+\n+        $dataRow['id'] = $user->id;\n+        $dataRow['nick_name'] = $user->nick_name;\n+        $dataRow['name'] = $user->name;\n+        $dataRow['email'] = $user->email;\n+        $dataRow['mobile_number'] = $user->mobile_number;\n+        $dataRow['gender'] = $user->gender;\n+        $dataRow['followers'] = 0;\n+        $dataRow['following'] = 0;\n+        $dataRow['likes'] = 0;\n+        $dataRow['user_bio'] = $user->user_bio;\n+        $dataRow['full_image'] = env('APP_URL').'/storage/app/public/'.$user->avatar;\n+        $dataRow['thumb_image'] = env('APP_URL').'/storage/app/public/'.$user->thumb_avatar;\n+\n+        $dataArray[] = $dataRow;\n+        $this->userSetHidden($user);\n+        $resp = [\n+            'status' => true,\n+            'data' => $dataRow,\n+            'message' => 'success',\n+            'error' => false,\n+            'errors' => '',\n+        ];\n+        return response()->json($resp, $this->statusCode);\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629469998543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -434,8 +434,9 @@\n         $dataRow['name'] = $user->name;\n         $dataRow['email'] = $user->email;\n         $dataRow['mobile_number'] = $user->mobile_number;\n         $dataRow['gender'] = $user->gender;\n+        $dataRow['dob'] = $user->dob;\n         $dataRow['followers'] = 0;\n         $dataRow['following'] = 0;\n         $dataRow['likes'] = 0;\n         $dataRow['user_bio'] = $user->user_bio;\n@@ -1114,8 +1115,9 @@\n         $dataRow['name'] = $user->name;\n         $dataRow['email'] = $user->email;\n         $dataRow['mobile_number'] = $user->mobile_number;\n         $dataRow['gender'] = $user->gender;\n+        $dataRow['dob'] = $user->dob;\n         $dataRow['followers'] = 0;\n         $dataRow['following'] = 0;\n         $dataRow['likes'] = 0;\n         $dataRow['user_bio'] = $user->user_bio;\n"
                },
                {
                    "date": 1629470046945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1104,9 +1104,9 @@\n      *\n      * @param  \\Illuminate\\Http\\Request  $request\n      * @return \\Illuminate\\Http\\JsonResponse\n      */\n-    public function getProfile(Request $request)\n+    public function getOtherUserProfile(Request $request)\n     {\n         $userID = $request->get('user_id');\n         $user = User::select('id', 'user_name as nick_name', 'name','email', 'mobile_number', 'user_bio', 'avatar', 'thumb_avatar', 'gender')->where('users.id', $userID)->first();\n \n"
                },
                {
                    "date": 1629470671932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,10 @@\n use App\\Models\\ApiLogs;\n use TCG\\Voyager\\Facades\\Voyager;\n use App\\Models\\VoxoMedias;\n use App\\Models\\UserSaveMedias;\n+use TCG\\Voyager\\Models\\Post;\n \n-\n /**\n  * @group Authentication\n  *\n  * Class AuthController\n@@ -991,9 +991,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = VoxoMedias::with('comments', 'likes')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = Post::with('comments', 'likes')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getVoxoMedia,\n"
                },
                {
                    "date": 1629470726722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,8 @@\n use App\\Models\\ApiLogs;\n use TCG\\Voyager\\Facades\\Voyager;\n use App\\Models\\VoxoMedias;\n use App\\Models\\UserSaveMedias;\n-use TCG\\Voyager\\Models\\Post;\n \n /**\n  * @group Authentication\n  *\n"
                },
                {
                    "date": 1629470828564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -990,9 +990,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = Post::with('comments', 'likes')->where('user_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = Post::with('comments', 'likes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getVoxoMedia,\n"
                },
                {
                    "date": 1629471097511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -990,9 +990,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = Post::with('comments', 'likes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = Post::where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getVoxoMedia,\n"
                },
                {
                    "date": 1629471107090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -990,9 +990,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = Post::where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = Post::with('comments', 'likes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getVoxoMedia,\n"
                },
                {
                    "date": 1629471235047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -990,9 +990,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = Post::with('comments', 'likes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = Post::with('postcomments', 'postlikes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getVoxoMedia,\n"
                },
                {
                    "date": 1629471302608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -990,9 +990,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = Post::with('postcomments', 'postlikes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = Post::with('posts.postcomments', 'posts.postlikes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getVoxoMedia,\n"
                },
                {
                    "date": 1629471310454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -990,9 +990,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = Post::with('posts.postcomments', 'posts.postlikes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = Post::with('post.postcomments', 'post.postlikes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getVoxoMedia,\n"
                },
                {
                    "date": 1629471317166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -990,9 +990,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = Post::with('post.postcomments', 'post.postlikes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = Post::with('postcomments', 'postlikes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getVoxoMedia,\n"
                },
                {
                    "date": 1629471388917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -990,9 +990,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = Post::with('postcomments', 'postlikes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = Post::with('comments', 'likes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getVoxoMedia,\n"
                },
                {
                    "date": 1629471562967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -990,9 +990,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = Post::with('comments', 'likes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = Post::with('comments', 'likes', 'postMedia')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getVoxoMedia,\n"
                },
                {
                    "date": 1629471604507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -990,9 +990,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = Post::with('comments', 'likes', 'postMedia')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = Post::with('comments', 'likes', 'postMedia')->withcount('comments', 'likes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getVoxoMedia,\n"
                },
                {
                    "date": 1629472134623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -990,9 +990,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = Post::with('comments', 'likes', 'postMedia')->withcount('comments', 'likes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = Post::with('comments', 'likes', 'postMedia', 'authorId')->withcount('comments', 'likes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getVoxoMedia,\n"
                },
                {
                    "date": 1629472151818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -990,9 +990,9 @@\n         return response()->json($getVoxoMedia, $this->statusCode);\n     }\n \n     function getMyVideo($userId){\n-        $getVoxoMedia = Post::with('comments', 'likes', 'postMedia', 'authorId')->withcount('comments', 'likes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n+        $getVoxoMedia = Post::with('comments', 'likes', 'postMedia')->withcount('comments', 'likes')->where('author_id', $userId)->orderBy('id', 'DESC')->paginate(10);\n         if(!$getVoxoMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getVoxoMedia,\n"
                },
                {
                    "date": 1629472168606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1014,9 +1014,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('vMedia.comments','vMedia.likes')->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(10);\n+        $getSaveMedia = UserSaveMedias::with('vMedia.comments','vMedia.likes', 'vMedia.authorId')->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(10);\n         if(!$getSaveMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n"
                },
                {
                    "date": 1629472200977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1014,9 +1014,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('vMedia.comments','vMedia.likes', 'vMedia.authorId')->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(10);\n+        $getSaveMedia = UserSaveMedias::with('vMedia.comments','vMedia.likes', 'vMedia.user')->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(10);\n         if(!$getSaveMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n"
                },
                {
                    "date": 1629472219509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1014,9 +1014,9 @@\n         return $resp;\n     }\n \n     function getSaveWallVideo($userId, $type){\n-        $getSaveMedia = UserSaveMedias::with('vMedia.comments','vMedia.likes', 'vMedia.user')->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(10);\n+        $getSaveMedia = UserSaveMedias::with('vMedia.comments','vMedia.likes', 'vMedia.users')->where(['user_save_medias.user_id' => $userId, 'user_save_medias.type' => $type])->orderBy('user_save_medias.id', 'DESC')->paginate(10);\n         if(!$getSaveMedia->IsEmpty()){\n             $resp = [\n                 'status' => true,\n                 'data' => $getSaveMedia,\n"
                },
                {
                    "date": 1629472439697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1077,12 +1077,13 @@\n     }\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n-\n-        $getFollowerList = UserFollower::where('follower_id', $user->id)->paginate(10);\n-\n-        $getFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n+        if($request->get('type') == 'follower'){\n+            $getFollowerList = UserFollower::where('follower_id', $user->id)->paginate(10);\n+        }else{\n+            $getFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n+        }\n         \n         $data['followers'] = $getFollowerList;\n         $data['followings'] = $getFollowingList;\n         return $this->respond([\n"
                },
                {
                    "date": 1629472458558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1077,8 +1077,9 @@\n     }\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n+        \n         if($request->get('type') == 'follower'){\n             $getFollowerList = UserFollower::where('follower_id', $user->id)->paginate(10);\n         }else{\n             $getFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n"
                },
                {
                    "date": 1629472485540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1077,9 +1077,9 @@\n     }\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n-        \n+        echo $request->get('type');die;\n         if($request->get('type') == 'follower'){\n             $getFollowerList = UserFollower::where('follower_id', $user->id)->paginate(10);\n         }else{\n             $getFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n"
                },
                {
                    "date": 1629472521411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1079,19 +1079,19 @@\n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n         echo $request->get('type');die;\n         if($request->get('type') == 'follower'){\n-            $getFollowerList = UserFollower::where('follower_id', $user->id)->paginate(10);\n+            $getFollowFollowingList = UserFollower::where('follower_id', $user->id)->paginate(10);\n         }else{\n-            $getFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n+            $getFollowFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n         }\n         \n-        $data['followers'] = $getFollowerList;\n-        $data['followings'] = $getFollowingList;\n+        // $data['followers'] = $getFollowerList;\n+        // $data['followings'] = $getFollowingList;\n         return $this->respond([\n             'status' => true,\n             'message' => 'Follower Following List',\n-            'data' => $data,\n+            'data' => $getFollowFollowingList,\n             'error' => false,\n             'errors' => '',\n         ]);\n \n"
                },
                {
                    "date": 1629472526574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1077,9 +1077,9 @@\n     }\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n-        echo $request->get('type');die;\n+        \n         if($request->get('type') == 'follower'){\n             $getFollowFollowingList = UserFollower::where('follower_id', $user->id)->paginate(10);\n         }else{\n             $getFollowFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n"
                },
                {
                    "date": 1629472544574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1088,9 +1088,9 @@\n         // $data['followers'] = $getFollowerList;\n         // $data['followings'] = $getFollowingList;\n         return $this->respond([\n             'status' => true,\n-            'message' => 'Follower Following List',\n+            'message' => $request->get('type').' List',\n             'data' => $getFollowFollowingList,\n             'error' => false,\n             'errors' => '',\n         ]);\n"
                },
                {
                    "date": 1629483464584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1083,9 +1083,9 @@\n             $getFollowFollowingList = UserFollower::where('follower_id', $user->id)->paginate(10);\n         }else{\n             $getFollowFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n         }\n-        \n+        dd($getFollowFollowingList);\n         // $data['followers'] = $getFollowerList;\n         // $data['followings'] = $getFollowingList;\n         return $this->respond([\n             'status' => true,\n"
                },
                {
                    "date": 1629483473499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1083,9 +1083,9 @@\n             $getFollowFollowingList = UserFollower::where('follower_id', $user->id)->paginate(10);\n         }else{\n             $getFollowFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n         }\n-        dd($getFollowFollowingList);\n+        print_r($getFollowFollowingList);\n         // $data['followers'] = $getFollowerList;\n         // $data['followings'] = $getFollowingList;\n         return $this->respond([\n             'status' => true,\n"
                },
                {
                    "date": 1629483502601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1077,9 +1077,9 @@\n     }\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n-        \n+        echo $user->id;die;\n         if($request->get('type') == 'follower'){\n             $getFollowFollowingList = UserFollower::where('follower_id', $user->id)->paginate(10);\n         }else{\n             $getFollowFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n"
                },
                {
                    "date": 1629483511760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1077,11 +1077,11 @@\n     }\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n-        echo $user->id;die;\n+       \n         if($request->get('type') == 'follower'){\n-            $getFollowFollowingList = UserFollower::where('follower_id', $user->id)->paginate(10);\n+            $getFollowFollowingList = UserFollower::where('follower_ids', $user->id)->paginate(10);\n         }else{\n             $getFollowFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n         }\n         print_r($getFollowFollowingList);\n"
                },
                {
                    "date": 1629483533950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1077,9 +1077,9 @@\n     }\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n-       \n+       echo $request->get('type');die;\n         if($request->get('type') == 'follower'){\n             $getFollowFollowingList = UserFollower::where('follower_ids', $user->id)->paginate(10);\n         }else{\n             $getFollowFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n"
                },
                {
                    "date": 1629483567002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1077,9 +1077,9 @@\n     }\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n-       echo $request->get('type');die;\n+      \n         if($request->get('type') == 'follower'){\n             $getFollowFollowingList = UserFollower::where('follower_ids', $user->id)->paginate(10);\n         }else{\n             $getFollowFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n"
                },
                {
                    "date": 1629483574669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1079,13 +1079,13 @@\n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n       \n         if($request->get('type') == 'follower'){\n-            $getFollowFollowingList = UserFollower::where('follower_ids', $user->id)->paginate(10);\n+            $getFollowFollowingList = UserFollower::where('follower_id', $user->id)->paginate(10);\n         }else{\n             $getFollowFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n         }\n-        print_r($getFollowFollowingList);\n+        \n         // $data['followers'] = $getFollowerList;\n         // $data['followings'] = $getFollowingList;\n         return $this->respond([\n             'status' => true,\n"
                },
                {
                    "date": 1629483583374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1079,9 +1079,9 @@\n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n       \n         if($request->get('type') == 'follower'){\n-            $getFollowFollowingList = UserFollower::where('follower_id', $user->id)->paginate(10);\n+            $getFollowFollowingList = UserFollower::where('follower_id', $user->id)->paginate(1);\n         }else{\n             $getFollowFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n         }\n         \n"
                },
                {
                    "date": 1629483849570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1077,13 +1077,17 @@\n     }\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n-      \n+        if(isset($request->get('limit'))){\n+            $limit = $request->get('limit');\n+        }else{\n+            $limit = 10;\n+        }\n         if($request->get('type') == 'follower'){\n-            $getFollowFollowingList = UserFollower::where('follower_id', $user->id)->paginate(1);\n+            $getFollowFollowingList = UserFollower::where('follower_id', $user->id)->paginate($limit);\n         }else{\n-            $getFollowFollowingList = UserFollower::where('user_id', $user->id)->paginate(10);\n+            $getFollowFollowingList = UserFollower::where('user_id', $user->id)->paginate($limit);\n         }\n         \n         // $data['followers'] = $getFollowerList;\n         // $data['followings'] = $getFollowingList;\n"
                },
                {
                    "date": 1629483864293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1077,9 +1077,9 @@\n     }\n \n     public function followingFollowerList(Request $request){\n         $user = Auth::user();\n-        if(isset($request->get('limit'))){\n+        if($request->get('limit') !== null){\n             $limit = $request->get('limit');\n         }else{\n             $limit = 10;\n         }\n"
                },
                {
                    "date": 1629483947061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1080,9 +1080,9 @@\n         $user = Auth::user();\n         if($request->get('limit') !== null){\n             $limit = $request->get('limit');\n         }else{\n-            $limit = 10;\n+            $limit = 1;\n         }\n         if($request->get('type') == 'follower'){\n             $getFollowFollowingList = UserFollower::where('follower_id', $user->id)->paginate($limit);\n         }else{\n"
                },
                {
                    "date": 1629483973437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1080,9 +1080,9 @@\n         $user = Auth::user();\n         if($request->get('limit') !== null){\n             $limit = $request->get('limit');\n         }else{\n-            $limit = 1;\n+            $limit = 10;\n         }\n         if($request->get('type') == 'follower'){\n             $getFollowFollowingList = UserFollower::where('follower_id', $user->id)->paginate($limit);\n         }else{\n"
                },
                {
                    "date": 1629567523411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -940,8 +940,9 @@\n     public function getReelsList(Request $request){\n \n         $data =  array();\n         $data['id'] = 1;\n+        $data['user_id'] = 13;\n         $data['type'] = 'video';\n         $data['video_url'] = env('APP_URL').'/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n         $data['name'] = 'Praveen Singh';\n         $data['nick_name'] = '@praveen_singh';\n@@ -952,8 +953,9 @@\n         $data['share_post'] = '';\n         $data['is_follow'] = true;\n \n         $data2['id'] = 2;\n+        $data['user_id'] = 13;\n         $data2['type'] = 'video';\n         $data2['video_url'] = env('APP_URL').'/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n         $data2['name'] = 'Praveen Singh';\n         $data2['nick_name'] = '@praveen_singh';\n"
                },
                {
                    "date": 1629567545371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -902,8 +902,9 @@\n         $videoData['video'] = env('APP_URL').'/storage/app/public/posts/file_example_MP4_480_1_5MG.mp4';\n         $videoDataArray = array(0 =>$videoData);\n         \n         $dataRow['id'] = 1;\n+        $dataRow['user_id'] = 13;\n         $dataRow['type'] = 'image';\n         $dataRow['image_array'] = $imageDataArray;\n         $dataRow['name'] = 'Praveen Singh';\n         $dataRow['nick_name'] = '@praveen_singh';\n@@ -914,8 +915,9 @@\n         $dataRow['share_post'] = '';\n         $dataRow['is_follow'] = true;\n \n         $dataRow2['id'] = 2;\n+        $dataRow['user_id'] = 13;\n         $dataRow2['type'] = 'video';\n         $dataRow2['image_array'] = $videoDataArray;\n         $dataRow2['name'] = 'Praveen Singh';\n         $dataRow2['nick_name'] = '@praveen_singh';\n"
                }
            ],
            "date": 1627650339496,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\API\\V1;\n\nuse Validator;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Foundation\\Auth\\AuthenticatesUsers;\nuse Image;\nuse App\\User;\nuse Illuminate\\Support\\Facades\\DB;\nuse App\\Models\\Countries;\nuse App\\Models\\States;\nuse App\\Models\\Post;\nuse App\\Models\\Comment;\nuse App\\Models\\PostLike;\nuse Illuminate\\Support\\Str;\nuse App\\Models\\Page;\nuse App\\Models\\Notification;\nuse App\\Models\\Enquiry;\nuse App\\Models\\UserFollower;\nuse App\\Models\\ApiLogs;\nuse TCG\\Voyager\\Facades\\Voyager;\nuse App\\Models\\Order;\nuse App\\Models\\OrderItem;\nuse App\\Models\\Restaurant;\n\n/**\n * @group Authentication\n *\n * Class AuthController\n *\n * Fullfills all aspects related to authenticate a user.\n */\nclass AuthController extends APIController\n{\n\n    use AuthenticatesUsers;\n    public function register(Request $request)\n    {\n        $time = date('Y-m-d H:i:s');\n        $validation = Validator::make($request->all(), [\n            'name' => 'required',\n            'phone_number' => 'required|regex:/^[0-9]{9,12}$/',\n            'email' => 'required|email',\n            'password' => 'required|min:8',\n        ]);\n        $data = $request->all();\n        if ($validation->fails()) {\n            //return $this->throwValidation($validation->messages()->first());\n            $resp = [\n                'status' => false,\n                'data' => '',\n                'message' => $validation->messages()->first(),\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }\n        $checkuser = User::where(['phone_number' => $request->get('phone_number'), 'role_id' => USER_ROLE])->count();\n        if($checkuser == 1){\n            $resp = [\n                'status' => false,\n                'data' => '',\n                'message' => 'The phone number has already been taken',\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        } \n\n        $checkuser = User::where(['email' => $request->get('email'), 'role_id' => USER_ROLE])->count();\n        if($checkuser == 1){\n            $resp = [\n                'status' => false,\n                'data' => $resposeArray,\n                'message' => 'The email has already been taken',\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        } \n\n\n        $otp = randomOTP();\n        //print_r($data);die;\n        $token ='';\n        //$otp = '1234';\n        $arr = [\n            'role_id' => USER_ROLE,\n            'name' => $data['name'],\n            'phone_number' => $data['phone_number'],\n            'email' => $data['email'],\n            'password' => Hash::make($data['password']),\n            'device_token' => $data['device_token'],\n            'device_type' => $data['device_type'],\n            'otp' => $otp\n        ];\n            //dd($arr);\n        try {\n\n            $user = User::create($arr);\n\n            $notify_message = $otp . ' is the OTP for accessing your Mealox account. PLEASE DO NOT SHARE IT WITH ANYONE.';\n            $notification_data = ['type' => 'otp', 'message' => $notify_message, 'user_id' => $user->id];\n            $sendSms = sendGCMUser($user->device_token, 'Verify OTP', $notify_message, $user->device_type, $notification_data);\n            $this->sendSms2($notify_message, $data['phone_number']);\n            //$this->sendSms($notify_message, $data['phone']);\n\n            $passportToken = $user->createToken('API Access Token');\n            $passportToken->token->save();\n            $token = $passportToken->accessToken;\n\n        } catch (\\Exception $e) {\n            return $this->respondInternalError($e->getMessage());\n        }\n\n        $resp = [\n            'status' => true,\n            'data' => $user,\n            'token' => $token,\n            'message' => 'Otp send successfully.',\n            'error' => false,\n            'errors' => '',\n            'user_path' => env('APP_URL').'/public/images/profile/',\n        ];\n        return response()->json($resp, $this->statusCode);\n    }\n\n\n    /**\n     * Attempt to login the user.\n     *\n     * If login is successfull, you get an api_token in response. Use that api_token to authenticate yourself for further api calls.\n     *\n     * @bodyParam email string required Your email id. Example: \"user@test.com\"\n     * @bodyParam password string required Your Password. Example: \"abc@123_4\"\n     *\n     * @responseFile status=401 scenario=\"api_key not provided\" responses/unauthenticated.json\n     * @responseFile responses/auth/login.json\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function login(Request $request)\n    {\n        $validation = Validator::make($request->all(), [\n            'mobile_number' => 'required'\n        ]);\n\n        if ($validation->fails()) {\n            $resp = [\n                'status' => false,\n                'data' => '',\n                'message' => $validation->messages()->first(),\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }\n\n        $resposeArray = array();\n        $checkuser = User::where(['mobile_number' => $request->get('mobile_number'), 'role_id' => USER_ROLE])->count();\n        $otp = randomOTP();\n        $resposeArray = array(\n            'mobile_number' => $request->get('mobile_number'),\n            'otp' => $otp\n        );\n        if($checkuser == 0){\n            $resp = [\n                'status' => false,\n                'data' => $resposeArray,\n                'is_register' => 0,\n                'message' => 'User not register',\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }   \n        \n        try {\n            //$otp = randomOTP();\n            \n            User::where('mobile_number', $request->get('mobile_number'))->update(['otp'=>$otp]);\n            $user = User::where('mobile_number', $request->get('mobile_number'))->first();\n            // Save generated token\n            $notify_message = $otp . ' is the OTP for accessing your account. PLEASE DO NOT SHARE IT WITH ANYONE.';\n            $notification_data = ['type' => 'otp', 'message' => $notify_message, 'user_id' => $user->id];\n            $sendSms = sendGCMUser($user->device_token, 'Verify OTP', $notify_message, $user->device_type, $notification_data);\n           \n            //$this->sendSms($notify_message, $user->phone);\n\n        } catch (\\Exception $e) {\n            return $this->respondInternalError($e->getMessage());\n        }\n\n        return $this->respond([\n            'status' => true,\n            'message' => 'Otp send successfully.',\n            'data' => $resposeArray,\n            'error' => false,\n            'errors' => '',\n        ]);\n    }\n\n    public function verifyOtp(Request $request) {\n\n        $validation = Validator::make($request->all(), [\n            'phone_number' => 'required',\n            'otp' => 'required',\n        ]);\n\n        if ($validation->fails()) {\n            //return $this->throwValidation($validation->messages()->first());\n            $resp = [\n                'status' => true,\n                'data' => '',\n                'message' => $validation->messages()->first(),\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }\n        $data = $request->all();\n\n        $otp = randomOTP();\n        $resposeArray = array(\n            'phone_number' => $request->get('phone_number'),\n            'otp' => $otp,\n        );\n        $checkuser = User::where(['phone_number'=> $request->get('phone_number')])->count();\n        if($checkuser == 0){\n            $resp = [\n                'status' => false,\n                'data' => $resposeArray,\n                'message' => 'User not register.',\n                'is_register' => 0,\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }\n        $user = User::select('id', 'name', 'email', 'phone_number', 'otp', 'avatar', 'location')->where(['phone_number'=> $request->get('phone_number'), 'otp' => $request->otp])->first();\n       \n        if($user){\n            if(isset($data['device_token'])){\n                $userProfileArr = array(\n                    'device_token' => $data['device_token'],\n                    'device_type' => $data['device_type']\n                );\n                DB::table('users')->where('id', $user->id)->update($userProfileArr);\n            }\n            DB::table('users')->where('id', $user->id)->update(['status' => 1]);\n            $passportToken = $user->createToken('API Access Token');\n            $passportToken->token->save();\n            $token = $passportToken->accessToken;\n            \n            $checkLocation = DB::table('user_addresses')->select('location', 'latitude', 'longitude')->where(['user_id'=> $user->id])->first();\n            $user->location = $checkLocation && $checkLocation->location ? $checkLocation->location : '';\n            $user->lat = $checkLocation && $checkLocation->latitude ? $checkLocation->latitude : '';\n            $user->lng = $checkLocation && $checkLocation->longitude ? $checkLocation->longitude : '';\n            \n            $resp = [\n                'status' => true,\n                'data' => $user,\n                \n                'is_location' => isset($checkLocation->location) && $checkLocation->location != '' ? 1 : 0,\n                'is_register' => 1,\n                'token' => $token,\n                'message' => 'success',\n                'error' => false,\n                'errors' => '',\n                'user_path' => env('APP_URL').'/public/images/profile/',\n            ];\n        }else{\n            $resp = [\n                'status' => false,\n                'data' => $resposeArray,\n                'message' => 'Otp not verified.',\n                'error' => true,\n                'errors' => '',\n            ];\n        }\n\n       \n        return response()->json($resp, $this->statusCode);\n\n    }\n    public function resendOtp(Request $request)\n    {\n        $data = $request->all();\n        $validation = Validator::make($request->all(), [\n            'phone_number' => 'required',\n        ]);\n\n        if ($validation->fails()) {\n            //return $this->throwValidation($validation->messages()->first());\n            $resp = [\n                'status' => true,\n                'data' => '',\n                'message' => $validation->messages()->first(),\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }\n        $otp = randomOTP();\n        $resposeArray = array(\n            'phone_number' => $request->get('phone_number'),\n            'otp' => $otp\n        );\n        $user = User::where(['users.phone_number' => $data['phone_number'], 'role_id' => USER_ROLE])->count();\n        if($user > 0){\n           \n            DB::table('users')->where('phone_number', $data['phone_number'])->update(['otp' => $otp]);\n            $user = User::where('users.phone_number', $data['phone_number'])->first();\n            \n            $notify_message = $otp . ' is the OTP for accessing your MLM account. PLEASE DO NOT SHARE IT WITH ANYONE.';\n            $notification_data = ['type' => 'otp', 'message' => $notify_message, 'user_id' => $user->id];\n            $sendSms = sendGCMUser($user->device_token, 'Verify OTP', $notify_message, $user->device_type, $notification_data);\n            $resp = [\n                'status' => true,\n                'data' => $resposeArray,\n                'message' => 'Otp sent.',\n                'error' => false,\n                'errors' => '',\n            ];\n            \n        }else{\n            $resp = [\n                'status' => false,\n                'data' => $resposeArray,\n                'message' => 'User not found.',\n                'is_register' => 0,\n                'error' => true,\n                'errors' => '',\n            ];\n            \n        }\n        return response()->json($resp, $this->statusCode);\n\n    }\n    public function getCountries()\n    {\n        $countries = Countries::get();\n       \n        $resp = [\n            'status' => true,\n            'data' => $countries,\n            'message' => 'success',\n            'error' => false,\n            'errors' => '',\n        ];\n        return response()->json($resp, $this->statusCode);\n    }\n\n    public function getStates(Request $request)\n    {\n        $rule = [\n            'country_id' => 'required',\n        ];\n        $data = $request->all();\n        $states = array();\n        if ($this->validateData($data, $rule)) {\n            $states = States::where('country_id', $data['country_id'])->get();\n        }\n        $resp = [\n            'status' => true,\n            'data' => $states ,\n            'message' => 'success',\n            'error' => false,\n            'errors' => '',\n        ];\n        return response()->json($resp, $this->statusCode);\n    }\n    \n    /**\n     * Get the authenticated User.\n     *\n     * @responseFile status=401 scenario=\"api_key not provided\" responses/unauthenticated.json\n     * @responseFile responses/auth/me.json\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function me()\n    {\n        $userID = Auth::user();\n        $user = User::where('users.id', $userID->id)->first();\n        \n        $this->userSetHidden($user);\n        $resp = [\n            'status' => true,\n            'data' => $user,\n            'message' => 'success',\n            'error' => false,\n            'errors' => '',\n            'user_path' => env('APP_URL').'/public/images/profile/',\n        ];\n        return response()->json($resp, $this->statusCode);\n    }\n\n    public function userProfile(Request $request)\n    {\n        $userID = Auth::user();\n        $data = $request->all();\n        $user = User::where('users.id', $data['user_id'])->first();\n\n        $this->userSetHidden($user);\n        $resp = [\n            'status' => true,\n            'data' => $user,\n            'message' => 'success',\n            'error' => false,\n            'errors' => '',\n            'user_path' => env('APP_URL').'/public/images/profile/',\n        ];\n        return response()->json($resp, $this->statusCode);\n    }\n\n    \n    /**\n     * Attempt to logout the user.\n     *\n     * After successfull logut the token get invalidated and can not be used further.\n     *\n     * @responseFile status=401 scenario=\"api_key not provided\" responses/unauthenticated.json\n     * @responseFile responses/auth/logout.json\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function logout(Request $request)\n    {\n        try {\n            $request->user()->token()->revoke();\n        } catch (\\Exception $e) {\n            return $this->respondInternalError($e->getMessage());\n        }\n\n        $resp = [\n            'status' => true,\n            'data' => '',\n            'message' => trans('api.messages.logout.success'),\n            'error' => true,\n            'errors' => '',\n        ];\n        return response()->json($resp, $this->statusCode);\n       \n    }\n\n    public function changePassword(Request $request)\n    {\n        $errors = '';\n        \n        if (!(Hash::check($request->get('old_password'), Auth::user()->password))) {\n            $message = 'Old password is wrong.';\n            $errors = ['Old password is wrong.'];\n            $resp = [\n                'status' => false,\n                'data' => '',\n                'message' => $message,\n                'error' => true,\n                'errors' => $errors,\n            ];\n            return response()->json($resp, $this->statusCode);\n        } else if (strcmp($request->get('old_password'), $request->get('new_password')) == 0) {\n            $message = 'New password cannot be same as old password.';\n            $errors = ['New password cannot be same as old password.'];\n            $resp = [\n                'status' => false,\n                'data' => '',\n                'message' => $message,\n                'error' => true,\n                'errors' => $errors,\n            ];\n            return response()->json($resp, $this->statusCode);\n        } else {\n            $validation = Validator::make($request->all(), [\n                'old_password' => 'required',\n                'new_password' => 'string|min:8|max:25|required_with:confirm_password|same:confirm_password',\n            ]);\n           \n            $data = $request->all();\n            if ($validation->fails()) {\n                //return $this->throwValidation($validation->messages()->first());\n                $resp = [\n                    'status' => false,\n                    'data' => '',\n                    'message' => $validation->messages()->first(),\n                    'error' => true,\n                    'errors' => '',\n                ];\n                return response()->json($resp, $this->statusCode);\n            }\n            $user = Auth::user();\n            $user->password = bcrypt($request->get('new_password'));\n            $user->save();\n            $message = 'Password changed successfully';\n            \n        }\n        $resp = [\n            'status' => true,\n            'data' => '',\n            'message' => $message,\n            'error' => false,\n            'errors' => $errors,\n        ];\n        return response()->json($resp, $this->statusCode);\n    }\n\n    public function forgotPassword(Request $request)\n    {\n        $data = $request->all();\n        $validation = Validator::make($request->all(), [\n            'phone' => 'required',\n        ]);\n\n        if ($validation->fails()) {\n            //return $this->throwValidation($validation->messages()->first());\n            $resp = [\n                'status' => true,\n                'data' => '',\n                'message' => $validation->messages()->first(),\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }\n\n        $user = User::where('users.phone_number', $data['phone'])->count();\n        if($user > 0){\n            $password = randomPassword();\n            $userProfileArr = array(\n                'password' => Hash::make($password),\n            );\n\n            DB::table('users')->where('phone_number', $data['phone'])->update($userProfileArr);\n            $user = User::where('users.phone_number', $data['phone'])->first();\n            \n            $notify_message = $password . ' is the password for accessing your MLM account';\n            $notification_data = ['type' => 'forgot', 'message' => $notify_message, 'user_id' => $user->id];\n            $sendSms = sendGCMUser($user->device_token, 'Forgot password', $notify_message, $user->device_type, $notification_data);\n            $this->sendSms2($notify_message, $data['phone']);\n            $resp = [\n                'status' => true,\n                'data' => '',\n                'message' => 'Password sent to your registred phone number.',\n                'error' => false,\n                'errors' => '',\n            ];\n            \n        }else{\n            $resp = [\n                'status' => true,\n                'data' => '',\n                'message' => 'User not found.',\n                'error' => true,\n                'errors' => '',\n            ];\n            \n        }\n        return response()->json($resp, $this->statusCode);\n\n    }\n\n    public function updateProfile(Request $request)\n    {\n        $user = Auth::user();\n        $avatarImage = $user->avatar;\n        $data = $request->all();\n        \n        if (isset($data['image']) && $data['image']!= null ) {\n            $name = 'img_' . time() . $request->file('image')->getClientOriginalName();\n            Storage::disk('pic_profile')->put($name, file_get_contents($request->file('image')->getRealPath()));\n            $avatarImage = $name;\n            $imgPath = Storage::disk('pic_profile')->url($name);\n        } \n\n        $userProfileArr = array(\n            'name' => isset($data['name']) && $data['name'] != '' ? $data['name'] : $user->name,\n            'phone_number' => isset($data['phone']) && $data['phone'] != '' ? $data['phone'] : $user->phone_number,\n            'email' => isset($data['email']) && $data['email'] != '' ? $data['email'] : $user->email,\n            'avatar' => $avatarImage,\n            'updated_at' => date('Y-m-d H:i:s'),\n        );\n\n        DB::table('users')->where('id', $user->id)->update($userProfileArr);\n\n        $resp = [\n            'status' => true,\n            'data' => '',\n            'message' => 'Updated Successfully.',\n            'error' => false,\n            'errors' => '',\n            //'image_path' => env('ASSET_URL') . '/images/profile'\n        ];\n        return response()->json($resp, $this->statusCode);\n    }\n\n    public function addAddress(Request $request)\n    {\n        $user = Auth::user();\n        $data = $request->all();\n        \n        $validation = Validator::make($request->all(), [\n            'location' => 'required',\n            'address_type' => 'required',\n        ]);\n\n        if ($validation->fails()) {\n            //return $this->throwValidation($validation->messages()->first());\n            $resp = [\n                'status' => true,\n                'data' => '',\n                'message' => $validation->messages()->first(),\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }\n        $latlong = get_lat_long($data['location']); // create a function with the name \"get_lat_long\" given as below\n        $map = explode(',', $latlong);\n        $lat = $map[0];\n        $lng = $map[1];\n        $defaultSet = 0;\n        $checkAddressExist = DB::table('user_addresses')->where('user_id', $user->id)->count();\n        if($checkAddressExist == 0){\n            $defaultSet = 1;\n        }\n        $userAddressArr = array(\n            'user_id' => $user->id,\n            'location' => $data['location'],\n            'area' => isset($data['area']) && $data['area'] != '' ? $data['area'] : '',\n            'house_no' => isset($data['flat_no']) && $data['flat_no'] != '' ? $data['flat_no'] : '',\n            'landmark' => isset($data['landmark']) && $data['landmark'] != '' ? $data['landmark'] : '',\n            'type' => $data['address_type'] == 1 ? 'HOME' : ($data['address_type'] == 2 ? 'WORK' : 'OTHER'), \n            'latitude' => $lat,\n            'longitude' => $lng,\n            'is_default' => $defaultSet,\n            'created_at' => time(),\n            'updated_at' => time(),\n        );\n\n        DB::table('user_addresses')->insert($userAddressArr);\n\n        $resp = [\n            'status' => true,\n            'data' => '',\n            'message' => 'Address add successfully.',\n            'error' => false,\n            'errors' => '',\n            //'image_path' => env('ASSET_URL') . '/images/profile'\n        ];\n        return response()->json($resp, $this->statusCode);\n    }\n\n    public function updateAddress(Request $request)\n    {\n        $user = Auth::user();\n        $data = $request->all();\n        \n        $validation = Validator::make($request->all(), [\n            'location' => 'required',\n            'address_type' => 'required',\n        ]);\n\n        if ($validation->fails()) {\n            //return $this->throwValidation($validation->messages()->first());\n            $resp = [\n                'status' => true,\n                'data' => '',\n                'message' => $validation->messages()->first(),\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }\n        $latlong = get_lat_long($data['location']); // create a function with the name \"get_lat_long\" given as below\n        $map = explode(',', $latlong);\n        $lat = $map[0];\n        $lng = $map[1];\n\n        $userAddressArr = array(\n            'location' => $data['location'],\n            'area' => isset($data['area']) && $data['area'] != '' ? $data['area'] : '',\n            'flat_no' => isset($data['flat_no']) && $data['flat_no'] != '' ? $data['flat_no'] : '',\n            'landmark' => isset($data['landmark']) && $data['landmark'] != '' ? $data['landmark'] : '',\n            'address_type' =>$data['address_type'], \n            'lat' => $lat,\n            'lng' => $lng,\n            'updated_at' => date('Y-m-d H:i:s'),\n        );\n\n        DB::table('users')->where('id', $user->id)->update($userAddressArr);\n\n        $resp = [\n            'status' => true,\n            'data' => '',\n            'message' => 'Updated Successfully.',\n            'error' => false,\n            'errors' => '',\n            //'image_path' => env('ASSET_URL') . '/images/profile'\n        ];\n        return response()->json($resp, $this->statusCode);\n    }\n\n    public function addressList(Request $request){\n        $user = Auth::user();\n        $userAddress = DB::table('user_addresses')->where('user_id', $user->id)->get();\n        $resp = [\n            'status' => true,\n            'data' => $userAddress,\n            'message' => 'Success.',\n            'error' => false,\n            'errors' => '',\n        ];\n        return response()->json($resp, $this->statusCode);\n    }\n\n    public function orderList(Request $request){\n        $userID = Auth::user();\n        $validation = Validator::make($request->all(), [\n            'type' => 'required',\n        ]);\n        $data = $request->all();\n        if ($validation->fails()) {\n            //return $this->throwValidation($validation->messages()->first());\n            $resp = [\n                'status' => false,\n                'data' => '',\n                'message' => $validation->messages()->first(),\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }\n        \n        $status = $data['type'] == 1 ? array('N','A','P', 'AD', 'OD') : ($data['type'] == 2 ? array('DL') : array('CC', 'CB'));\n        $odrderData = DB::table('orders')->select('orders.id as orderId', 'orders.created_at as orderTime', 'orders.order_otp as order_otp', 'orders.item_total as item_total', 'orders.bill_to_pay as bill_to_pay', 'orders.offer_discount as offer_discount', 'orders.restaurant_id', 'orders.status', 'users.name as driverName', 'users.phone_number as phone_number')->leftJoin('users', 'users.id', '=', 'orders.delivery_man_id')->where('user_id', $userID->id)->whereIn('orders.status', $status)->get();\n\n        if($odrderData){\n            $orderArray = array();\n            foreach($odrderData as $orderList){\n                $getOrderItem = OrderItem::where('order_id', $orderList->orderId)->take(4)->get();\n                $iteamDetail = $iteamQuantityCount = array();\n                foreach($getOrderItem as $itemList){\n                    $rowItem['name'] = $itemList->name;\n                    $rowItem['price'] = $itemList->total_price;\n                    $rowItem['image'] = $itemList->image;\n                    $rowItem['is_nonveg'] = $itemList->is_nonveg;\n                    $rowItem['quantity'] = $itemList->quantity;\n                    $iteamQuantityCount[] = $itemList->quantity;\n                    $iteamDetail[] = $rowItem;\n                }\n\n                $getRestaurant = Restaurant::where('id', $orderList->restaurant_id)->first();\n                $listCatRow['res_id'] = $getRestaurant->id;\n                $listCatRow['name'] = $getRestaurant->name;\n                $listCatRow['description'] = $getRestaurant->description;\n                $listCatRow['rating'] = '0.00';\n                $listCatRow['deliverytime'] = '48 mins';\n                $listCatRow['two_person_price'] = $getRestaurant->two_person_price;\n                $listCatRow['image'] = env('APP_URL').'/storage/app/public/restaurants/'.$getRestaurant->image;\n                $listCatRow['driver_charge'] = Voyager::setting('site.driver_charges', '');\n                $listCatRow['admin_charge'] = Voyager::setting('site.admin_charge', '');\n                $userAddress = DB::table('user_addresses')->where('user_id', $userID->id)->first();\n                $listCatRow['id'] = $orderList->orderId;\n                $listCatRow['order_id'] = '#RES'.$orderList->orderId;\n                $listCatRow['user_address'] = isset($userAddress->location) && $userAddress->location != '' ? $userAddress->location : '';\n                $listCatRow['item_total'] = $orderList->item_total;\n                $listCatRow['total_amount'] = $orderList->bill_to_pay;\n                $listCatRow['discount'] = $orderList->offer_discount;\n                $listCatRow['status'] = $orderList->status;\n                $listCatRow['orderTime'] = date('M d, H:i A', $orderList->orderTime);\n                $listCatRow['item_count'] = array_sum($iteamQuantityCount);\n                $listCatRow['items'] = $iteamDetail;\n                $listCatRow['driver_name'] = $orderList->driverName;\n                $listCatRow['driver_location'] = $orderList->phone_number;\n                $listCatRow['order_otp'] = $orderList->order_otp;\n                $orderArray[] = $listCatRow;\n\n                \n            }\n            $status = true;\n            $data = $orderArray;\n            $message = 'orders';\n            $error = false;\n        }else{\n            $status = false;\n            $data = '';\n            $message = 'Orders not found.';\n            $error = true;\n        }\n        $resp = [\n            'status' => $status,\n            'data' => $orderArray,\n            'message' => $message,\n            'error' => $error,\n            'errors' => '',\n        ];\n        return response()->json($resp, $this->statusCode);\n    }\n\n    public function orderDetail(Request $request){\n        $userID = Auth::user();\n        $validation = Validator::make($request->all(), [\n            'order_id' => 'required',\n        ]);\n        $data = $request->all();\n        if ($validation->fails()) {\n            //return $this->throwValidation($validation->messages()->first());\n            $resp = [\n                'status' => false,\n                'data' => '',\n                'message' => $validation->messages()->first(),\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }\n\n        $getOrderDetail = Order::select('orders.id as orderId','orders.user_id as user_id', 'orders.created_at as orderTime', 'orders.payment_type as paymentType', 'orders.item_total as item_total', 'orders.bill_to_pay as bill_to_pay', 'orders.offer_discount as offer_discount', 'orders.status as status', 'usr.name as userName', 'usr.location as userLocation', 'restaurant.name as resName', 'restaurant.location as resLocation', 'driver.name as driverName', 'orders.restaurant_id', 'usrAdd.location', 'usrAdd.type')->leftJoin('users as restaurant', 'restaurant.id', '=', 'orders.restaurant_id')->leftJoin('users as usr', 'usr.id', '=', 'orders.user_id')->leftJoin('users as driver', 'driver.id', '=', 'orders.delivery_man_id')->leftJoin('user_addresses as usrAdd', 'usrAdd.id', '=', 'orders.user_address_id')->where('orders.id', $data['order_id'])->first();\n        if($getOrderDetail){\n        $getOrderItem = OrderItem::where('order_id', $getOrderDetail->orderId)->get();\n        $iteamDetail = array();\n        foreach($getOrderItem as $itemList){\n            $rowItem['name'] = $itemList->name;\n            $rowItem['is_nonveg'] = $itemList->is_nonveg;\n            $rowItem['price'] = $itemList->total_price;\n            $rowItem['quantity'] = $itemList->quantity;\n            $iteamDetail[] = $rowItem;\n        }\n        $getRestaurant = Restaurant::where('id', $getOrderDetail->restaurant_id)->first();\n        $orderArray['res_id'] = $getRestaurant->id;\n        $orderArray['name'] = $getRestaurant->name;\n        $orderArray['description'] = $getRestaurant->description;\n        $orderArray['rating'] = '0.00';\n        $orderArray['deliverytime'] = '48 mins';\n        $orderArray['two_person_price'] = $getRestaurant->two_person_price;\n        $orderArray['image'] = env('APP_URL').'/storage/app/public/restaurants/'.$getRestaurant->image;\n        $orderArray['driver_charge'] = Voyager::setting('site.driver_charges', '');\n        $orderArray['admin_charge'] = Voyager::setting('site.admin_charge', '');\n\n        $getUserDetail = User::where('id', $getOrderDetail->user_id)->first();\n        $orderArray['userName'] = $getOrderDetail->userName;\n        $orderArray['userLocation'] = $getOrderDetail->location;\n        $orderArray['locationType'] = $getOrderDetail->type;\n        $orderArray['resName'] = $getOrderDetail->resName;\n        $orderArray['resLocation'] = $getOrderDetail->resLocation;\n        $orderArray['orderTime'] = date('F d, H:i A', $getOrderDetail->orderTime);\n        $orderArray['driverName'] = $getOrderDetail->driverName;\n        $orderArray['paymentType'] = $getOrderDetail->paymentType;\n        $orderArray['items'] = $iteamDetail;\n        $orderArray['item_total'] = $getOrderDetail->item_total;\n        $orderArray['total_amount'] = $getOrderDetail->bill_to_pay;\n        $orderArray['discount'] = $getOrderDetail->offer_discount;\n        $orderArray['status'] = $getOrderDetail->status;\n        $orderArray['cgst'] = '0.00';\n        $orderArray['sgst'] = '0.00';\n        $orderArray['delivery_charges'] = Voyager::setting('site.driver_charges', '');\n            $resp = [\n                'status' => true,\n                'data' => $orderArray,\n                'message' => 'Success',\n                'error' => false,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }else{\n            $resp = [\n                'status' => false,\n                'data' => '',\n                'message' => 'Order not found',\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }\n    }\n\n    public function cmsPage(Request $request)\n    {\n        $userID = Auth::user();\n        $data = $request->all();\n        $validation = Validator::make($data, [\n            'slug' => 'required',\n        ]);\n\n        if ($validation->fails()) {\n            $resp = [\n                'status' => true,\n                'data' => '',\n                'message' => $validation->messages()->first(),\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }\n\n        $this->data = Page::where('slug', $data['slug'])->first();\n        $resp = [\n            'status' => true,\n            'data' => $this->data,\n            'message' => 'Success.',\n            'error' => false,\n            'errors' => '',\n        ];\n        return response()->json($resp, $this->statusCode);\n\n    }\n\n    public function notification(Request $request)\n    {\n        $userID = Auth::user();\n        $this->data = Notification::select('title', 'content', 'created_at')->where('user_id', $userID->id)->get();\n        $input = array(\n            'is_read' => 1,\n        );\n        Notification::where('user_id', $userID->id)->update($input);\n        $resp = [\n            'status' => true,\n            'data' => $this->data,\n            'message' => 'Success.',\n            'error' => false,\n            'errors' => '',\n            'user_path' => env('APP_URL').'/public/images/profile/',\n        ];\n        return response()->json($resp, $this->statusCode);\n    }\n\n    public function sendSms2($message, $mobile){\n        \n\n        $url = 'http://msg.ampleinfosoft.biz/submitsms.jsp?user=ayuvahel&key=c79d1b0438XX&mobile='.$mobile.'&message='.urlencode($message).'&senderid=AYUVAL&accusage=1';\n\n        //echo $url;die;\n        $curl = curl_init();\n\n        curl_setopt_array($curl, array(\n            CURLOPT_URL => $url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_ENCODING => \"\",\n            CURLOPT_MAXREDIRS => 10,\n            CURLOPT_TIMEOUT => 30,\n            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n            CURLOPT_CUSTOMREQUEST => \"GET\",\n        ));\n\n        $response = curl_exec($curl);\n        $err = curl_error($curl);\n\n        curl_close($curl);\n        return $response;\n        //print_r($response);die;\n    }\n    \n    public function sendSms($message, $mobile)\n    {\n        \n        $fields = array(\n            \"sender_id\" => \"FSTSMS\",\n            \"message\" => $message,\n            \"language\" => \"english\",\n            \"route\" => \"p\",\n            \"numbers\" => $mobile,\n            \"flash\" => \"1\"\n        );\n\n        $curl = curl_init();\n\n        curl_setopt_array($curl, array(\n            CURLOPT_URL => \"https://www.fast2sms.com/dev/bulk\",\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_ENCODING => \"\",\n            CURLOPT_MAXREDIRS => 10,\n            CURLOPT_TIMEOUT => 30,\n            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n            CURLOPT_CUSTOMREQUEST => \"POST\",\n            CURLOPT_POSTFIELDS => json_encode($fields),\n            CURLOPT_HTTPHEADER => array(\n                \"authorization: 6pAFulWXI7UwkjGn8dyE4QgJeD5R0q2cimazLxTvOs3C1NfHbhcMhZ1EH0ib8tGxYFQayAfCOPUKgp73\",\n                \"accept: */*\",\n                \"cache-control: no-cache\",\n                \"content-type: application/json\"\n            ),\n        ));\n\n        $response = curl_exec($curl);\n        $err = curl_error($curl);\n\n        curl_close($curl);\n        return $response;\n       // print_r($response);die;\n        if ($err) {\n            echo \"cURL Error #:\" . $err;\n        } else {\n            echo $response;\n        }\n    }\n\n    public function enquiry(Request $request)\n    {\n        $validation = Validator::make($request->all(), [\n            'name' => 'required',\n            'email' => 'required',\n            'message' => 'required',\n        ]);\n        $data = $request->all();\n        if ($validation->fails()) {\n            $resp = [\n                'status' => false,\n                'data' => '',\n                'message' => $validation->messages()->first(),\n                'error' => true,\n                'errors' => '',\n            ];\n            return response()->json($resp, $this->statusCode);\n        }\n        $input['name'] = $data['name'];\n        $input['email'] = $data['email'];\n        $input['message'] = $data['message'];\n        $post = Enquiry::create($input);\n\n        $resp = [\n            'status' => true,\n            'data' => $post,\n            'message' => 'Comment Successfully.',\n            'error' => false,\n            'errors' => '',\n        ];\n        return response()->json($resp, $this->statusCode);\n\n    }\n    \n    \n}"
        }
    ]
}