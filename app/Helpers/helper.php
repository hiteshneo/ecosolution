<?php

use Illuminate\Support\Str;
use App\Models\Notification;

/**
 * Henerate UUID.
 *
 * @return uuid
 */
function generateUuid()
{
    return Str::uuid();
}

if (! function_exists('homeRoute')) {
    /**
     * Return the route to the "home" page depending on authentication/authorization status.
     *
     * @return string
     */
    function homeRoute()
    {
        if (access()->allow('view-backend')) {
            return 'admin.dashboard';
        } elseif (auth()->check()) {
            return 'frontend.user.dashboard';
        }

        return 'frontend.index';
    }
}

// Global helpers file with misc functions.
if (! function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (! function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (! function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

if (! function_exists('gravatar')) {
    /**
     * Access the gravatar helper.
     */
    function gravatar()
    {
        return app('gravatar');
    }
}

if (! function_exists('includeRouteFiles')) {
    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        $directory = $folder;
        $handle = opendir($directory);
        $directory_list = [$directory];

        while (false !== ($filename = readdir($handle))) {
            if ($filename != '.' && $filename != '..' && is_dir($directory.$filename)) {
                array_push($directory_list, $directory.$filename.'/');
            }
        }

        foreach ($directory_list as $directory) {
            foreach (glob($directory.'*.php') as $filename) {
                require $filename;
            }
        }
    }
}

if (! function_exists('getRtlCss')) {
    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path).'/'.$filename.'.rtl.css';
    }
}

if (! function_exists('escapeSlashes')) {
    /**
     * Access the escapeSlashes helper.
     */
    function escapeSlashes($path)
    {
        $path = str_replace('\\', DIRECTORY_SEPARATOR, $path);
        $path = str_replace('//', DIRECTORY_SEPARATOR, $path);
        $path = trim($path, DIRECTORY_SEPARATOR);

        return $path;
    }
}

if (! function_exists('getRouteUrl')) {
    /**
     * Converts querystring params to array and use it as route params and returns URL.
     */
    function getRouteUrl($url, $url_type = 'route', $separator = '?')
    {
        $routeUrl = '';

        if (! empty($url)) {
            if ($url_type == 'route') {
                if (strpos($url, $separator) !== false) {
                    $urlArray = explode($separator, $url);
                    $url = $urlArray[0];
                    parse_str($urlArray[1], $params);
                    $routeUrl = route($url, $params);
                } else {
                    $routeUrl = route($url);
                }
            } else {
                $routeUrl = $url;
            }
        }

        return $routeUrl;
    }
}

if (! function_exists('renderMenuItems')) {
    /**
     * render sidebar menu items after permission check.
     */
    function renderMenuItems($items, $viewName = 'backend.includes.partials.sidebar-item')
    {
        foreach ($items as $item) {
            // if(!empty($item->url) && !Route::has($item->url)) {
            //     return;
            // }
            if (! empty($item->view_permission_id)) {
                if (access()->allow($item->view_permission_id)) {
                    echo view($viewName, compact('item'));
                }
            } else {
                echo view($viewName, compact('item'));
            }
        }
    }
}

if (! function_exists('checkDatabaseConnection')) {
    /**
     * @return bool
     */
    function checkDatabaseConnection()
    {
        try {
            DB::connection()->reconnect();

            return true;
        } catch (Exception $ex) {
            return false;
        }
    }
}

if (! function_exists('randomOTP')) {
    /**
     * @return bool
     */
    function randomOTP()
    {
        $n = 4;
        $generator = "1357902468";
        $code = "";
        for ($i = 1; $i <= $n; $i++) {
            $code .= substr($generator, (rand() % (strlen($generator))), 1);
        }

        return $code;
    }
}

if (! function_exists('randomPassword')) {
    /**
     * @return bool
     */
    function randomPassword()
    {
        $n = 8;
        $generator = "1357902468";
        $code = "";
        for ($i = 1; $i <= $n; $i++) {
            $code .= substr($generator, (rand() % (strlen($generator))), 1);
        }

        return $code;
    }
}

if (! function_exists('sendGCMUser')) {
    function sendGCMUser($token, $type, $notify_message, $deviceType, $notification_datas) {

        $notification_data = [
            'to' => $token,
            'content_available' => false,
            'notification' => [
                'title' => $type,
                'body' => $notify_message,
                'mutable_content' => true,
                'show_in_foreground' => true,
                'channelId' => 'my_default_channel',
                'sound' => 'Tri-tone',
                'vibrate' => '300',
                'notification_data' => $notification_datas
            ],
            'data' => [
                'url' => '',
                'dl' => '',
                'notification_data' => $notification_datas
            ]
        ];
        $api_key = 'AAAAxVl8sUc:APA91bEH7TuPBadNHhW_e14O_JPjn7S425lFPEW9rUnkZ450WZISekMZA6ge-7M5K5bRSJ__Hf6TFFfP9laopzNaIAneYIl8gvxqUiQut8G_Cp_iRV6AJPs-6cijnOJVlVHWfxFg9glE';

        $url = 'https://fcm.googleapis.com/fcm/send';

        $fields = json_encode($notification_data);
        $headers = [
            'Authorization: key=' . $api_key,
            'Content-Type: application/json'
        ];
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);
        $result = curl_exec($ch);
        curl_close($ch);
        return $result;
    }
}

if (! function_exists('sendGCMDriver')) {
    function sendGCMDriver($token, $type, $notify_message, $deviceType, $notification_datas) {

        $notification_data = [
            'to' => $token,
            'content_available' => false,
            'notification' => [
                'title' => $type,
                'body' => $notify_message,
                'mutable_content' => true,
                'show_in_foreground' => true,
                'channelId' => 'my_default_channel',
                'sound' => 'Tri-tone',
                'vibrate' => '300',
                'notification_data' => $notification_datas
            ],
            'data' => [
                'url' => '',
                'dl' => '',
                'notification_data' => $notification_datas
            ]
        ];
        $api_key = 'AAAAUjkYONE:APA91bHoiWWUjhamJBEWqgyGJeZ0h4vA0mJqcTS9TzVv07FVoNGvZCfm3gKbmKn1jBJneKSD1msQ6duXkuS0bKfFVDOTesdW53ju1LdzrP1ybP_olKgM_4iUeKYxQX7G3_GpAyLu_lFZ';

        $url = 'https://fcm.googleapis.com/fcm/send';

        $fields = json_encode($notification_data);
        $headers = [
            'Authorization: key=' . $api_key,
            'Content-Type: application/json'
        ];
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);
        $result = curl_exec($ch);
        curl_close($ch);
        return $result;
    }
}
if (! function_exists('sendGCMRestaurant')) {
    function sendGCMRestaurant($token, $type, $notify_message, $deviceType, $notification_datas) {

        $notification_data = [
            'to' => $token,
            'content_available' => false,
            'notification' => [
                'title' => $type,
                'body' => $notify_message,
                'mutable_content' => true,
                'show_in_foreground' => true,
                'channelId' => 'my_default_channel',
                'sound' => 'Tri-tone',
                'vibrate' => '300',
                'notification_data' => $notification_datas
            ],
            'data' => [
                'url' => '',
                'dl' => '',
                'notification_data' => $notification_datas
            ]
        ];
        $api_key = 'AAAAUjkYONE:APA91bHoiWWUjhamJBEWqgyGJeZ0h4vA0mJqcTS9TzVv07FVoNGvZCfm3gKbmKn1jBJneKSD1msQ6duXkuS0bKfFVDOTesdW53ju1LdzrP1ybP_olKgM_4iUeKYxQX7G3_GpAyLu_lFZ';

        $url = 'https://fcm.googleapis.com/fcm/send';

        $fields = json_encode($notification_data);
        $headers = [
            'Authorization: key=' . $api_key,
            'Content-Type: application/json'
        ];
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);
        $result = curl_exec($ch);
        curl_close($ch);
        return $result;
    }
}
if (! function_exists('random_strings')) {
    function random_strings($length_of_string){ 
        $str_result = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'; 
        return substr(str_shuffle($str_result), 0, $length_of_string); 
    } 
}

if (! function_exists('sendEmail')) {
    function sendEmail($email, $password){ 
        $from = "sanju17vyas@gmail.com";
        $to_email = $email;
        $subject = 'Reset password link';
        $message = 'Hello, <br> Below password is your temporialy password.<br>'.$password;
        $headers  = 'MIME-Version: 1.0' . "\r\n";
        $headers .= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";
        $headers .= 'Reply-To: <'.$from .'>' . "\r\n";
        $headers .= 'From: MLM  <'.$from .'>' . "\r\n";
        $headers .= 'X-Mailer: PHP/' . phpversion();
                    
        if(mail($to_email, $subject, $message, $headers)){
            return true;
        }else{
            return false;
        }
    } 
}

if (! function_exists('getSearchAreaLatLong')) {
    function getSearchAreaLatLong($lat, $lng, $distance = 10, $unit = 'km') {
        // radius of earth; @note: the earth is not perfectly spherical, but this is considered the 'mean radius'
        if ($unit == 'km')
            $radius = 6371.009; // in kilometers
        elseif ($unit == 'mi')
            $radius = 3958.761; // in miles

        // latitude boundaries
        $maxLat = (float) $lat + rad2deg($distance / $radius);
        $minLat = (float) $lat - rad2deg($distance / $radius);

        // longitude boundaries (longitude gets smaller when latitude increases)
        $maxLng = (float) $lng + rad2deg($distance / $radius / cos(deg2rad((float) $lat)));
        $minLng = (float) $lng - rad2deg($distance / $radius / cos(deg2rad((float) $lat)));

        $res=array('minLat'=> $minLat, 'maxLat'=> $maxLat, 'minLng'=> $minLng, 'maxLng'=> $maxLng);
        return $res;
    }
}
if (! function_exists('get_lat_long')) {
    function get_lat_long($address) {

        $address = str_replace(" ", "+", $address);

        $json = file_get_contents("https://maps.google.com/maps/api/geocode/json?address=$address&sensor=false&key=AIzaSyD68G6UYDDxDthxDtQCjidVP5dgth3P-o0");
        $json = json_decode($json);

        $lat = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lat'};
        $long = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lng'};

        return $lat . ',' . $long;
    }
}

if(! function_exists ('sendNotification'))
{
    function sendNotification($datas)
    {
        Notification::insert($datas);
    }
}
if (! function_exists('sendGCM')) {
    function sendGCM($token, $type, $notify_message, $deviceType, $notification_datas) {

        
        $notification_data = [
            'to' => $token,
            'content_available' => false,
            'notification' => [
                'title' => $type,
                'body' => $notify_message,
                'mutable_content' => true,
                'show_in_foreground' => true,
                'channelId' => 'my_default_channel',
                'sound' => 'Tri-tone',
                'vibrate' => '300',
                'notification_data' => $notification_datas
            ],
            'data' => [
                'url' => '',
                'dl' => '300',
                'notification_data' => $notification_datas
            ]
        ];
        $api_key = 'AAAAzhlYp6w:APA91bHn13580yY_6WsWqlFB-p02knCTWUgZB5BhFOfzFahFY4H5UPYBXxjC75RoizIGKBjy_nP8O_zDvQDCc47rvCJlJSBCJtEfHqc3H0B7os7yr4LDO68S77sQ_VL0dF0DrGtceR3E';

        $url = 'https://fcm.googleapis.com/fcm/send';

        $fields = json_encode($notification_data);
        $headers = [
            'Authorization: key=' . $api_key,
            'Content-Type: application/json'
        ];
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);
        $result = curl_exec($ch);
        curl_close($ch);
        return $result;
    }
}
if (! function_exists('distance')) {
function distance($lat1, $lon1, $lat2, $lon2, $unit) {

    $theta = $lon1 - $lon2;
    $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));
    $dist = acos($dist);
    $dist = rad2deg($dist);
    $miles = $dist * 60 * 1.1515;
    $unit = strtoupper($unit);
  
    if ($unit == "K") {
        return ($miles * 1.609344);
    } else if ($unit == "N") {
        return ($miles * 0.8684);
    } else {
        return $miles;
    }
  }
}

/**
 * @param $n
 * @return string
 * Use to convert large positive numbers in to short form like 1K+, 100K+, 199K+, 1M+, 10M+, 1B+ etc
 */
if (! function_exists('number_format_short')) {
    function number_format_short( $n ) {
        if ($n > 0 && $n < 1000) {
            // 1 - 999
            $n_format = floor($n);
            $suffix = '';
        } else if ($n >= 1000 && $n < 1000000) {
            // 1k-999k
            $n_format = floor($n / 1000);
            $suffix = 'K+';
        } else if ($n >= 1000000 && $n < 1000000000) {
            // 1m-999m
            $n_format = floor($n / 1000000);
            $suffix = 'M+';
        } else if ($n >= 1000000000 && $n < 1000000000000) {
            // 1b-999b
            $n_format = floor($n / 1000000000);
            $suffix = 'B+';
        } else if ($n >= 1000000000000) {
            // 1t+
            $n_format = floor($n / 1000000000000);
            $suffix = 'T+';
        }else{
            $n_format = $n;
            $suffix = '';
        }

        return !empty($n_format . $suffix) ? $n_format . $suffix : 0;
    }
}